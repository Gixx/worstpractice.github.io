<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-12-06T09:16:00+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Worst Practice</title><subtitle></subtitle><author><name>Gábor Iván</name></author><entry><title type="html">Advent of Code - Day 6</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-6" rel="alternate" type="text/html" title="Advent of Code - Day 6" /><published>2022-12-06T10:15:00+00:00</published><updated>2022-12-06T09:16:00+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-6</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-6"><![CDATA[<p><a href="https://adventofcode.com/2022/day/6" rel="noopener" target="_blank">Today’s puzzle</a> in short: we get a bunch 
        of random characters and need to find the first <code class="language-plaintext highlighter-rouge">n</code> distinct characters.</p>
      <h3 id="the-input-data">The input data</h3>
      <p>Today there’s only one line in the input, but it’s a long one. No special rules for this, just a bunch of characters.</p>
      <p>Our task is to find the position of the first <code class="language-plaintext highlighter-rouge">n</code> distinct characters.</p>
      <h3 id="part-one-and-two">Part one and two</h3>
      <p>The two parts today are almost the same, the only difference is the value of the <code class="language-plaintext highlighter-rouge">n</code>:</p>
      <ul>
        <li>In part one, <code class="language-plaintext highlighter-rouge">n</code> is <em>4</em>.</li>
        <li>In part two, <code class="language-plaintext highlighter-rouge">n</code> is <em>14</em>.</li>
      </ul>
      <p>In the solution today I can simply read the whole input at once, since it contains only one line. Then we split this
        long string into array with the <code class="language-plaintext highlighter-rouge">str_split()</code> function, that I used before. Then just start counting. Make it simple:</p>
      <div class="language-php highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
        </td>
        <td class="rouge-code">
          <pre><span class="nv">$line</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">);</span>
<span class="nv">$code</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
<span class="nv">$buffer</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">const</span> <span class="no">MARKER_LENGTH</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$code</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="nv">$buffer</span><span class="p">))</span> <span class="p">{</span>
        <span class="p">[,</span> <span class="nv">$buffer</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="nv">$code</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">''</span><span class="p">,</span><span class="nv">$buffer</span><span class="p">));</span>
        <span class="nv">$buffer</span> <span class="o">=</span> <span class="nb">empty</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">)</span> <span class="o">?</span> <span class="p">[]</span> <span class="o">:</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$buffer</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$code</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">)</span> <span class="o">==</span> <span class="no">MARKER_LENGTH</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
        </td>
      </tr>
    </tbody>
  </table>
</code></pre>
</div>
</div>
<p>The only complexity in this story the buffer handling. I chose a very primitive and low performance, but yet effective 
  way:</p>
<ul>
  <li>check if the next character is in the buffer
    <ul>
      <li>if yes, then convert the buffer to string</li>
      <li>split by the next character and take the second part</li>
      <li>convert this to array again, or initialize an empty array if the second part is empty</li>
    </ul>
  </li>
  <li>add the new character to the buffer</li>
  <li>quit the loop when the buffer reached the <code class="language-plaintext highlighter-rouge">MARKER_LENGTH</code></li>
</ul>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[This time we need to analyze a spooky data stream.]]></summary></entry><entry><title type="html">Advent of Code - Day 5</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-5" rel="alternate" type="text/html" title="Advent of Code - Day 5" /><published>2022-12-05T16:30:00+00:00</published><updated>2022-12-05T15:26:45+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-5</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-5"><![CDATA[<p><a href="https://adventofcode.com/2022/day/5" rel="noopener" target="_blank">Today’s puzzle</a> in short: for the first 
    sight I thought it will be a custom sorting algorithm, but in the end it became just a simple item movement between arrays.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>For the first time, the input data contains additional information. We have to extract this information and create initial
    “warehouse” state in the PHP code. The input file must remain pilled with crane-movement orders.</p>
  <ul>
    <li>The first 10 lines must be deleted (can be added to the PHP code as comment)</li>
    <li>Each line has the same form of information: <code class="language-plaintext highlighter-rouge">move # from # to #</code>, where <code class="language-plaintext highlighter-rouge">#</code> is a decimal.*</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>The solution for the puzzle is to follow each order and move crates between the columns according to the command, where
    the numbers are defined as follows:</p>
  <ul>
    <li>The first number represents the amount of crates.</li>
    <li>The second number represents the source column.</li>
    <li>The third number represents the target column.</li>
  </ul>
  <p>Our task is to tell which item is on the top of each column.</p>
  <h3 id="part-one">Part one</h3>
  <p>Because of a misreading the elves predicted that the crane is the <code class="language-plaintext highlighter-rouge">CrateMover 9000</code> which can move only one item at a time.</p>
  <p>To solve this puzzle we need to think in arrays again and simple <code class="language-plaintext highlighter-rouge">pop</code> and <code class="language-plaintext highlighter-rouge">push</code> elements.</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$storage</span> <span class="o">=</span> <span class="p">[</span>
    <span class="kc">null</span><span class="p">,</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'QFMRLWCV'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'DQL'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'PSRGWCNB'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'LCDHBQG'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'VGLFZS'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'DGNP'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'DZPVECW'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'CPDMS'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'ZNWTVMPC'</span><span class="p">),</span>
<span class="p">];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$command</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/move (?P&lt;iteration&gt;\d+) from (?P&lt;from&gt;\d+) to (?P&lt;to&gt;\d+)/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$command</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$command</span><span class="p">[</span><span class="s1">'iteration'</span><span class="p">];</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'to'</span><span class="p">]][]</span> <span class="o">=</span> <span class="nb">array_pop</span><span class="p">(</span><span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'from'</span><span class="p">]]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$storage</span> <span class="k">as</span> <span class="nv">$column</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$column</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nb">end</span><span class="p">(</span><span class="nv">$column</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, first of all, I initialized the warehouse in a more readable way: string which is being split into array 
  of characters. Why should I give up something that works?</p>
<p>Then I used regular expression again to extract the numeric information out from the command. Then just simply do an 
  <code class="language-plaintext highlighter-rouge">array_pop()</code> and an <code class="language-plaintext highlighter-rouge">array_push</code> (with a simpler syntax) within a for loop.</p>
<p>In the end, we go through the final state of the <code class="language-plaintext highlighter-rouge">$storage</code> and print the last element of each item.</p>
<h3 id="part-two">Part two</h3>
<p>Now the elves figured out their mistake, and realized that the crane is actually a <code class="language-plaintext highlighter-rouge">CrateMover 9001</code>, which can move multiple 
  items at a time. This will change the results for sure.</p>
<p>Technically this means, either:</p>
<ul>
  <li>We keep the loop and the <code class="language-plaintext highlighter-rouge">array_pop</code>, but then we need to collect these popped items into a new array, and then reverse
    it before pushing to the target column.</li>
  <li>We find a way to pop as many items at once as we need, and pushing them one-by-one to the target column.</li>
</ul>
<p>The second option sounds better because:</p>
<ul>
  <li>We can eliminate an ugly loop.</li>
  <li>PHP has a built-in function to pop multiple elements</li>
  <li>The <code class="language-plaintext highlighter-rouge">array_push</code> can accept multiple elements</li>
  <li>We have the chance to use the <code class="language-plaintext highlighter-rouge">...</code> spread-operator which is always a nice thing.</li>
</ul>
<p>So the new code will look like this:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ... $storage</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$command</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/move (?P&lt;slice&gt;\d+) from (?P&lt;from&gt;\d+) to (?P&lt;to&gt;\d+)/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$command</span><span class="p">))</span> <span class="p">{</span>
            <span class="nb">array_push</span><span class="p">(</span><span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'to'</span><span class="p">]],</span> <span class="mf">...</span><span class="nb">array_splice</span><span class="p">(</span><span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'from'</span><span class="p">]],</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="nv">$command</span><span class="p">[</span><span class="s1">'slice'</span><span class="p">]));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$storage</span> <span class="k">as</span> <span class="nv">$column</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$column</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nb">end</span><span class="p">(</span><span class="nv">$column</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>We need to be careful with sticky keys on the keyboard, because I had an annoying debug session to figure out why I don’t 
  get the right result. The reason was, I used <code class="language-plaintext highlighter-rouge">array_slice()</code> and not <code class="language-plaintext highlighter-rouge">array_splice()</code>. Even with a typo the code was valid
  but it gave an absolute wrong answer for the task.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[Christmas town is a big factory with a big warehouse. And in this warehouse the elves need to organize crates with the world-famous `CrateMover 9001`]]></summary></entry><entry><title type="html">Advent of Code - Day 4</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-4" rel="alternate" type="text/html" title="Advent of Code - Day 4" /><published>2022-12-04T12:00:00+00:00</published><updated>2022-12-05T15:02:39+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-4</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-4"><![CDATA[<p><a href="https://adventofcode.com/2022/day/4" rel="noopener" target="_blank">Today’s puzzle</a> in short: There are a
    bunch of character strings. Each letter has a number, and we need to group these strings by different criteria and sum
    the common characters’ numbers.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>Each line in the input data represents two number sequences in the following way:</p>
  <ul>
    <li>Two ranges of numbers (decimals separated by <code class="language-plaintext highlighter-rouge">-</code>), then a comma, then another range.</li>
    <li>The ranges of course contain the start and end number.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>The puzzle is simple:</p>
  <ul>
    <li>The elves work in sections.</li>
    <li>Each section has an ID number.</li>
    <li>Each elf work in a range of sections.</li>
    <li>The elves work in pairs.</li>
  </ul>
  <p>Or task is to find overlapping (concurrency, redundancy) of the section ranges.</p>
  <h3 id="part-one">Part One</h3>
  <p>In the first part of the puzzle, we need to identify and count the fully overlapping ranges.</p>
  <p>With PHP, it’s an easy task. We have built-in function to create a range of numbers as arrays, then just simply compare
    these arrays.</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$fullyContained</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$pairRanges</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^(?P&lt;E1from&gt;\d+)\-(?P&lt;E1to&gt;\d+),(?P&lt;E2from&gt;\d+)\-(?P&lt;E2to&gt;\d+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$pairRanges</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$elf1Range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E1from'</span><span class="p">],</span> <span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E1to'</span><span class="p">]);</span>
            <span class="nv">$elf2Range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E2from'</span><span class="p">],</span> <span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E2to'</span><span class="p">]);</span>

            <span class="k">if</span> <span class="p">(</span>
                <span class="nb">count</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$elf1Range</span><span class="p">,</span> <span class="nv">$elf2Range</span><span class="p">))</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span>
                <span class="nb">count</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$elf2Range</span><span class="p">,</span> <span class="nv">$elf1Range</span><span class="p">))</span> <span class="o">===</span> <span class="mi">0</span>
            <span class="p">)</span> <span class="p">{</span>
                <span class="nv">$fullyContained</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">echo</span> <span class="nv">$fullyContained</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Just for fun, I used a regular expression to split the line of string into four numbers. I LOVE regular expressions by the way!</p>
<p>So when we create the ranges with the <code class="language-plaintext highlighter-rouge">range()</code> function, we need to check how different they are. The <code class="language-plaintext highlighter-rouge">array_diff()</code>
  function is just perfect for this. It checks the first argument array against the second array and returns any element
  that is present only in the first array, but not in the other. Therefore, to find out whether a range of numbers is fully
  contained in the other one, we should get back an empty array.</p>
<p>We need to do this check for the other range too, because we can’t be sure, that only the first range can be a subset.</p>
<h3 id="part-two">Part two</h3>
<p>This part is almost the same. Here we need to count also the partially overlapping ranges. How to do that? The same way, 
  the only difference is now don’t look for empty result, but a result that has fewer elements than the subject array.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$partiallyOrFullyContained</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$pairRanges</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^(?P&lt;E1from&gt;\d+)\-(?P&lt;E1to&gt;\d+),(?P&lt;E2from&gt;\d+)\-(?P&lt;E2to&gt;\d+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$pairRanges</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$elf1Range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E1from'</span><span class="p">],</span> <span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E1to'</span><span class="p">]);</span>
            <span class="nv">$elf2Range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E2from'</span><span class="p">],</span> <span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E2to'</span><span class="p">]);</span>

            <span class="k">if</span> <span class="p">(</span>
                <span class="nb">count</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$elf1Range</span><span class="p">,</span> <span class="nv">$elf2Range</span><span class="p">))</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$elf1Range</span><span class="p">)</span> <span class="o">||</span>
                <span class="nb">count</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$elf2Range</span><span class="p">,</span> <span class="nv">$elf1Range</span><span class="p">))</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$elf2Range</span><span class="p">)</span>
            <span class="p">)</span> <span class="p">{</span>
                <span class="nv">$partiallyOrFullyContained</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">echo</span> <span class="nv">$partiallyOrFullyContained</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[Who like to clean the house when it was already cleaned up. Today we go the lazy way: we need to find out how to reduce redundant work.]]></summary></entry><entry><title type="html">Advent of Code - Day 3</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-3" rel="alternate" type="text/html" title="Advent of Code - Day 3" /><published>2022-12-03T10:00:00+00:00</published><updated>2022-12-05T10:28:51+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-3</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-3"><![CDATA[<p><a href="https://adventofcode.com/2022/day/3" rel="noopener" target="_blank">Today’s puzzle</a> in short: There are a
    bunch of character strings. Each letter has a number, and we need to group these strings by different criteria and sum
    the common characters’ numbers.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>The guys didn’t go crazy with this input for the first sight.</p>
  <ul>
    <li>Every line contains “random” characters from the English alphabet.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <ul>
    <li>Each character has a priority number:
      <ul>
        <li>the lowercase characters (from <code class="language-plaintext highlighter-rouge">a</code> to <code class="language-plaintext highlighter-rouge">z</code>) have priorities 1 through 26.</li>
        <li>the uppercase characters (from <code class="language-plaintext highlighter-rouge">A</code> to <code class="language-plaintext highlighter-rouge">Z</code>) have priorities 27 through 52.</li>
      </ul>
    </li>
    <li>We have to deal with groups of strings, and the character that is common in every string within a group gives the groups
      priority.</li>
    <li>We have to count all the groups’ priorities.</li>
  </ul>
  <h3 id="part-one">Part one</h3>
  <p>In the first task we have to split every line of string into two equal parts, and they will form a group.</p>
  <p>The first thing we need to realize here is the priority numbers are not the same way added to the characters as they
    present in the ASCII table. Because the character codes are the following:</p>
  <ul>
    <li>Characters from <code class="language-plaintext highlighter-rouge">A</code> trough <code class="language-plaintext highlighter-rouge">Z</code> are between <code class="language-plaintext highlighter-rouge">65</code> and <code class="language-plaintext highlighter-rouge">90</code>.</li>
    <li>Characters from <code class="language-plaintext highlighter-rouge">a</code> trough <code class="language-plaintext highlighter-rouge">z</code> are between <code class="language-plaintext highlighter-rouge">97</code> and <code class="language-plaintext highlighter-rouge">122</code>.</li>
  </ul>
  <p>In PHP, you can easily get this value from the character set’s mapping table with the 
    <a href="https://www.php.net/manual/en/function.ord.php" rel="noopener" target="_blank">ord()</a> function.</p>
  <p>The second thing is - like in most programming languages - the string are not really equal to an array of characters, so
    we need to convert each string to arrays of characters.</p>
  <p>So the code will be like this:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">const</span> <span class="no">PRIORITY_DIFF_LOWERCASE</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">97</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">const</span> <span class="no">PRIORITY_DIFF_UPPERCASE</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">65</span> <span class="o">+</span> <span class="mi">27</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$characters</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$compartment1</span><span class="p">,</span> <span class="nv">$compartment2</span><span class="p">]</span> <span class="o">=</span> <span class="nb">array_chunk</span><span class="p">(</span><span class="nv">$characters</span><span class="p">,</span> <span class="nb">floor</span><span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$characters</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
        <span class="nv">$commonItem</span> <span class="o">=</span> <span class="nb">current</span><span class="p">(</span><span class="nb">array_unique</span><span class="p">(</span><span class="nb">array_intersect</span><span class="p">(</span><span class="nv">$compartment1</span><span class="p">,</span> <span class="nv">$compartment2</span><span class="p">)));</span>
        <span class="nv">$priorityDiff</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="nv">$commonItem</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span>
            <span class="o">?</span> <span class="no">PRIORITY_DIFF_LOWERCASE</span>
            <span class="o">:</span> <span class="no">PRIORITY_DIFF_UPPERCASE</span><span class="p">;</span>

        <span class="nv">$sum</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$commonItem</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$priorityDiff</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">echo</span> <span class="nv">$sum</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see the big “trick” here is we use the character code as a starting pont and with a simple addition (subtraction),
  we get the right priority number without having to store them in an array. And as I mentioned earlier, the best way to 
  solve this puzzle to convert the strings into arrays of characters (doing it with the <code class="language-plaintext highlighter-rouge">str_split()</code>), and then with the
  <code class="language-plaintext highlighter-rouge">array_intersect()</code> we can easily get all the common elements of the arrays.</p>
<p>Since we know that the input data has been delivered with care, we don’t need to be super strict with checks:</p>
<ul>
  <li>We assume that each line has an even number of characters, so we can split with no issue.</li>
  <li>We assume that grouping will result one and only one common character, so we get the right result when we pick the 
    first item from the returning array of the <code class="language-plaintext highlighter-rouge">array_intersect()</code> function.</li>
  <li>We assume there are no tricks with “out of range” (like random UTF-8) characters.</li>
</ul>
<h3 id="part-two">Part two</h3>
<p>In this task the only thing changed is the way we make the groups. Instead of splitting each row, now we collect 3 rows
  into a group. Then the rest of the logic is more-or-less the same:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$backpacks</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">const</span> <span class="no">PRIORITY_DIFF_LOWERCASE</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">97</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">const</span> <span class="no">PRIORITY_DIFF_UPPERCASE</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">65</span> <span class="o">+</span> <span class="mi">27</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$backpacks</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$backpacks</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$commonItem</span> <span class="o">=</span> <span class="nb">current</span><span class="p">(</span><span class="nb">array_unique</span><span class="p">(</span><span class="nb">array_intersect</span><span class="p">(</span><span class="nv">$backpacks</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nv">$backpacks</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nv">$backpacks</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
        <span class="nv">$priorityDiff</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="nv">$commonItem</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span>
            <span class="o">?</span> <span class="no">PRIORITY_DIFF_LOWERCASE</span>
            <span class="o">:</span> <span class="no">PRIORITY_DIFF_UPPERCASE</span><span class="p">;</span>

        <span class="nv">$sum</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$commonItem</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$priorityDiff</span><span class="p">);</span>
        <span class="nv">$backpacks</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">echo</span> <span class="nv">$sum</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[A nice finger practice to count characters.]]></summary></entry><entry><title type="html">Advent of Code - Day 2</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-2" rel="alternate" type="text/html" title="Advent of Code - Day 2" /><published>2022-12-02T06:00:00+00:00</published><updated>2022-12-05T09:57:23+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-2</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-2"><![CDATA[<p><a href="https://adventofcode.com/2022/day/2" rel="noopener" target="_blank">Today’s puzzle</a> in short: It’s the good
    old <code class="language-plaintext highlighter-rouge">Stone - Paper - Scissors</code> game.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>The input data today is simple:</p>
  <ul>
    <li>Every row contains two characters separated by a space.</li>
    <li>The first character is either <code class="language-plaintext highlighter-rouge">A</code>, <code class="language-plaintext highlighter-rouge">B</code> or <code class="language-plaintext highlighter-rouge">C</code>.</li>
    <li>The second character is either <code class="language-plaintext highlighter-rouge">X</code>, <code class="language-plaintext highlighter-rouge">Y</code> or <code class="language-plaintext highlighter-rouge">Z</code>.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">A</code> represents player 1’s decision: the <code class="language-plaintext highlighter-rouge">Stone</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">B</code> represents player 1’s decision: the <code class="language-plaintext highlighter-rouge">Paper</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">C</code> represents player 1’s decision: the <code class="language-plaintext highlighter-rouge">Scissors</code>.</li>
    <li>The <code class="language-plaintext highlighter-rouge">Stone</code> is worth <code class="language-plaintext highlighter-rouge">1</code> point.</li>
    <li>The <code class="language-plaintext highlighter-rouge">Paper</code> is worth <code class="language-plaintext highlighter-rouge">2</code> points.</li>
    <li>The <code class="language-plaintext highlighter-rouge">Scissors</code> is worth <code class="language-plaintext highlighter-rouge">3</code> points.</li>
    <li>If player 1 wins, that’s <code class="language-plaintext highlighter-rouge">0</code> point.</li>
    <li>If it’s a draw, that’s <code class="language-plaintext highlighter-rouge">3</code> points.</li>
    <li>If player 2 wins, that’s <code class="language-plaintext highlighter-rouge">6</code> points.</li>
  </ul>
  <h3 id="part-one">Part one</h3>
  <p>The second character in this part also represents decisions:</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">X</code> represents player 2’s decision: the <code class="language-plaintext highlighter-rouge">Stone</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">Y</code> represents player 2’s decision: the <code class="language-plaintext highlighter-rouge">Paper</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">Z</code> represents player 2’s decision: the <code class="language-plaintext highlighter-rouge">Scissors</code>.</li>
  </ul>
  <p>Task: how much point will player 2 get after playing all rounds?</p>
  <h4 id="the-code">The code</h4>
  <p>Following the rule I set up yesterday, I think in the most simple solution. So we have two players, six letters with three 
    points assigned and also some points regarding the result of the duel. This will cause a bit of hell with the variables,
    so it’s better to define constants. Also need to make a 3x3 matrix for the game rules:</p>
  <ul>
    <li>Stone beats scissors</li>
    <li>Scissors beat paper</li>
    <li>Paper beats stone</li>
  </ul>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="k">const</span> <span class="no">ROCK_1</span> <span class="o">=</span> <span class="s1">'A'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">PAPER_1</span> <span class="o">=</span> <span class="s1">'B'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">SCISSORS_1</span> <span class="o">=</span> <span class="s1">'C'</span><span class="p">;</span>

<span class="k">const</span> <span class="no">ROCK_2</span> <span class="o">=</span> <span class="s1">'X'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">PAPER_2</span> <span class="o">=</span> <span class="s1">'Y'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">SCISSORS_2</span> <span class="o">=</span> <span class="s1">'Z'</span><span class="p">;</span>

<span class="k">const</span> <span class="no">P1_WINS</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">const</span> <span class="no">P2_WINS</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
<span class="k">const</span> <span class="no">DRAW</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>

<span class="nv">$decisionScore</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">ROCK_2</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
    <span class="no">PAPER_2</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
    <span class="no">SCISSORS_2</span> <span class="o">=&gt;</span> <span class="mi">3</span>
<span class="p">];</span>

<span class="nv">$winningMatrix</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">ROCK_1</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">ROCK_2</span> <span class="o">=&gt;</span> <span class="no">DRAW</span><span class="p">,</span>
        <span class="no">PAPER_2</span> <span class="o">=&gt;</span> <span class="no">P2_WINS</span><span class="p">,</span>
        <span class="no">SCISSORS_2</span> <span class="o">=&gt;</span> <span class="no">P1_WINS</span>
    <span class="p">],</span>
    <span class="no">PAPER_1</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">ROCK_2</span> <span class="o">=&gt;</span> <span class="no">P1_WINS</span><span class="p">,</span>
        <span class="no">PAPER_2</span> <span class="o">=&gt;</span> <span class="no">DRAW</span><span class="p">,</span>
        <span class="no">SCISSORS_2</span> <span class="o">=&gt;</span> <span class="no">P2_WINS</span>
    <span class="p">],</span>
    <span class="no">SCISSORS_1</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">ROCK_2</span> <span class="o">=&gt;</span> <span class="no">P2_WINS</span><span class="p">,</span>
        <span class="no">PAPER_2</span> <span class="o">=&gt;</span> <span class="no">P1_WINS</span><span class="p">,</span>
        <span class="no">SCISSORS_2</span> <span class="o">=&gt;</span> <span class="no">DRAW</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>You may have noticed, that the <code class="language-plaintext highlighter-rouge">$decisionScore</code> contains only the player 2’s decisions. It’s because we don’t care about player 1’s 
  score in the end.</p>
<p>Now let’s think about the logic. Go line-by-line, split up the string into the two players’ decisions, and simply add
  together the decision score and the score given by the winning matrix.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$player_2_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$player_1_decision</span><span class="p">,</span> <span class="nv">$player_2_decision</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$player_2_score</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$winningMatrix</span><span class="p">[</span><span class="nv">$player_1_decision</span><span class="p">][</span><span class="nv">$player_2_decision</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$decisionScore</span><span class="p">[</span><span class="nv">$player_2_decision</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$player_2_score</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>The second character in part two represents the strategy that player 2 should follow:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">X</code> to loose the round</li>
  <li><code class="language-plaintext highlighter-rouge">Y</code> to make draw</li>
  <li><code class="language-plaintext highlighter-rouge">Z</code> to win the round</li>
</ul>
<p>Task: how much point will player 2 get after playing all rounds?</p>
<h4 id="the-code-1">The code</h4>
<p>For this version we have to revert our thinking a bit. The winning matrix will become a decision matrix, and with given
  strategy we can easily identify the right decision. The constants will now look as follows:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">const</span> <span class="no">ROCK</span> <span class="o">=</span> <span class="s1">'A'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">PAPER</span> <span class="o">=</span> <span class="s1">'B'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">SCISSORS</span> <span class="o">=</span> <span class="s1">'C'</span><span class="p">;</span>

<span class="k">const</span> <span class="no">P1_SHOULD_WIN</span> <span class="o">=</span> <span class="s1">'X'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">END_DRAW</span> <span class="o">=</span> <span class="s1">'Y'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">P2_SHOULD_WIN</span> <span class="o">=</span> <span class="s1">'Z'</span><span class="p">;</span>

<span class="nv">$decisionScore</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">ROCK</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
    <span class="no">PAPER</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
    <span class="no">SCISSORS</span> <span class="o">=&gt;</span> <span class="mi">3</span>
<span class="p">];</span>

<span class="nv">$duelResult</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">P1_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
    <span class="no">P2_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span>
    <span class="no">END_DRAW</span> <span class="o">=&gt;</span> <span class="mi">3</span>
<span class="p">];</span>

<span class="nv">$decisionMatrix</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">ROCK</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">P1_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">SCISSORS</span><span class="p">,</span>
        <span class="no">P2_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">PAPER</span><span class="p">,</span>
        <span class="no">END_DRAW</span> <span class="o">=&gt;</span> <span class="no">ROCK</span>
    <span class="p">],</span>
    <span class="no">PAPER</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">P1_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">ROCK</span><span class="p">,</span>
        <span class="no">P2_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">SCISSORS</span><span class="p">,</span>
        <span class="no">END_DRAW</span> <span class="o">=&gt;</span> <span class="no">PAPER</span>
    <span class="p">],</span>
    <span class="no">SCISSORS</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">P1_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">PAPER</span><span class="p">,</span>
        <span class="no">P2_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">ROCK</span><span class="p">,</span>
        <span class="no">END_DRAW</span> <span class="o">=&gt;</span> <span class="no">SCISSORS</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>We have one extra array compared to the previous version, and another became much simpler. The logic will be the following:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$player_2_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$player_1_decision</span><span class="p">,</span> <span class="nv">$player_2_strategy</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$player_2_decision</span> <span class="o">=</span> <span class="nv">$decisionMatrix</span><span class="p">[</span><span class="nv">$player_1_decision</span><span class="p">][</span><span class="nv">$player_2_strategy</span><span class="p">];</span>
        <span class="nv">$player_2_score</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$duelResult</span><span class="p">[</span><span class="nv">$player_2_strategy</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$decisionScore</span><span class="p">[</span><span class="nv">$player_2_decision</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$player_2_score</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[A classic game I used to play a lot with my son.]]></summary></entry><entry><title type="html">Advent of Code - Day 1</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-1" rel="alternate" type="text/html" title="Advent of Code - Day 1" /><published>2022-12-01T15:00:00+00:00</published><updated>2022-12-02T11:24:08+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-1</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-1"><![CDATA[<p><a href="https://adventofcode.com/2022/day/1" rel="noopener" target="_blank">Today’s puzzle</a> in short: It’s a 
    heart-warming story about elves and their journey. To be able to travel, they need food and calories. Every elf writes a 
    note about the amount of food (calories) they take in their bags.</p>
  <h3 id="technical-specification">Technical specification</h3>
  <p>First of all, we need to read between the lines, and pile off all the fairytale from the pure specification.</p>
  <p>We will get the input data:</p>
  <ul>
    <li>every line may contain a number</li>
    <li>every line ends with a new line character (obviously)</li>
    <li>the numbers a grouped</li>
    <li>every group separated with one empty line</li>
    <li>the last row is also an empty line</li>
  </ul>
  <h3 id="part-one">Part one</h3>
  <p>The task: summarize the numbers by the groups and return with the highest number. It’s that simple.</p>
  <h4 id="the-code">The code</h4>
  <p>The first step is to save the puzzle input into a file: <code class="language-plaintext highlighter-rouge">input.txt</code>. Then let’s think about the most simple solution:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$actualCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$maxCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$maxCalorie</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$actualCalorie</span><span class="p">,</span> <span class="nv">$maxCalorie</span><span class="p">);</span>
            <span class="nv">$actualCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$actualCalorie</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$line</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$maxCalorie</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<ul>
  <li>initialize the <code class="language-plaintext highlighter-rouge">$actualCalorie</code> and the <code class="language-plaintext highlighter-rouge">$maxCalorie</code> as zero</li>
  <li>read the file line-by-line:
    <ul>
      <li>if not empty line:
        <ul>
          <li>convert the data into a number</li>
          <li>add this number to a puffer variable <code class="language-plaintext highlighter-rouge">$actualCalorie</code></li>
        </ul>
      </li>
      <li>if the line is empty:
        <ul>
          <li>check if the <code class="language-plaintext highlighter-rouge">$actualCalorie</code> if higher than the <code class="language-plaintext highlighter-rouge">$maxCalorie</code></li>
          <li>reset <code class="language-plaintext highlighter-rouge">$actualCalorie</code></li>
          <li>skip to next line</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>print the <code class="language-plaintext highlighter-rouge">$maxCalorie</code></li>
</ul>
<h3 id="part-two">Part two</h3>
<p>The input is the same, but we need to get the sum of the top three groups.</p>
<h4 id="the-code-1">The code</h4>
<p>Instead of saving the <code class="language-plaintext highlighter-rouge">$maxCalorie</code> all the time, we need to save all the groups, sort the array in descending order, and 
  add together the first three element.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$actualCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$calories</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$calories</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$actualCalorie</span><span class="p">;</span>
            <span class="nv">$actualCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$actualCalorie</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$line</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="nb">rsort</span><span class="p">(</span><span class="nv">$calories</span><span class="p">);</span>

<span class="k">echo</span> <span class="p">(</span><span class="nv">$calories</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$calories</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$calories</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>I could go into a more secure and much prettier code, but I didn’t want to, because:</p>
<ul>
  <li>the result is the important, not the code</li>
  <li>the input is known, so I could skip some array index availability checks</li>
</ul>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[It&apos;s December again, the time of the Advent Calendars. Eric Wastl made the Advent of Code which is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language.]]></summary></entry><entry><title type="html">Tips &amp;amp; Tricks to make Jekyll do what you need</title><link href="http://0.0.0.0:4000/devenv/tips-and-tricks-for-jekyll" rel="alternate" type="text/html" title="Tips &amp;amp; Tricks to make Jekyll do what you need" /><published>2022-11-18T14:10:00+00:00</published><updated>2022-11-18T14:12:48+00:00</updated><id>http://0.0.0.0:4000/devenv/tips-and-tricks-for-jekyll</id><content type="html" xml:base="http://0.0.0.0:4000/devenv/tips-and-tricks-for-jekyll"><![CDATA[<h3 id="what-is-jekyll">What is Jekyll?</h3>
  <p>Short answer: <a href="https://jekyllrb.com/Jekyll" rel="noopener" target="_blank">Jekyll</a> is a static site generator.</p>
  <p>Long answer: Jekyll is a static site generator that uses layouts and <a href="https://daringfireball.net/projects/markdown/syntax" rel="noopener" target="_blank">Markdown</a>
    to generate a static website. It has its own templating engine, named <a href="https://jekyllrb.com/docs/step-by-step/02-liquid/" rel="noopener" target="_blank">Liquid</a>. 
    If you know the Symfony’s <a href="https://twig.symfony.com/" rel="noopener" target="_blank">Twig</a> template engine, 
    you will find the Liquid very familiar. At least syntax-wise.</p>
  <h3 id="why-jekyll">Why Jekyll?</h3>
  <p>When I started to deal with static site generators, I didn’t know much of them. I asked my friends what they recommend, but
    almost everybody told a different tool as to be the best. …including the <em>“Write your own in PHP, dude!”</em> option.</p>
  <p>So I tried some of them, and I chose Jekyll because its template engine’s syntax similarity to Twig’s, which I know well.</p>
  <h3 id="tops-and-flops">Tops and Flops</h3>
  <p>The bright side of the story is, the Liquid is easy to learn, easy to understand and easy to use. Unless you keep yourself
    on the path that the documentation shows you.</p>
  <p>The dark side of the story begins as soon as you want something different, or a bit more.</p>
  <p>The Liquid has three main components:</p>
  <ul>
    <li>objects</li>
    <li>tags</li>
    <li>filters</li>
  </ul>
  <p>Liquid tags are not the same as on <a href="https://www.twitter.com" rel="noopener" target="_blank">Twitter</a>. These 
    are more like statements, functions, procedures. For example, the <code class="language-plaintext highlighter-rouge">{%if ...%}...{% endif %}</code> is a 
    <em>control flow tag</em>.</p>
  <p>Just to confuse you, it has Twitter-like tags too. And categories. Great.</p>
  <p>So, from these three components you can create many beautiful things, but sometimes it’s very painful to customize them.</p>
  <h3 id="challenges">Challenges</h3>
  <p>During the development of this blog, I faced some issues, and I had to be very creative to solve them. My problem now is
    I can’t really remember the order of the issues came up, so I can’t tell now which issues in which order lead me to the 
    current state of the setup. But I try to grab some details.</p>
  <h4 id="slug-vs-label">Slug vs Label</h4>
  <p>I had a private, more personal blog that I wrote in Hungarian. There we have special letters above the default <em>latin-1</em>
    character set. In a very short time I figured out that Jekyll was written by English-speaking programmers. Because - according
    to my decade-long experience - many English-speaking programmers just simply give a damn on the rest of the world, that 
    would like to speak, read and write in other than English. Sorry guys, that’s the truth.</p>
  <p>And in Jekyll, what you give for example for a post’s category name, it will be used for the URL too. And if you have 
    special characters you are screwed. For example the <code class="language-plaintext highlighter-rouge">category: 'csőlátás'</code> will be transformed into <code class="language-plaintext highlighter-rouge">/cslts</code>. Not good.
    Also even in English you can shoot yourself on the leg, when you need a short slug for a longer label:</p>
  <div class="language-liquid highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
    </td>
    <td class="rouge-code">
      <pre>category: 'Development environment'
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>For this the slug will be either <code class="language-plaintext highlighter-rouge">/development/environment/...</code> or <code class="language-plaintext highlighter-rouge">/development%20environment/...</code>, however a simple
  <code class="language-plaintext highlighter-rouge">/devenv/...</code> would be enough for the URL. And the same goes for the tags.</p>
<p>Of course there are <em>I18n</em> plugins for Jekyll, but what I tried, didn’t work very well.</p>
<p>What could I do? I tricked the system, with the system’s tools:</p>
<ul>
  <li>Every custom data you create in the posts’ <a href="https://jekyllrb.com/docs/step-by-step/03-front-matter/" rel="noopener" target="_blank">front matter</a>
    will be collected in the <code class="language-plaintext highlighter-rouge">post</code> variable.</li>
  <li>You can create custom data by capturing a printouts.</li>
  <li>You can create arrays by splitting up strings. Liquid even has some array-related filters.</li>
  <li>You can iterate through these arrays.</li>
</ul>
<p>So, if you keep adding multiple built-in/custom data consequently for all the posts, and you keep them in sync, you can 
  create two arrays, and the item index will be the connection between them. Example:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre>---
category: 'devenv'
categoryLabel: 'Development Environment'
---

Page content
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>then you can use the following:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>&lt;a href="<span class="p">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">category</span><span class="w"> </span><span class="p">}}</span>"&gt;<span class="p">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">categoryLabel</span><span class="w"> </span><span class="p">}}</span>&lt;/a&gt;
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Okay, you can say, this is easy, we just go through the <code class="language-plaintext highlighter-rouge">site.posts</code> array and print these values. Okay, but how you do it
  when you have more than one category and/or tags? How you pair them?</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre>
  </td>
  <td class="rouge-code">
    <pre>---
category: 'devenv'
categoryLabel: 'Development Environment'
tags:   [docker, wsl2, powerline-shell, phpstorm, windows]
tagLabels: ['Docker', 'WSL2', 'Powerline Shell', 'PHPStorm', 'Windows']
---

Page content
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Of course, you can do it, but you have to write all the damn iteration every place, where you want to use them. Wouldn’t
  be easier to pre-collect all the categories and tags and their labels and just use them?</p>
<h3 id="variables">Variables</h3>
<p>I introduced a new include file, called <code class="language-plaintext highlighter-rouge">variables.html</code>:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>variables.html<span class="w"> </span><span class="p">-%}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="categories">Categories</h4>
<p>Inside that file I made all my dirty tricks: collect all the posts’ categories and labels, concatenate them into one 
  string, and then split them back to arrays:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">categorySlugs</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">category</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">categorySlugs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">categorySlugs</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

<span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">categoryLabels</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">categoryLabel</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">categoryLabels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">categoryLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="tags">Tags</h4>
<p>We do the same for the tags:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">tags</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">join</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

<span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">tagLabels</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">tagLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">join</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagLabels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Rules to keep:</p>
<ul>
  <li>Never sort these arrays, otherwise the slugs and labels will be mixed up</li>
  <li>Always make sure that one slug doesn’t have multiple labels and vice-versa.</li>
</ul>
<h5 id="usage">Usage</h5>
<p>As I wrote before to connect the slug with the labels, the lists must be synchronized, then we can use the loop index to
  get the right label for the slug:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre>&lt;ul&gt;
<span class="p">{%-</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">tagSlug</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">-%}</span>
  &lt;li&gt;&lt;a href="tags/<span class="p">{{</span><span class="w"> </span><span class="nv">tagSlug</span><span class="w"> </span><span class="p">}}</span>"&gt;<span class="p">{{</span><span class="w"> </span><span class="nv">tagLabels</span><span class="p">[</span><span class="nb">forloop.index0</span><span class="p">]</span><span class="w"> </span><span class="p">}}</span>&lt;/a&gt;&lt;/li&gt;
<span class="p">{%-</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">-%}</span>
&lt;/ul&gt;

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>To get the actual serial number (index) of the loop, we can ask it from the <code class="language-plaintext highlighter-rouge">forloop</code> variable. If we use the <code class="language-plaintext highlighter-rouge">forloop.index</code>, 
  the counter will start from <code class="language-plaintext highlighter-rouge">1</code>. If we use the <code class="language-plaintext highlighter-rouge">forloop.index0</code>, the counter will start from <code class="language-plaintext highlighter-rouge">0</code>, and since we want to use
  it on another list, we need this one.</p>
<h4 id="dates">Dates</h4>
<p>For the archive, we have to deal with dates. And here we also have the same problem: we want to use simple dates for the 
  URL, but we want a more talkative version for the labels.</p>
<p>First we need all the posts’ dates in the right order. Luckily the posts are ordered by date.</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>For the archive I wanted to list posts on a monthly basis, so the URL slug should be <code class="language-plaintext highlighter-rouge">YYYY-MM</code> format:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">dateSlugs</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%Y-%m'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">dateSlugs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">dateSlugs</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>And for the labels we want to print the name of the month and then the year. I could use the <code class="language-plaintext highlighter-rouge">date: %B</code> filter to print
  the name of the month, but again it’s English only (well, good enough for this blog), and the I18n plugin is not good for 
  me. So I decided to add translations.</p>
<p>In Jekyll, we can refer to additional <code class="language-plaintext highlighter-rouge">.yml</code> configuration, that is placed in the <code class="language-plaintext highlighter-rouge">_data</code> folder. So I created two files:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">_data/en.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">_data/hu.yml</code></li>
</ul>
<p>In the file, we can create sections, subsections, values, value collections etc. For example, the <code class="language-plaintext highlighter-rouge">_data/hu.yml</code> looks 
  the following:</p>
<div class="language-yaml highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="na">months</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">.</span>
  <span class="pi">-</span> <span class="s">január</span>
  <span class="pi">-</span> <span class="s">február</span>
  <span class="pi">-</span> <span class="s">március</span>
  <span class="pi">-</span> <span class="s">április</span>
  <span class="pi">-</span> <span class="s">május</span>
  <span class="pi">-</span> <span class="s">június</span>
  <span class="pi">-</span> <span class="s">július</span>
  <span class="pi">-</span> <span class="s">augusztus</span>
  <span class="pi">-</span> <span class="s">szeptember</span>
  <span class="pi">-</span> <span class="s">október</span>
  <span class="pi">-</span> <span class="s">november</span>
  <span class="pi">-</span> <span class="s">december</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>You can notice I list the months names in Hungarian, but the first is a nonsense. The reason is, from the date formatter
  we can get the number of the month, which is in the range of 1 and 12. But this config will be presented as an array, and
  the arrays starts with the zero index.</p>
<p>So, now we have the translations, we can refer them with <code class="language-plaintext highlighter-rouge">{{ site.data.hu.months[5] }}</code>, or if we 
  defined the <code class="language-plaintext highlighter-rouge">lang</code> variable in the config, we can do <code class="language-plaintext highlighter-rouge">{{ site.data[site.lang].months[5] }}</code> too. 
  After this, creating labels is a simple task:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">dateLabels</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">m</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%-m'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">minus</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">data</span><span class="p">[</span><span class="nv">site</span><span class="p">.</span><span class="nv">lang</span><span class="p">].</span><span class="nv">months</span><span class="p">[</span><span class="nv">m</span><span class="p">]</span><span class="w"> </span><span class="p">}}</span>, <span class="p">{{</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%Y'</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>;<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">dateLabels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">dateLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">';'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="list-the-top-3-most-used-tags-and-display-their-usage-number">List the top 3 most used tags and display their usage number</h3>
<p>Another interesting solution was born here. To know what is the internal content of the <code class="language-plaintext highlighter-rouge">site.tags</code>, we call the help of
  the <code class="language-plaintext highlighter-rouge">debug</code> filter:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">tags</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">debug</span><span class="w"> </span><span class="p">}}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>… which will print something like:</p>
<div class="language-plaintext highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>{"docker"=&gt;[#], "js"=&gt;[#, #, #, #], "clean-code"=&gt;[#, #, #], "react"=&gt;[#, #, #], "webpack"=&gt;[#, #, #], "jekyll"=&gt;[#]}
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So the <code class="language-plaintext highlighter-rouge">key</code> in this object holds the slug, and the <code class="language-plaintext highlighter-rouge">value</code> is an array with some unknown data. What is important for us, 
  it’s countable. The more a tag is used, the larger its value-array is. From these information, we need to make a sorted list.</p>
<p>How to sort? Make the count to be a string, concatenate to the slug, and sort as text:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">counts_with_tags_string</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.tags</span><span class="w"> </span><span class="p">-%}{{</span><span class="w"> </span><span class="nv">tag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">size</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">prepend</span><span class="p">:</span><span class="s2">"000000"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">slice</span><span class="p">:</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="w"> </span><span class="p">}}</span>:<span class="p">{{</span><span class="w"> </span><span class="nv">tag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%-</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Let’s go one-by-one.</p>
<ul>
  <li>The <code class="language-plaintext highlighter-rouge">{{ tag[1] | size | prepend:"000000" | slice:-6,6 }}</code> gets the tag value-array’s size.</li>
  <li>By prepending a bunch of zeros in front of the number, converts it to string. So if we used a tag for example <strong>123</strong>
    times, then it will be <strong>000000123</strong>.</li>
  <li>We need to make every tag counter to be exactly the same length to be sortable, so
    we keep only the last 6 characters: <code class="language-plaintext highlighter-rouge">slice:-6,6</code>.</li>
  <li>Then we print a colon (<code class="language-plaintext highlighter-rouge">:</code>).</li>
  <li>Then we print the tag slug (<code class="language-plaintext highlighter-rouge">tag[0]</code>).</li>
  <li>And finally, unless it’s the last item in the iteration, we print a comma (<code class="language-plaintext highlighter-rouge">,</code>) as well.</li>
</ul>
<p>We need to be careful, the <code class="language-plaintext highlighter-rouge">capture</code> tag capture the whitespaces as well, so always double-check the result.</p>
<p>From the example above, with this capture we get the following string:</p>
<div class="language-plaintext highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>000001:docker,000004:js,000003:clean-code,000003:react,000003:webpack,000001:jekyll
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>To convert it back to array, and get the highest number first, we need to split this string by the comma, then sort and 
  reverse the result list:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">counts_with_tags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">counts_with_tags_string</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="s2">","</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">sort</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">reverse</span><span class="w"> </span><span class="p">-%}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Then we can use this list to match with our <code class="language-plaintext highlighter-rouge">tagSlugs</code> and <code class="language-plaintext highlighter-rouge">tagLabels</code> lists to print the top 3 most used tags:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre>
  </td>
  <td class="rouge-code">
    <pre>&lt;ul&gt;
<span class="p">{%-</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">count_with_tag</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">counts_with_tags</span><span class="w"> </span><span class="na">limit</span><span class="o">:</span><span class="mi">3</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">count_with_tag</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="s2">":"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">last</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">slugify</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagLabel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">count_with_tag</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="s2">":"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">first</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">plus</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">tagSlug</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">-%}</span>
        <span class="p">{%-</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nv">tagSlug</span><span class="w"> </span><span class="p">-%}</span>
            <span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagLabel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagLabels</span><span class="p">[</span><span class="nb">forloop.index0</span><span class="p">]</span><span class="w"> </span><span class="p">-%}</span>
            <span class="p">{%-</span><span class="w"> </span><span class="nt">break</span><span class="w"> </span><span class="p">-%}</span>
        <span class="p">{%-</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">-%}</span>
    &lt;li&gt;&lt;a href="/tags/<span class="p">{{</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="p">}}</span>/"&gt;<span class="p">{{</span><span class="w"> </span><span class="nv">tagLabel</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip</span><span class="w"> </span><span class="p">}}</span> &lt;sup&gt;<span class="p">{{</span><span class="w"> </span><span class="nv">count</span><span class="w"> </span><span class="p">}}</span>&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
<span class="p">{%-</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">-%}</span>
&lt;/ul&gt;    

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>What is going on here:</p>
<ul>
  <li>We go through this list and get only the first 3 items (<code class="language-plaintext highlighter-rouge">limit:3</code>).</li>
  <li>Get the tag’s slug by splitting up the actual element by the colon (<code class="language-plaintext highlighter-rouge">:</code>) and take the last part (<code class="language-plaintext highlighter-rouge">| last</code>).</li>
  <li>For safety purpose we assign the tag slug to the <code class="language-plaintext highlighter-rouge">tagLabel</code> as well.</li>
  <li>Get the tag’s count by splitting up the actual element by the colon (<code class="language-plaintext highlighter-rouge">:</code>) and take the first part (<code class="language-plaintext highlighter-rouge">| first</code>). We add 
    zero (<code class="language-plaintext highlighter-rouge">| plus 0</code>) to convert it back to number. So the <strong>000123</strong> will be <strong>123</strong> again.</li>
  <li>We go through our <code class="language-plaintext highlighter-rouge">tagSlugs</code> list we created earlier and match against the tag slug we currently have. When we find it
    we overwrite the <code class="language-plaintext highlighter-rouge">tagLabel</code> and quit this loop.</li>
  <li>Print the link with the slug, the label and the count.</li>
</ul>
<h3 id="pragmatically-stop-the-build-process">Pragmatically stop the build process</h3>
<p>In some special cases the tag slugs and tag labels are getting out of sync because of human error. To avoid publishing
  a site with wrong tag links and let Google to index them, I had to find a way to stop the build process with error.
  The solution is quite simple: we rely on the Jekyll’s behaviour, that it evaluates the “conditions” only when the control
  gets there, not sooner, and not when not used. So simply add a screwed up Liquid code, like an <code class="language-plaintext highlighter-rouge">include</code> with invalid characters:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagSlugSize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">size</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagLabelSize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">size</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">tagSlugSize</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="nv">tagLabelSize</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>./stopBuild.html<span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>…will result and error but only when the <code class="language-plaintext highlighter-rouge">tagSlugs</code> and <code class="language-plaintext highlighter-rouge">tagLabels</code> lists’ sizes are different:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre>Liquid Exception: Invalid syntax <span class="k">for </span>include tag. File contains invalid characters or sequences: <span class="s2">".
/stopBuild.html"</span> Valid syntax: <span class="o">{</span>% include file.ext <span class="nv">param</span><span class="o">=</span><span class="s1">'value'</span> <span class="nv">param2</span><span class="o">=</span><span class="s1">'value'</span> %<span class="o">}</span> <span class="k">in</span> /app/src/_layouts/default.html

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="conclusion">Conclusion</h3>
<p>If we keep ourselves to the Jekyll documentation, it’s pretty nice and tidy I think. But as soon as we want something a
  bit more, we have to use our imagination and do some calculations. Jekyll is not supposed to use like this. But it works!
  Be brave, think, do experiments, browse <a href="https://www.stackoverflow.com" rel="noopener" target="_blank">Stackoverflow</a>
  for solutions and you will expand the limits…</p>
]]></content><author><name>Gábor Iván</name></author><category term="devenv" /><category term="jekyll" /><category term="liquid" /><summary type="html"><![CDATA[The most simple websites are those have only static files. For a blog like this is perfect. But making everything static by default is difficult. You need a generator. And when you work with Jekyll, sometimes you meet Mr. Hide as well.]]></summary></entry><entry><title type="html">Refactoring the Dependency Injection Container</title><link href="http://0.0.0.0:4000/backend/refactoring-the-dependency-injection-container" rel="alternate" type="text/html" title="Refactoring the Dependency Injection Container" /><published>2022-11-11T15:10:00+00:00</published><updated>2022-12-01T16:00:06+00:00</updated><id>http://0.0.0.0:4000/backend/refactoring-the-dependency-injection-container</id><content type="html" xml:base="http://0.0.0.0:4000/backend/refactoring-the-dependency-injection-container"><![CDATA[<h3 id="tldr">TL;DR</h3>
  <p>If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
    <a href="https://github.com/Gixx/worstpractice-dependency-injection" target="_blank" rel="noopener">GitHub</a>.</p>
  <h3 id="valuation-of-the-original">Valuation of the original</h3>
  <p>Although my <abbr title="Do It Yourself Dependency Injection Container">DIY DIC</abbr> has it tops and lops, and according to the
    <a href="https://packagist.org/packages/gixx/worstpractice-dependency-injection/stats" rel="noopener" target="_blank">Packagist</a>,
    someone even dare to install it, there were many mistakes made.</p>
  <p><strong>First</strong>: leaving the configuration as an array. False statement <a href="https://worstpractice.dev/backend/diy-dependency-injection-container-2#choose-the-right-weapon" rel="noopener" target="_blank">made by me</a>:</p>
  <blockquote>
    <p>And when we think about it, in the end, deep inside all the parsers the whole thing will end up in an average associative 
      array or Iterable class. Then why should we waste our time on this?</p>
  </blockquote>
  <p><strong>Second</strong>: comes from the first actually: the type strictness became unmaintainable. I even had to add some ignores and
    exceptions to the <code class="language-plaintext highlighter-rouge">PHPStan</code>’s configuration, to pass all tests.</p>
  <p><strong>Third</strong>: closed the possibility to use other config parsers, so one can make their own (e.g.: XML, YAML, ini, etc.).</p>
  <h3 id="planning">Planning</h3>
  <p>I decided, when I refactor the code, I will do it right. So I aimed to rewrite everything in PHP 8.2. Today,
    as I’m writing this article, the PHP 8.2 is still not officially released, and I could use only the Release Candidate version.</p>
  <p>I assumed and accepted that some tools won’t work as expected as partial or full lack of PHP 8.2 support. I as right
    unfortunately. I had to give up using the <code class="language-plaintext highlighter-rouge">PHP CS</code>, the <code class="language-plaintext highlighter-rouge">CS Fixer</code>, and the 
    <a href="https://scrutinizer-ci.com/" rel="noopener" target="_blank">Scrutinizer</a>’s code quality checks. But the two
    most important, the <code class="language-plaintext highlighter-rouge">PHPUnit</code> and the <code class="language-plaintext highlighter-rouge">PHPStan</code> static analyser are still on duty, so I’m satisfied.</p>
  <p>I also decided to eliminate all the <code class="language-plaintext highlighter-rouge">PHPStan</code> exceptions I made, and go for full throttle on maximum level with the checks.</p>
  <h3 id="the-old-structure">The old structure</h3>
  <p>The original DIC (form now I will refer it as <code class="language-plaintext highlighter-rouge">v.1.0</code>) was only one simple class with altogether 430 rows of code and 
    comment. I think it was pretty neat and compact. But now, to avoid the multidimensional, mixed type array hell I made 
    there, I will need to go Kansas and jump deep into that goddamn rabbit hole.</p>
  <p>In <code class="language-plaintext highlighter-rouge">v.1.0</code> there were no structure. I used arrays everywhere for everything. These were the main “sub-containers”:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre>
    </td>
    <td class="rouge-code">
      <pre>    <span class="cd">/**
     * @var array The full raw configuration data
     */</span>
    <span class="k">private</span> <span class="kt">array</span> <span class="nv">$configuration</span><span class="p">;</span>
    <span class="cd">/**
     * @var array The configuration data with resolved inherited configuration.
     */</span>
    <span class="k">private</span> <span class="kt">array</span> <span class="nv">$serviceConfiguration</span><span class="p">;</span>
    <span class="cd">/**
     * @var array The instantiation-ready library with all necessary data.
     */</span>
    <span class="k">private</span> <span class="kt">array</span> <span class="nv">$serviceLibrary</span><span class="p">;</span>
    <span class="cd">/**
     * @var array The instantiated services.
     */</span>
    <span class="k">private</span> <span class="kt">array</span> <span class="nv">$serviceContainer</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>To understand why I needed them, first let’s analyse what one single service configuration can be built from:</p>
<h4 id="id">ID</h4>
<p>The service identifier. It’s the first level key in the configuration array, therefore it must be unique. Can be a real 
  class name, or just an alias.</p>
<h4 id="class">Class</h4>
<p>This record stores the class name. It’s optional with conditions: either the service identifier points to a real class, 
  or the <code class="language-plaintext highlighter-rouge">inherits</code> presents and points to another service in the configuration.</p>
<h4 id="inherits">Inherits</h4>
<p>A not so real pointer. It stores the identifier of another service in the configuration. This record is optional.</p>
<h4 id="arguments">Arguments</h4>
<p>A mixed type array that stores the parameters for the service constructor. If any of the parameters is not a pointer to 
  another service, the array must be associative and the given parameter must be indexed with string literals. Numeric indexes
  will be treated as service pointers to inject. This parameter is optional with conditions: either the service does not
  require explicit parameters (empty or all has defaults), or the <code class="language-plaintext highlighter-rouge">inherits</code> presents, and the “parent” class’ settings will
  be used.</p>
<h4 id="calls">Calls</h4>
<p>A multidimensional, mixed typed array. Every (1st level) item in this array is an array too. Those (2nd level) arrays
  must have exactly two items:</p>
<ul>
  <li>a string literal that holds the public and callable method name of the actual service</li>
  <li>a list of the arguments, built the same way as the class constructor’s arguments previously.</li>
</ul>
<h4 id="shared">Shared</h4>
<p>A boolean data, that defines whether the class must be singleton or should be instantiated every time we retrieve it from
  the container.</p>
<h3 id="the-new-structure">The new structure</h3>
<p>Now we understand the structure of the configuration, that makes a bit more sense for those class properties:</p>
<ul>
  <li>One to store the raw config.</li>
  <li>One that has all the inheritance solved.</li>
  <li>One with all data set for the instantiate process.</li>
  <li>One to store the service instances.</li>
</ul>
<p>To make this whole mess type-safe, we need to find a way to define all units for the configuration. 
  Just a fast thinking to write our the grocery list:</p>
<ul>
  <li><strong>Argument item</strong> - One particular parameter. It stores the index (position), the type (string, integer, boolean etc.), 
    the value and whether it’s a service reference or not.</li>
  <li><strong>Argument collection</strong> - This stores all the <strong>Argument items</strong>, that will be passed to the class constructor.</li>
  <li><strong>Callable item</strong> - The method name and the method’s parameter list (which is an Argument collection).</li>
  <li><strong>Callable collection</strong> - This stores all the <strong>Callable items</strong>, we want to call after the service is initialized.</li>
  <li><strong>Config item</strong> - This is the 1:1 typed class representation of the config data. It stores the identifier (<code class="language-plaintext highlighter-rouge">ID</code>), the 
    service class name (<code class="language-plaintext highlighter-rouge">Class</code>), the inheritance reference (<code class="language-plaintext highlighter-rouge">Inherits</code>), the class’ constructor arguments (<code class="language-plaintext highlighter-rouge">Arguments</code>, 
    which is an Argument collection), the methods that will be called (<code class="language-plaintext highlighter-rouge">Calls</code>, which is a Callable collection), and the 
    flag to be singleton or not (<code class="language-plaintext highlighter-rouge">Shared</code>). Besides the <code class="language-plaintext highlighter-rouge">ID</code> all the other properties can be NULL.</li>
  <li><strong>Config model</strong> - This stores all the <strong>Config items</strong>.</li>
  <li><strong>Config parser</strong> - This will get a config data from any kind of input (specified by the parser class) and creates the
    <strong>Config items</strong> and stores them in the <strong>Config model</strong>.</li>
  <li><strong>Library and Books</strong> - A library store books. The <strong>Books</strong> are in this case the ready-to-instantiate versions of the 
    <strong>Config Items</strong>. The <strong>Library</strong> should browse the catalog (<strong>Config model</strong>), solve the inheritance chain (if there’s, 
    any), and create the <strong>Books</strong>.</li>
  <li><strong>Container</strong> - that instantiates the services by:
    <ul>
      <li>Get the right service’s information (<strong>Book</strong>) from the <strong>Library</strong>.</li>
      <li>Resolve the argument list references (get the other service’s instance).</li>
      <li>Create the service instance by passing (injecting) the constructor parameters.</li>
      <li>Call the defined method(s) with the defined parameters (with resolved argument list references) after the initialization.</li>
      <li>Store (cache) the initialized instance in an internal list for later use.</li>
    </ul>
  </li>
</ul>
<h3 id="challenges">Challenges</h3>
<p>The <code class="language-plaintext highlighter-rouge">ArgumentItem</code>, the <code class="language-plaintext highlighter-rouge">CallableItem</code>, the <code class="language-plaintext highlighter-rouge">ConfigItem</code> and the <code class="language-plaintext highlighter-rouge">ServiceBook</code> classes are super simple, strictly typed, 
  readonly classes (PHP 8.2!). Okay, the <code class="language-plaintext highlighter-rouge">ConfigItem</code> has mostly nullable properties, but this is by purpose: the <strong>Config items</strong>
  can store partial data, the <strong>Books</strong> are required to store all necessary data. And <strong>Library</strong>’s duty is to provide all 
  these data either by resolving the inheritance or by setting the defaults. For example the <strong>Shared</strong> flag is by default 
  <code class="language-plaintext highlighter-rouge">TRUE</code> when not presents.</p>
<p>Just to show some example, here is the <code class="language-plaintext highlighter-rouge">ConfigItem</code>:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">WorstPractice\Component\DependencyInjection\ConfigModel</span><span class="p">;</span>

<span class="n">readonly</span> <span class="kd">class</span> <span class="nc">ConfigItem</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">public</span> <span class="n">string</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">public</span> <span class="kt">?string</span> <span class="nv">$class</span><span class="p">,</span>
        <span class="kt">public</span> <span class="kt">?string</span> <span class="nv">$inherits</span><span class="p">,</span>
        <span class="kt">public</span> <span class="kt">?ArgumentItemCollection</span> <span class="nv">$arguments</span><span class="p">,</span>
        <span class="kt">public</span> <span class="kt">?CallableItemCollection</span> <span class="nv">$calls</span><span class="p">,</span>
        <span class="kt">public</span> <span class="kt">?bool</span> <span class="nv">$isShared</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The <code class="language-plaintext highlighter-rouge">ArgumentItemCollection</code>, the <code class="language-plaintext highlighter-rouge">CallableItemCollection</code> and the <code class="language-plaintext highlighter-rouge">ConfigModel</code> classes are almost as simple as the 
  “Items” were. Here I chose to store the items into an internal, “single level, every item has the same type”-kind of array 
  (let’s call it <code class="language-plaintext highlighter-rouge">list</code>). Public and readonly in this case wouldn’t be good, because we need to add the items one-by-one and 
  not once through the constructor. But to still make possible to be used in a <code class="language-plaintext highlighter-rouge">foreach</code>, they implement the <code class="language-plaintext highlighter-rouge">IteratorAggregate</code>
  interface.</p>
<p>One typical case is the <code class="language-plaintext highlighter-rouge">ArgumentItemCollection</code>:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">WorstPractice\Component\DependencyInjection\ConfigModel</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">IteratorAggregate</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Traversable</span><span class="p">;</span>

<span class="cd">/**
 * @implements IteratorAggregate&lt;int, ArgumentItem&gt;
 */</span>
<span class="kd">class</span> <span class="nc">ArgumentItemCollection</span> <span class="kd">implements</span> <span class="nc">IteratorAggregate</span>
<span class="p">{</span>
    <span class="cd">/** @var array&lt;int, ArgumentItem&gt; $items */</span>
    <span class="k">private</span> <span class="kt">array</span> <span class="nv">$items</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">ArgumentItem</span> <span class="nv">$item</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">items</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$item</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">final</span> <span class="k">public</span> <span class="k">function</span> <span class="n">getIterator</span><span class="p">():</span> <span class="kt">Traversable</span>
    <span class="p">{</span>
        <span class="k">yield</span> <span class="n">from</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">items</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The <code class="language-plaintext highlighter-rouge">ServiceLibrary</code> in <code class="language-plaintext highlighter-rouge">v.1.0</code> was basically part of the <code class="language-plaintext highlighter-rouge">Container</code>, now I separated these two to be more readable and also 
  simplify the responsibilities. According to the <strong>Single responsibility principal</strong>, a class should have one and only one 
  reason to change, meaning that a class should have only one job. Okay, maybe I failed on this, but I can say the following:</p>
<ul>
  <li>The library’s responsibility is to prepare all the data for the container. This includes calling the parser, resolve the
    inheritance chains etc.</li>
  <li>The container’s responsibility is to create instances from the data that the library provided to it.</li>
</ul>
<p>It’s all just a  matter of perspective, isn’t it?</p>
<h4 id="the-biggest-challenge">The biggest challenge</h4>
<p>The biggest challenge was to solve, how can I convert a multi-mixed-typeless array to a strictly typed structure of objects.
  Creating the strictly typed class structure was relatively easy. To fill them with data was the problem. The <code class="language-plaintext highlighter-rouge">PHPStan</code>
  always complained about the missing types on the Iterables, such like:</p>
<div class="language-plaintext highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre>
  </td>
  <td class="rouge-code">
    <pre>------ ------------------------------------------------------------------------------------------------- 
 Line   WorstPractice/Component/DependencyInjection/ConfigModel/CallableItemCollection.php
------ ------------------------------------------------------------------------------------------------- 
 27     Property WorstPractice\Component\DependencyInjection\ConfigModel\CallableItemCollection::$items  
        type has no value type specified in iterable type array.
        💡 See: https://phpstan.org/blog/solving-phpstan-no-value-type-specified-in-iterable-type        
------ ------------------------------------------------------------------------------------------------- 
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Tried to solve it with <a href="https://phpstan.org/writing-php-code/phpdoc-types#iterables" rel="noopener" target="_blank">PHPDoc Types</a>
  and PHP Attributes (such as <a href="https://blog.jetbrains.com/phpstorm/2020/10/phpstorm-2020-3-eap-4/#ArrayShape" rel="noopener" target="_blank">ArrayShape</a>), 
  but pre-defining the service’s (1st level) call list’s (2nd level) method’s (3rd level) parameter list (4th level),
  where any parameter can be an array too, became way too complicated. Also in the config, the call list itself is a mixed
  array, because the zero indexed element is the method name is string, and the first indexed element is the attribute list is an array.</p>
<p>No doubt, it’s a mess. Not a small one, but huge. How to solve it then? Well… it’s called <code class="language-plaintext highlighter-rouge">ConfigParserInterface</code>! We
  define it simple and the Library will use the implementation:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">WorstPractice\Component\DependencyInjection</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">WorstPractice\Component\DependencyInjection\ConfigModel\ArgumentItemCollection</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">WorstPractice\Component\DependencyInjection\ConfigModel\CallableItemCollection</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">ConfigParserInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">parse</span><span class="p">(</span><span class="kt">mixed</span> <span class="nv">$config</span><span class="p">):</span> <span class="kt">ConfigModel</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, I simply set the <code class="language-plaintext highlighter-rouge">$config</code> to be “mixed”, and whatever the implementation do inside must result a <code class="language-plaintext highlighter-rouge">ConfigModel</code>.
  Great theory, but I still have to solve the parsing under the close surveillance of the <code class="language-plaintext highlighter-rouge">PHPStan</code>. For this task I made
  only the <code class="language-plaintext highlighter-rouge">ArrayParser</code>. Later, I may create an <code class="language-plaintext highlighter-rouge">XMLParser</code> or a <code class="language-plaintext highlighter-rouge">YamlParser</code> (by including the Symfony’s Yaml parser class).</p>
<p>The question is still the same, and I avoid the hot porridge, like a cat.</p>
<h5 id="array-to-object">Array to Object</h5>
<p>So a mixed array should be converted to object. Can we do it in one step? If yes, please send me a good solution, anything I 
  tried were all wrong, or just simply didn’t fit here.</p>
<p>Then, can we do it in two steps?</p>
<div class="language-plaintext highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>Array =&gt; ? =&gt; Object 
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Looks familiar. What if, when the <code class="language-plaintext highlighter-rouge">?</code> means <code class="language-plaintext highlighter-rouge">String</code>?</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/backend/refactoring-the-dependency-injection-container/json.jpg" width="800" />
  <figcaption class="a-illustration__caption">Source: <a href="https://imgflip.com/memegenerator" rel="noopener" target="_blank">Meme Generator</a></figcaption>
</figure>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$jsonData</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="n">value</span><span class="o">:</span> <span class="nv">$config</span><span class="p">,</span> <span class="n">flags</span><span class="o">:</span> <span class="no">JSON_THROW_ON_ERROR</span><span class="p">);</span>
<span class="nv">$generalObjectData</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="n">json</span><span class="o">:</span> <span class="nv">$jsonData</span><span class="p">,</span> <span class="n">associative</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="n">flags</span><span class="o">:</span> <span class="no">JSON_THROW_ON_ERROR</span><span class="p">);</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Oh, yes! The <code class="language-plaintext highlighter-rouge">json_encode</code> eats <code class="language-plaintext highlighter-rouge">mixed</code> data and produces a <code class="language-plaintext highlighter-rouge">string</code> (or <code class="language-plaintext highlighter-rouge">false</code>). The <code class="language-plaintext highlighter-rouge">json_decode</code>, in the other hand, eats 
  a <code class="language-plaintext highlighter-rouge">string</code> and produces an <code class="language-plaintext highlighter-rouge">array</code>. <strong>Or an Object!</strong></p>
<p>But what kind of object? It’s the built-in <code class="language-plaintext highlighter-rouge">stdClass</code>. And since it’s an object, we can use <code class="language-plaintext highlighter-rouge">ReflectionObject</code> on it, and 
  also can feed into the <code class="language-plaintext highlighter-rouge">foreach</code> construct, because by design the <code class="language-plaintext highlighter-rouge">foreach</code> works not only with arrays, but also with objects 
  that have public properties. And the <code class="language-plaintext highlighter-rouge">stdClass</code> is not more than public properties.</p>
<p>Great! The most difficult part is done. We go through the data, build the <strong>items</strong>, add them to the <strong>collections</strong>, cast
  everything to the right type. Since anything that we have to cast, is for sure can’t be an array, therefore we won’t have such errors
  as <code class="language-plaintext highlighter-rouge">PHP Warning:  Array to string conversion</code>.</p>
<p>“By any means necessary” - that’s what they used to say. And my goal was to achieve strict types. Result?</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/backend/refactoring-the-dependency-injection-container/stan.gif" width="660" />
  <figcaption class="a-illustration__caption">PHPStan results</figcaption>
</figure>
<h3 id="language-features">Language features</h3>
<p>The <code class="language-plaintext highlighter-rouge">v.1.0</code> was written in <code class="language-plaintext highlighter-rouge">PHP 7.4</code>. This, the <code class="language-plaintext highlighter-rouge">v1.1</code> is written in <code class="language-plaintext highlighter-rouge">PHP 8.2</code>. Normally it’s a huge step, but since I wrote 
  the <code class="language-plaintext highlighter-rouge">v.1.0</code> carefully and paid attention to write a clean and nice code, the refactor from language-wise was not a big deal.</p>
<p>If it had been <code class="language-plaintext highlighter-rouge">PHP 5.3</code> or older, then I would have definitely sweat into my pants. Anyway, there are a few PHP versions 
  between <code class="language-plaintext highlighter-rouge">v.1.0</code> and <code class="language-plaintext highlighter-rouge">v.1.1</code>, so just for curiosity, let’s take a look of the language features I could add to improve the
  new code’s value, and also to explain why I require PHP 8.2 for this package…</p>
<h4 id="features-from-php-80">Features from PHP 8.0</h4>
<p>There are many good features even in PHP 7.4 I didn’t use so far, but our task is not to use all of them, but to use what
  we need. So the first new language features I used during the refactor were:</p>
<h5 id="nullsafe-operator">Nullsafe operator</h5>
<p>With the addition of the <a href="https://stitcher.io/blog/php-8-nullsafe-operator" rel="noopener" target="_blank">Nullsafe operator</a>,
  we can now have null coalescing-like behaviour on methods!</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$isInstantiable</span> <span class="o">=</span> <span class="nv">$reflectionClass</span><span class="o">-&gt;</span><span class="nf">isInstantiable</span><span class="p">()</span> 
    <span class="o">&amp;&amp;</span> <span class="p">((</span><span class="n">int</span><span class="p">)</span> <span class="nv">$reflectionClass</span><span class="o">-&gt;</span><span class="nf">getConstructor</span><span class="p">()</span><span class="o">?-&gt;</span><span class="nf">getNumberOfRequiredParameters</span><span class="p">())</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="named-arguments">Named arguments</h5>
<p>This is one of my favourite, and long awaited feature. 
  <a href="https://stitcher.io/blog/php-8-named-arguments" rel="noopener" target="_blank">Named arguments</a> allow you to 
  pass in values to a function, by specifying the value name, so that you don’t have to take their order into consideration, 
  and you can also skip optional parameters!</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="o">-&gt;</span><span class="nf">set</span><span class="p">(</span>
    <span class="n">id</span><span class="o">:</span> <span class="nv">$id</span><span class="p">,</span>
    <span class="n">class</span><span class="o">:</span> <span class="nv">$serviceInstance</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
    <span class="n">shared</span><span class="o">:</span> <span class="nv">$isShared</span>
<span class="p">);</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>However, it’s not only good to skip parameters, but also labeling parameters to make it easier to read and understand:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nb">json_decode</span><span class="p">(</span><span class="nv">$parameter</span><span class="p">,</span> <span class="n">associative</span><span class="o">:</span> <span class="kc">true</span><span class="p">);</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="match-expression">Match expression</h5>
<p>The <a href="" rel="noopener" target="_blank">match</a> can return values, doesn’t require break statements, can combine 
  conditions, uses strict type comparisons and doesn’t do any type coercion.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="k">function</span> <span class="n">setParameterType</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$parameter</span><span class="p">,</span> <span class="kt">string</span> <span class="nv">$type</span><span class="p">):</span> <span class="kt">mixed</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nf">match</span> <span class="p">(</span><span class="nv">$type</span><span class="p">)</span> <span class="p">{</span>
        <span class="s1">'boolean'</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">bool</span><span class="p">)</span> <span class="nv">$parameter</span><span class="p">,</span>
        <span class="s1">'integer'</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$parameter</span><span class="p">,</span>
        <span class="s1">'double'</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">float</span><span class="p">)</span> <span class="nv">$parameter</span><span class="p">,</span>
        <span class="s1">'array'</span> <span class="o">=&gt;</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$parameter</span><span class="p">,</span> <span class="n">associative</span><span class="o">:</span> <span class="kc">true</span><span class="p">),</span>
        <span class="s1">'NULL'</span> <span class="o">=&gt;</span> <span class="kc">null</span><span class="p">,</span>
        <span class="k">default</span> <span class="o">=&gt;</span> <span class="nv">$parameter</span>
    <span class="p">};</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="constructor-property-promotion">Constructor property promotion</h5>
<p>Oh, yes! Previously you defined properties in the class, then you listed them in the class constructor arguments, then
  you made the assignment in the constructor… You had to type almost the same three times. 
  <a href="https://stitcher.io/blog/constructor-promotion-in-php-8" rel="noopener" target="_blank">Up till now</a>.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">class</span> <span class="nc">CallableItem</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">public</span> <span class="n">string</span> <span class="nv">$method</span><span class="p">,</span>
        <span class="kt">public</span> <span class="nc">ArgumentItemCollection</span> <span class="nv">$arguments</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="the-mixed-type">The mixed type</h5>
<p>When you can’t specify what you have, this new <a href="https://stitcher.io/blog/new-in-php-8#new-mixed-type-rfc" rel="noopener" target="_blank">mixed type</a>
  comes to help you out.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">public</span> <span class="k">function</span> <span class="n">stringifyValue</span><span class="p">(</span><span class="kt">mixed</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">string</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nb">is_object</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">||</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
        <span class="o">?</span> <span class="p">(</span><span class="n">string</span><span class="p">)</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
        <span class="o">:</span> <span class="nb">strval</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="the-throw-exception">The throw exception</h5>
<p>Previously the <code class="language-plaintext highlighter-rouge">throw</code> was a statement, now it’s an expression. Therefore, we can use it anywhere where expressions are
  possible to use. Very, very useful to avoid extra checks.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">public</span> <span class="k">function</span> <span class="n">get</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$id</span><span class="p">):</span> <span class="kt">ConfigItem</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">items</span><span class="p">[</span><span class="nv">$id</span><span class="p">]</span> <span class="o">??</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">OutOfBoundsException</span><span class="p">(</span>
        <span class="nb">sprintf</span><span class="p">(</span><span class="nv">$message</span><span class="p">,</span> <span class="nv">$id</span><span class="p">),</span>
        <span class="nv">$code</span>
    <span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="allowing-class-on-objects">Allowing <code class="language-plaintext highlighter-rouge">::class</code> on objects</h5>
<p>It’s now possible to use <code class="language-plaintext highlighter-rouge">::class</code> on objects, instead of having to use <code class="language-plaintext highlighter-rouge">get_class()</code> on them.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="o">-&gt;</span><span class="nf">set</span><span class="p">(</span>
    <span class="n">id</span><span class="o">:</span> <span class="nv">$id</span><span class="p">,</span>
    <span class="n">class</span><span class="o">:</span> <span class="nv">$serviceInstance</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
    <span class="n">shared</span><span class="o">:</span> <span class="nv">$isShared</span>
<span class="p">);</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="trailing-comma-in-parameter-lists">Trailing comma in parameter lists</h5>
<p>Small but useful improvement. In most cases I try to avoid to leave trailing commas, but now if I forget, I won’t get any 
  error. Comes in handy, when copy-pasting similar parameters, for example in a <code class="language-plaintext highlighter-rouge">var_dump</code>:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nb">var_dump</span><span class="p">(</span>
 <span class="nv">$data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="nb">getType</span><span class="p">(),</span>
 <span class="nv">$data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="nb">getType</span><span class="p">(),</span>
 <span class="nv">$data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-&gt;</span><span class="nb">getType</span><span class="p">(),</span>
 <span class="nv">$data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="nb">getType</span><span class="p">(),</span>
 <span class="nv">$data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-&gt;</span><span class="nb">getType</span><span class="p">(),</span>
<span class="p">);</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>There are many useful new features in PHP 8.0 that I didn’t use. Check the 
  <a href="https://stitcher.io/blog/new-in-php-8" rel="noopener" target="_blank">stitcher.io</a> for details.</p>
<h4 id="features-from-php-81">Features from PHP 8.1</h4>
<p>Although the PHP 8.0 shot most of the black powder, the 8.1 still hold some goodies in the back pocket.</p>
<h5 id="enum">Enum</h5>
<p>The <a href="https://stitcher.io/blog/php-enums" rel="noopener" target="_blank">Enums</a> are great to have. The benefit 
  of enums is that they represent a collection of constant values, but most importantly those values can be typed. But what
  I really like, is now this constants can have quasi-multiple value from multiple types. Okay probably this is not the most
  precise definition.</p>
<p>I found the enum extremely useful for the errors:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kn">namespace</span> <span class="nn">WorstPractice\Component\DependencyInjection</span><span class="p">;</span>

<span class="n">enum</span> <span class="nc">Error</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="no">ERROR_CLASS_NOT_FOUND</span><span class="p">;</span>
    <span class="k">case</span> <span class="no">ERROR_CLASS_NOT_INSTANTIABLE</span><span class="p">;</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">getCode</span><span class="p">():</span> <span class="kt">int</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">match</span> <span class="p">(</span><span class="nv">$this</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">::</span><span class="no">ERROR_CLASS_NOT_FOUND</span> <span class="o">=&gt;</span> <span class="mi">1000</span><span class="p">,</span>
            <span class="k">self</span><span class="o">::</span><span class="no">ERROR_CLASS_NOT_INSTANTIABLE</span> <span class="o">=&gt;</span> <span class="mi">1001</span><span class="p">,</span>
            <span class="c1">// ...</span>
        <span class="p">};</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">getMessageTemplate</span><span class="p">():</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">match</span> <span class="p">(</span><span class="nv">$this</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">::</span><span class="no">ERROR_CLASS_NOT_FOUND</span> <span class="o">=&gt;</span> <span class="s1">'Class "%s" not found.'</span><span class="p">,</span>
            <span class="k">self</span><span class="o">::</span><span class="no">ERROR_CLASS_NOT_INSTANTIABLE</span> <span class="o">=&gt;</span> <span class="s1">'The given service (%s) is not an instantiable class.'</span><span class="p">,</span>
            <span class="c1">// ...</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Then somewhere else in the code:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">try</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nv">$serviceBook</span><span class="o">-&gt;</span><span class="nf">class</span><span class="p">(</span><span class="mf">...</span><span class="nv">$argumentList</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">Throwable</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="p">(</span>
        <span class="nb">sprintf</span><span class="p">(</span><span class="nc">Error</span><span class="o">::</span><span class="no">ERROR_CLASS_NOT_INSTANTIABLE</span><span class="o">-&gt;</span><span class="nf">getMessageTemplate</span><span class="p">(),</span> <span class="nv">$id</span><span class="p">),</span>
        <span class="nc">Error</span><span class="o">::</span><span class="no">ERROR_CLASS_NOT_INSTANTIABLE</span><span class="o">-&gt;</span><span class="nf">getCode</span><span class="p">(),</span>
        <span class="nv">$exception</span>
    <span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="new-in-initializers"><code class="language-plaintext highlighter-rouge">new</code> in initializers</h5>
<p>This <a href="https://stitcher.io/blog/php-81-new-in-initializers" rel="noopener" target="_blank">feature</a> proposes 
  to allow use of new expressions inside parameter default values, attribute arguments, static variable initializers and 
  global constant initializers. This is a very-very useful feature.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">public</span> <span class="k">function</span> <span class="n">set</span><span class="p">(</span>
    <span class="kt">string</span> <span class="nv">$id</span><span class="p">,</span>
    <span class="kt">?string</span> <span class="nv">$class</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
    <span class="kt">ArgumentItemCollection</span> <span class="nv">$arguments</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArgumentItemCollection</span><span class="p">(),</span>
    <span class="kt">CallableItemCollection</span> <span class="nv">$calls</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CallableItemCollection</span><span class="p">(),</span>
    <span class="kt">bool</span> <span class="nv">$shared</span> <span class="o">=</span> <span class="kc">true</span>
<span class="p">):</span> <span class="kt">void</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">library</span><span class="p">[</span><span class="nv">$id</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServiceBook</span><span class="p">(</span>
        <span class="n">class</span><span class="o">:</span> <span class="nv">$class</span> <span class="o">??</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="n">arguments</span><span class="o">:</span> <span class="nv">$arguments</span><span class="p">,</span>
        <span class="n">calls</span><span class="o">:</span> <span class="nv">$calls</span><span class="p">,</span>
        <span class="n">shared</span><span class="o">:</span> <span class="nv">$shared</span>
    <span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="readonly-properties">Readonly properties</h5>
<p>The end of an era. An era where you had to define properties as <code class="language-plaintext highlighter-rouge">private</code> and manually create <code class="language-plaintext highlighter-rouge">getters</code> because you
  wanted to protect them to be overwritten. Now class properties can be marked as <a href="https://stitcher.io/blog/php-81-readonly-properties" rel="noopener" target="_blank">readonly</a>, 
  meaning they can only be written once. Either by the constructor, or by any other method. Absolutely love it!</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">private</span> <span class="n">readonly</span> <span class="nc">ConfigParserInterface</span> <span class="nv">$configParser</span><span class="p">)</span>
<span class="p">{</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>There are many useful new features in PHP 8.1 that I didn’t use. Check the
  <a href="https://stitcher.io/blog/new-in-php-81" rel="noopener" target="_blank">stitcher.io</a> for details.</p>
<h4 id="features-from-php-82">Features from PHP 8.2</h4>
<p>This one is easy. I used only one new feature specifically from this release: the <a href="https://stitcher.io/blog/new-in-php-82#readonly-classes-rfc" rel="noopener" target="_blank">readonly classes</a>.
  It adds syntactic sugar to make all class properties readonly at once.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kn">namespace</span> <span class="nn">WorstPractice\Component\DependencyInjection\ConfigModel</span><span class="p">;</span>

<span class="n">readonly</span> <span class="kd">class</span> <span class="nc">CallableItem</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">public</span> <span class="n">string</span> <span class="nv">$method</span><span class="p">,</span>
        <span class="kt">public</span> <span class="nc">ArgumentItemCollection</span> <span class="nv">$arguments</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>There are many useful new features in PHP 8.2 that I didn’t use. Check the
  <a href="https://stitcher.io/blog/new-in-php-82" rel="noopener" target="_blank">stitcher.io</a> for details.</p>
<h3 id="conclusion">Conclusion</h3>
<p>I think it was worth to refactor the old code. In one hand, it was fun to make some useful improvements in code quality, 
  but in the other, I learned a lot of new language features, that I can in the future. Except when I have to deal with 
  PHP 5 legacy projects.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="php" /><category term="php82" /><category term="refactor" /><category term="dic" /><category term="clean-code" /><summary type="html"><![CDATA[Two years ago (and only a few articles earlier) I published a mini-series about writing my own DIC. Now it's time to get back there and practice the refactoring.]]></summary></entry><entry><title type="html">My useless React App, Part 3</title><link href="http://0.0.0.0:4000/frontend/my-useless-react-app-3" rel="alternate" type="text/html" title="My useless React App, Part 3" /><published>2022-11-03T10:00:00+00:00</published><updated>2022-11-03T09:51:50+00:00</updated><id>http://0.0.0.0:4000/frontend/my-useless-react-app-3</id><content type="html" xml:base="http://0.0.0.0:4000/frontend/my-useless-react-app-3"><![CDATA[<h3 id="tldr">TL;DR</h3>
  <p><a href="https://en.wikipedia.org/wiki/In_medias_res" rel="noopener" target="_blank"><em>In medias res?</em></a> No problem. 
    If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the 
    source code on <a href="https://github.com/Gixx/worstpractice-react" target="_blank" rel="noopener">GitHub</a>.</p>
  <h3 id="the-selectbox">The &lt;SelectBox&gt;</h3>
  <p>In <a href="/frontend/my-useless-react-app-2">Part 2</a> we already built the <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code> component with dummy children components.
    And in <a href="/frontend/my-useless-react-app-1">Part 1</a> we set up the base specification for the <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code> as well:</p>
  <ul>
    <li>I need a select box that loads its option values from an endpoint (in this case from a json file)</li>
  </ul>
  <p>Okay, so let’s get is started. First recreate the dummy component as a separate component in the 
    <code class="language-plaintext highlighter-rouge">src/scripts/components/Form/SelectBox.tsx</code> file:</p>
  <div class="language-tsx highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">FunctionComponent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Select</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@chakra-ui/react</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">SelectBox</span><span class="p">:</span><span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Select</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">"A select box value"</span> <span class="na">variant</span><span class="p">=</span><span class="s">"outline"</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onSelectChange</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">SelectBox</span><span class="p">)</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>We added an extra spice to the soup here in the last row: <code class="language-plaintext highlighter-rouge">export default React.memo(SelectBox)</code>. By default, if a component
  has any update, it will re-render all child components as well. But in some cases this is unnecessary for a child component.
  With the <code class="language-plaintext highlighter-rouge">React.memo</code> we can memorize any component, and it will be re-rendered only when that specific component has 
  changes.</p>
<p>Now add some eye-candy around this, so modify the JSX part:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">label</span><span class="p">&gt;</span>
            Select the motto of the day:
            <span class="p">&lt;</span><span class="nc">Select</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">"Motto of the day"</span> <span class="na">variant</span><span class="p">=</span><span class="s">"outline"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">)</span>
<span class="c1">// ...</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now, we need elements to be loaded. To do it properly we create a new child component for the <code class="language-plaintext highlighter-rouge">&lt;option&gt;</code> HTML elements.
  Create the <code class="language-plaintext highlighter-rouge">src/scripts/components/Form/SelectBox/Option.tsx</code> file:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">FunctionComponent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>

<span class="kr">interface</span> <span class="nx">OptionData</span> <span class="p">{</span>
    <span class="nl">value</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">label</span><span class="p">:</span> <span class="kr">string</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Option</span><span class="p">:</span><span class="nx">FunctionComponent</span><span class="o">&lt;</span><span class="nx">OptionData</span><span class="o">&gt;</span> <span class="o">=</span>
    <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">value</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">label</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;)</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">Option</span><span class="p">)</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Here we defined the <code class="language-plaintext highlighter-rouge">&lt;Option&gt;</code> component and defined its label and value to be strings. Now let’s use it in the
  <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code>:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">import</span> <span class="nx">Option</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./SelectBox/Option</span><span class="dl">'</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Okay, we have the component included, but how to load data? We use promise chain! Another fancy behaviour of the modern
  JavaScript.</p>
<p>First we have to define the external data source. It can be an API with JSON response or anything else. In our case we
  will use a static <code class="language-plaintext highlighter-rouge">.json</code> file. Create the <code class="language-plaintext highlighter-rouge">assets/data/motto.json</code>:</p>
<div class="language-json highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Good day to learn React!"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"safe"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Spider-man 4 life!"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"safe"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"What you can do today, you can do it tomorrow either."</span><span class="p">,</span><span class="w">
    </span><span class="nl">"safe"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Then in the <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code> component create a new <del>method</del> <em>function</em> that will load the data:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">const</span> <span class="nx">SelectBox</span><span class="p">:</span><span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">mottoElements</span><span class="p">,</span> <span class="nx">setMottos</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">JSX</span><span class="p">.</span><span class="nx">Element</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">([])</span>
    
    <span class="kd">const</span> <span class="nx">getMottos</span> <span class="o">=</span> <span class="p">():</span><span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/assets/data/motto.json</span><span class="dl">'</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Option</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span><span class="si">}</span> <span class="na">label</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">text</span><span class="si">}</span> <span class="p">/&gt;</span>
                <span class="p">})</span>

                <span class="nx">setMottos</span><span class="p">(</span><span class="nx">elements</span><span class="p">)</span>
            <span class="p">})</span>

        <span class="k">return</span>
    <span class="p">}</span>

   <span class="c1">// ...</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Okay but this is not good in TypeScript wise. We need to define types here. First we define the loaded data:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">const</span> <span class="nx">SelectBox</span><span class="p">:</span><span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">type</span> <span class="nx">Motto</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
        <span class="na">text</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
        <span class="na">safe</span><span class="p">:</span> <span class="nx">boolean</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Then we use this type when we map the loaded data:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="kd">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">:</span><span class="nx">Motto</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Option</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span><span class="si">}</span> <span class="na">label</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">text</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">})</span>
<span class="c1">// ...</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you see, we passed the value and label properties to the <code class="language-plaintext highlighter-rouge">&lt;Option&gt;</code> component, that will be waiting for. So when 
  the JSON file is loaded, the promise chain starts, converts the JSON content into JavaScript array of objects, then we 
  convert it into array of <code class="language-plaintext highlighter-rouge">&lt;Option&gt;</code> components and store this in a component state.</p>
<p>Now let’s use the loaded elements in the <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code>:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">&lt;</span><span class="nc">Select</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">"Motto of the day"</span> <span class="na">variant</span><span class="p">=</span><span class="s">"outline"</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="nx">mottoElements</span><span class="si">}</span>
<span class="p">&lt;/</span><span class="nc">Select</span><span class="p">&gt;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As a final step, make the data load upon the component render. In <a href="/frontend/my-useless-react-app-2">Part 2</a> we learned
  about the <code class="language-plaintext highlighter-rouge">useEffect</code> and we need exactly the same:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">const</span> <span class="nx">SelectBox</span><span class="p">:</span><span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="kd">const</span> <span class="nx">getMottos</span> <span class="o">=</span> <span class="p">():</span><span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="nx">useEffect</span><span class="p">(</span><span class="nx">getMottos</span><span class="p">,</span> <span class="p">[])</span>

   <span class="c1">// ...</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>We are almost done. In the <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code> component let’s exchange the dummy component to this new one:</p>
<div class="language-diff highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="gi">+   import SelectBox from './Form/SelectBox'
</span>    
    const Form: FunctionComponent = function ()
    {
<span class="gd">-       const SelectBox = () =&gt; (&lt;select&gt;&lt;option value="1"&gt;A select box value&lt;/option&gt;&lt;/select&gt;)
</span>    }
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="the-inputfield">The &lt;InputField&gt;</h3>
<p>The second form component is the <code class="language-plaintext highlighter-rouge">&lt;InputField&gt;</code>, which almost as simple as it sounds, but we had an extra criteria for it:</p>
<ul>
  <li>I need a text box which content changes depending on the selected dropdown value.</li>
</ul>
<p>Okay, now create the <code class="language-plaintext highlighter-rouge">src/scripts/components/Form/InputField.tsx</code> file:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">FunctionComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Input</span><span class="p">,</span> <span class="nx">InputGroup</span><span class="p">,</span> <span class="nx">InputLeftAddon</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@chakra-ui/react</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">InputField</span><span class="p">:</span><span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">InputGroup</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">InputLeftAddon</span> <span class="na">children</span><span class="p">=</span><span class="s">'Is it safe?'</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">Input</span>
                    <span class="na">placeholder</span><span class="p">=</span><span class="s">'Yes or No'</span>
                    <span class="na">variant</span><span class="p">=</span><span class="s">'filled'</span>
                    <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">value</span><span class="si">}</span>
                <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">InputGroup</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">InputField</span><span class="p">)</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>This is as simple as it can be, so make it complex. Just a little. First, let’s typehint that <code class="language-plaintext highlighter-rouge">props</code>, because the TypeScript 
  interpreter won’t like it this way.</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="kd">type</span> <span class="nx">InputProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">InputField</span><span class="p">:</span><span class="nx">FunctionComponent</span><span class="o">&lt;</span><span class="nx">InputProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Easy, isn’t it? The next thing is to add some sugar flavor: when we click inside the input field, make the whole value be
  selected. It’s useful. Two things to add here: a function that makes the selection, and an event listener that calls this 
  function.</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="kd">const</span> <span class="nx">InputField</span><span class="p">:</span><span class="nx">FunctionComponent</span><span class="o">&lt;</span><span class="nx">InputProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kd">const</span> <span class="nx">onClick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="nx">HTMLInputElement</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">target</span><span class="p">.</span><span class="nx">setSelectionRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">props</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">InputGroup</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">InputLeftAddon</span> <span class="na">children</span><span class="p">=</span><span class="s">'Is it safe?'</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">Input</span>
                    <span class="na">placeholder</span><span class="p">=</span><span class="s">'Yes or No'</span>
                    <span class="na">variant</span><span class="p">=</span><span class="s">'filled'</span>
                    <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">value</span><span class="si">}</span>
                    <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">onClick</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span> <span class="k">as</span> <span class="nx">HTMLInputElement</span><span class="p">)</span><span class="si">}</span>
                <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">InputGroup</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Well, I cheated a little, since the event listener is already written in the Chakra component, I needed only to pass the
  new function to it. You can notice that in the function we didn’t get the value from the input field, but we used the
  <code class="language-plaintext highlighter-rouge">props</code> instead. It’s a nice way to reduce complexity, since the input field’s value is already in the <code class="language-plaintext highlighter-rouge">props</code>, so no need
  to go to DOM level to extract it from the field itself.</p>
<p>Our specification said, it should change the value whenever the <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code> changes. How to do this?  First I scratched
  my head, but then I read after the good solutions, and realized the most obvious way: do this whole process in the common
  parent, in the <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code> component. So open the <code class="language-plaintext highlighter-rouge">src/scripts/components/Form.tsx</code> file and add the following:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="k">import</span> <span class="nx">InputField</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Form/InputField</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">Form</span><span class="p">:</span> <span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span>
<span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">value</span><span class="p">,</span> <span class="nx">setValue</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">''</span><span class="p">)</span>
    <span class="c1">// ...</span>
   
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">form</span> <span class="na">id</span><span class="p">=</span><span class="s">'MyForm'</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="nx">event</span> <span class="o">=&gt;</span> <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">SelectBox</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">InputField</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">value</span><span class="si">}</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
            <span class="si">{</span><span class="cm">/* ... */</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
<span class="c1">// ...</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>This will store the <code class="language-plaintext highlighter-rouge">value</code> in the component state and pass it to the <code class="language-plaintext highlighter-rouge">&lt;InputField&gt;</code> component. But how will the <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code>
  change the value? The answer is twisted: we create a callback function that sets the <code class="language-plaintext highlighter-rouge">value</code> and pass this callback to the
  <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code> which will call it when it changes. Clear? No? Ok, then create the callback in the <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code>:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="kd">const</span> <span class="nx">Form</span><span class="p">:</span> <span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="kd">const</span> <span class="nx">onSelectChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">isSafe</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setValue</span><span class="p">(</span><span class="nx">isSafe</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">Yes</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">No</span><span class="dl">'</span><span class="p">)</span>
    <span class="c1">// ...</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">form</span> <span class="na">id</span><span class="p">=</span><span class="s">'MyForm'</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="nx">event</span> <span class="o">=&gt;</span> <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">SelectBox</span> <span class="na">onSelectChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onSelectChange</span><span class="si">}</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">InputField</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">value</span><span class="si">}</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
            <span class="si">{</span><span class="cm">/* ... */</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
<span class="c1">// ...</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So this callback must get a Boolean parameter and if it’s TRUE, then the <code class="language-plaintext highlighter-rouge">value</code> will be “<em>Yes</em>”, otherwise “<em>No</em>”.
  Now add the following to the <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code> component:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">type</span> <span class="nx">SelectProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">onSelectChange</span><span class="p">:</span> <span class="p">(</span><span class="na">isSafe</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">SelectBox</span><span class="p">:</span><span class="nx">FunctionComponent</span><span class="o">&lt;</span><span class="nx">SelectProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="kd">const</span> <span class="nx">onSelectChange</span><span class="p">:</span><span class="nx">ChangeEventHandler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLInputElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
        <span class="kd">const</span> <span class="nx">selectedMotto</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

        <span class="nx">props</span><span class="p">.</span><span class="nx">onSelectChange</span><span class="p">((</span><span class="nx">selectedMotto</span><span class="p">?.</span><span class="nx">safe</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">{</span><span class="cm">/* ... */</span><span class="p">}</span>
                <span class="p">&lt;</span><span class="nc">Select</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">"Motto of the day"</span> <span class="na">variant</span><span class="p">=</span><span class="s">"outline"</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">onSelectChange</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="cm">/* ... */</span><span class="si">}</span>
    )
}
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Note, we defined a type for the props, and changed the component signature as well. Then we created a callback that will 
  be called by the Chakra component when the <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code> field changes. When this callback is called it will get the new
  selected value from the regular DOM event, and calls the callback that we passed through the <code class="language-plaintext highlighter-rouge">props</code>. I mean it <strong>would</strong> call.
  Now it can’t since we lost the fetched raw data when we converted into <code class="language-plaintext highlighter-rouge">&lt;Option&gt;</code> components. Fix this too:</p>
<div class="language-diff highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="gi">+   import React, {useState, useEffect, FunctionComponent, ChangeEvent, ChangeEventHandler} from 'react'
</span>    // ...
    const SelectBox:FunctionComponent&lt;SelectProps&gt; = function(props)
    {
        // ...
<span class="gi">+       type MottoStore = Array&lt;Motto&gt;;
+       const [mottos, setData] = useState&lt;MottoStore&gt;([])
</span>        // ...
        const onSelectChange:ChangeEventHandler = (event: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
            // ...
<span class="gi">+           const selectedMotto = mottos.find((item:Motto) =&gt; item.id === newValue)
</span>            // ...
        }
        //...        
        const getMottos = ():void =&gt; {
            fetch('/assets/data/motto.json')
                .then(response =&gt; response.json())
                .then((data) =&gt; {
                    const elements = data.map((item:Motto) =&gt; {
                        return &lt;Option value={item.id.toString()} label={item.text} /&gt;
                    })
    
                    setMottos(elements)
<span class="gi">+                   setData(data)
</span>                })
    
            return
        }
    }
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So what happens here? When we fetch the JSON data, we store it with the <code class="language-plaintext highlighter-rouge">setMottos</code> hook. Since we already defined the type
  of each item in the JSON array, we can define the type of this array as well. So did we with the <code class="language-plaintext highlighter-rouge">MottoStore</code>. It’s an
  array of <code class="language-plaintext highlighter-rouge">Motto</code>s. Cool. And now in the <code class="language-plaintext highlighter-rouge">onSelectChange</code> we can use this array knowing the exact type of each
  item, so we can refer one property of them safely. That’s why it worth to use TypeScript! When we find the selected item,
  we call the callback function with TRUE or FALSE depending on the <code class="language-plaintext highlighter-rouge">safe</code> property. And remember: this callback will set 
  the value in the <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code> component.</p>
<p>So by changing the <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code>’s selection the <code class="language-plaintext highlighter-rouge">&lt;InputField&gt;</code>’s value will be “Yes” or “No”. Of course, you can change 
  the <code class="language-plaintext highlighter-rouge">&lt;InputField&gt;</code>’s value with any free text if you wish.</p>
<h3 id="the-submit">The &lt;Submit&gt;</h3>
<p>In the order of the elements the checkbox would be the next, but its functionality depends on the button, so first let’s
  see this button. Again, our specification was:</p>
<ul>
  <li>I need a button that changes its style depending on the selected dropdown value</li>
</ul>
<p>Create the <code class="language-plaintext highlighter-rouge">src/scripts/components/Form/Submit.tsx</code> file:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">FunctionComponent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@chakra-ui/react</span><span class="dl">'</span>

<span class="kd">type</span> <span class="nx">SubmitProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="kr">string</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Submit</span><span class="p">:</span><span class="nx">FunctionComponent</span><span class="o">&lt;</span><span class="nx">SubmitProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kd">const</span> <span class="nx">enabled</span> <span class="o">=</span> <span class="nx">props</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">yes</span><span class="dl">'</span>
    <span class="kd">const</span> <span class="nx">style</span> <span class="o">=</span> <span class="nx">enabled</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">teal</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span>
    <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">enabled</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">Cancel</span><span class="dl">'</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">colorScheme</span><span class="p">=</span><span class="si">{</span> <span class="nx">style</span> <span class="si">}</span> <span class="na">variant</span><span class="p">=</span><span class="s">"solid"</span> <span class="na">type</span><span class="p">=</span><span class="s">"submit"</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">text</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">Submit</span><span class="p">)</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>After what we achieved with the <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code> and with the <code class="language-plaintext highlighter-rouge">&lt;Inputfield&gt;</code>, it’s not a big deal to understand how this 
  button component works. It must get a <code class="language-plaintext highlighter-rouge">value</code> parameter, which must be “<em>yes</em>” (after making it lower case) or anything else.
  This will set an <code class="language-plaintext highlighter-rouge">enabled</code> variable to TRUE or FALSE. When it’s TRUE, the button will be a green (teal) OK, otherwise it
  will be a red Cancel. Wonderful.</p>
<p>Make it use in the <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code> component:</p>
<div class="language-diff highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre>
  </td>
  <td class="rouge-code">
    <pre>    // ...
<span class="gi">+   import InputField from './Form/Submit'
</span>    
    const Form: FunctionComponent = function ()
    {
        // ...
<span class="gd">-       const Submit = () =&gt; (&lt;button type="submit"&gt;A submit button&lt;/button&gt;)
</span>       
        return (
            &lt;form id='MyForm' onSubmit={event =&gt; event.preventDefault()}&gt;
                {/* ... */}
<span class="gi">+               &lt;Submit value={value}/&gt;&lt;br/&gt;
</span>            &lt;/form&gt;
        )
    }
    // ...
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>And since we set and store the <code class="language-plaintext highlighter-rouge">value</code> in the <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code> component, we can easily pass it to the <code class="language-plaintext highlighter-rouge">&lt;Submit&gt;</code> component as well.</p>
<h3 id="the-lock">The &lt;Lock&gt;</h3>
<p>Our last component will be a checkbox. Remember our criteria regarding its purpose:</p>
<ul>
  <li>I need a checkbox that can block the button to change its style</li>
</ul>
<p>So we need a checkbox. Whenever we check this checkbox the <code class="language-plaintext highlighter-rouge">&lt;Submit&gt;</code>’s style must be intact. So this has its own value
  that should affect another component. Sounds familiar, we did something similar with the <code class="language-plaintext highlighter-rouge">&lt;SelectBox&gt;</code>, didn’t we?
  Good, now let’s create the <code class="language-plaintext highlighter-rouge">src/scripts/components/Form/Lock.tsx</code> file:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">FunctionComponent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Checkbox</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@chakra-ui/react</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">Lock</span><span class="p">:</span> <span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Checkbox</span> <span class="na">size</span><span class="p">=</span><span class="s">"lg"</span> <span class="na">colorScheme</span><span class="p">=</span><span class="s">"green"</span><span class="p">&gt;</span>
                Lock button state?
            <span class="p">&lt;/</span><span class="nc">Checkbox</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">Lock</span><span class="p">)</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>This won’t do much, because we need to know the initial state, and we need a callback that will handle the changes. Just
  define the <code class="language-plaintext highlighter-rouge">props</code> type, and pass the properties to the Chakra component:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="kd">type</span> <span class="nx">CheckboxProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">locked</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span>
    <span class="na">onLockChange</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Lock</span><span class="p">:</span> <span class="nx">FunctionComponent</span><span class="o">&lt;</span><span class="nx">CheckboxProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Checkbox</span> <span class="na">size</span><span class="p">=</span><span class="s">"lg"</span> <span class="na">colorScheme</span><span class="p">=</span><span class="s">"green"</span> <span class="na">isChecked</span><span class="p">=</span><span class="si">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">locked</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">onLockChange</span><span class="si">}</span>
            <span class="p">&gt;</span>
                <span class="si">{</span><span class="cm">/* ... */</span><span class="si">}</span>
            <span class="p">&lt;/</span><span class="nc">Checkbox</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
<span class="c1">// ...</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So whether the <code class="language-plaintext highlighter-rouge">&lt;Lock&gt;</code> component is checked or not, a boolean data will control. And we need to define the void function
  for the callback. And as before we do this in the <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code> component:</p>
<div class="language-diff highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre>
  </td>
  <td class="rouge-code">
    <pre>    // ...
<span class="gi">+   import Lock from './Form/Lock'
</span>    
    const Form: FunctionComponent = function ()
    {
        // ...
<span class="gi">+       const [locked, setLocked] = useState(true)
</span>    
        // ...
<span class="gi">+       const onLockChange = () =&gt; setLocked(!locked)
</span>        // ...
<span class="gd">-       const Lock = () =&gt; (&lt;label&gt;A checkbox to lock state: &lt;input type="checkbox" value="1" /&gt;&lt;/label&gt;)   
</span>    
        return (
            &lt;form id='MyForm' onSubmit={event =&gt; event.preventDefault()}&gt;
                &lt;SelectBox onSelectChange={onSelectChange}/&gt;&lt;br/&gt;
                &lt;InputField value={value} onInputChange={onInputChange}/&gt;&lt;br/&gt;
<span class="gi">+               &lt;Lock locked={locked} onLockChange={onLockChange}/&gt;&lt;br/&gt;
+               &lt;Submit value={value} locked={locked}/&gt;
</span>            &lt;/form&gt;
        )
    }
    // ...
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Okay, now the checkbox can call the function and the <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code> will store its state in the <code class="language-plaintext highlighter-rouge">locked</code> variable. As you can
  see, we also passed this variable to the <code class="language-plaintext highlighter-rouge">&lt;Submit&gt;</code> component, so let’s make it be used:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="kd">type</span> <span class="nx">SubmitProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="na">locked</span><span class="p">:</span> <span class="nx">boolean</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Submit</span><span class="p">:</span><span class="nx">FunctionComponent</span><span class="o">&lt;</span><span class="nx">SubmitProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">isLocked</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">:</span><span class="nx">SubmitProps</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">:</span><span class="nx">SubmitProps</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nx">prevProps</span> <span class="o">===</span> <span class="nx">nextProps</span> <span class="o">||</span> <span class="nx">nextProps</span><span class="p">.</span><span class="nx">locked</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">Submit</span><span class="p">,</span> <span class="nx">isLocked</span><span class="p">)</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Hey, what is this? A new behavior! And yes, the <code class="language-plaintext highlighter-rouge">React.memo</code> can do more than just remember the actual state of a component 
  and avoid its re-rendering, but it also can do this under certain circumstances. With the second parameter we can add an 
  expression / callback / function to decide, whether it should change the state or not. I don’t know, I didn’t dig the sources,
  but I assume in the background the component technically receives the new props, but this callback decides to not apply the
  changes when the locked property is TRUE.</p>
<p>How it does this? The <code class="language-plaintext highlighter-rouge">isLocked</code> callback will get two parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">prevProps</code>: the component’s props before the change</li>
  <li><code class="language-plaintext highlighter-rouge">nextProps</code>: the component’s props to apply to make the change happen</li>
</ul>
<p>Simply we just check if there were any change between the two states (default behaviour) OR the checkbox is checked in 
  the new properties. Super mega awesome!</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/frontend/my-useless-react-app-3/useless_react_app.png" width="800" />
  <figcaption class="a-illustration__caption">My first and completely useless React application</figcaption>
</figure>
<h3 id="recap">Recap</h3>
<p>So what we achieved? In short: made a useless React application. In details:</p>
<ul>
  <li>We get together <code class="language-plaintext highlighter-rouge">Webpack</code>, <code class="language-plaintext highlighter-rouge">React</code> and <code class="language-plaintext highlighter-rouge">Typescript</code> in a solid, maintainable, well-structured code base.</li>
  <li>We used a third party UI to pimp the shit up.</li>
  <li>We learned how to create <code class="language-plaintext highlighter-rouge">React</code> components written in <code class="language-plaintext highlighter-rouge">Typescript</code> that can share data with each other.</li>
  <li>We could avoid to use the hateful <code class="language-plaintext highlighter-rouge">any</code>.</li>
</ul>
<p>Now one question left: Is this the worst practice?</p>
]]></content><author><name>Gábor Iván</name></author><category term="frontend" /><category term="react" /><category term="js" /><category term="webpack" /><category term="typescript" /><category term="chakra" /><summary type="html"><![CDATA[So far we scratched only the surface, now it's time dig deeper and add functionality and some tricks to our form. No pain, no gain - that's what they used to say.]]></summary></entry><entry><title type="html">My useless React App, Part 2</title><link href="http://0.0.0.0:4000/frontend/my-useless-react-app-2" rel="alternate" type="text/html" title="My useless React App, Part 2" /><published>2022-10-27T15:00:00+00:00</published><updated>2022-11-03T08:29:02+00:00</updated><id>http://0.0.0.0:4000/frontend/my-useless-react-app-2</id><content type="html" xml:base="http://0.0.0.0:4000/frontend/my-useless-react-app-2"><![CDATA[<h3 id="disclaimer">Disclaimer</h3>
  <p>The <a href="/frontend/my-useless-react-app-1">Part 1</a> was a shaking up for me from the year-long winter sleep. It was a bit rushy 
    writing, because I didn’t wanna jump in the middle of this tutorial without any warm up. Getting to the very start point
    was really not a big deal after reading all those blogs, tutorials and watch the 
    <a href="https://scrimba.com/allcourses?topic=react" target="_blank" rel="noopener">Scrimba</a> React courses. The real 
    difficulty there was to add the Typescript to the game. Of course, it’s a piece of cake now.</p>
  <h3 id="tldr">TL;DR</h3>
  <p>And again, if you don’t want to waste your time reading this tutorial, and you only need a working code sample, please 
    check the source code on <a href="https://github.com/Gixx/worstpractice-react" target="_blank" rel="noopener">GitHub</a>.</p>
  <h3 id="inside-out-outside-in">Inside out, outside in</h3>
  <p>Now we have a working basic, it’s time to add the features. For a while, they will be dummies.</p>
  <h4 id="the-application">The Application</h4>
  <p>Open the <code class="language-plaintext highlighter-rouge">src/script/app.tsx</code> file and modify the “<em>Hello World</em>” application:</p>
  <div class="language-jsx highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-dom</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">ChakraProvider</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@chakra-ui/react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Box</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@chakra-ui/layout</span><span class="dl">'</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">../styles/app.scss</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#root</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">Messagebar</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="p">=</span><span class="s">"messagebar"</span><span class="p">&gt;</span>This is an alert box<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;)</span>
<span class="kd">const</span> <span class="nx">Heading</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello there!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;)</span>
<span class="kd">const</span> <span class="nx">Form</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nt">form</span><span class="p">&gt;&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="p">=</span><span class="s">"submit"</span><span class="p">&gt;</span>Dummy<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;&lt;/</span><span class="nt">form</span><span class="p">&gt;)</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">ChakraProvider</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">MessageBar</span><span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">Box</span> <span class="na">id</span><span class="p">=</span><span class="s">"box"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Heading</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">Form</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Box</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">ChakraProvider</span><span class="p">&gt;,</span>
    <span class="nx">app</span>
<span class="p">)</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>But before we could compile, we have to create the <code class="language-plaintext highlighter-rouge">src/styles/app.scss</code> too:</p>
<div class="language-sass highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cm">/* Variables */
</span><span class="nv">$size-text-base</span><span class="p">:</span> <span class="m">62</span><span class="mi">.5%</span><span class="err">;</span> <span class="o">/*</span> <span class="n">This</span> <span class="n">should</span> <span class="n">produce</span> <span class="m">10px</span><span class="o">,</span> <span class="n">if</span> <span class="n">your</span> <span class="n">browser</span> <span class="n">follows</span> <span class="n">the</span> <span class="n">unspoken</span> <span class="n">rules</span><span class="o">.</span> <span class="o">*/</span>

<span class="cm">/* Definitions */
</span><span class="nt">html</span> <span class="err">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="err">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="err">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="err">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100vw</span><span class="err">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100vh</span><span class="err">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="nv">$size-text-base</span><span class="err">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">white</span><span class="err">;</span>
<span class="err">}</span>

<span class="nt">body</span> <span class="err">{</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="err">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="err">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="err">;</span>
  <span class="nl">min-height</span><span class="p">:</span> <span class="m">100vh</span><span class="err">;</span>
  <span class="nl">font-weight</span><span class="p">:</span> <span class="m">400</span><span class="err">;</span>
  <span class="nl">font-style</span><span class="p">:</span> <span class="nb">normal</span><span class="err">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">1</span><span class="mi">.6rem</span><span class="err">;</span>
  <span class="nl">line-height</span><span class="p">:</span> <span class="m">1</span><span class="mi">.9rem</span><span class="err">;</span>
  <span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">0</span><span class="mi">.01rem</span><span class="err">;</span>
  <span class="na">scroll-behavior</span><span class="p">:</span> <span class="n">smooth</span><span class="err">;</span>
  <span class="nl">overflow-x</span><span class="p">:</span> <span class="nb">hidden</span><span class="err">;</span>
<span class="err">}</span>

<span class="nn">#root</span> <span class="err">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100vw</span><span class="err">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100vh</span><span class="err">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">cadetblue</span><span class="err">;</span>
<span class="err">}</span>

<span class="nn">#box</span> <span class="err">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="err">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">60rem</span><span class="err">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">50%</span><span class="err">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">50%</span><span class="err">;</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="nf">translate</span><span class="p">(</span><span class="m">-50%</span><span class="o">,</span> <span class="m">-50%</span><span class="p">)</span><span class="err">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">white</span><span class="err">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">2rem</span><span class="err">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">1</span><span class="mi">.5rem</span><span class="err">;</span>
<span class="err">}</span>

<span class="nn">#messagebar</span> <span class="err">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">fixed</span><span class="err">;</span>
  <span class="nl">z-index</span><span class="p">:</span> <span class="m">100</span><span class="err">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">1rem</span><span class="err">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">50%</span><span class="err">;</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="nf">translateX</span><span class="p">(</span><span class="m">-50%</span><span class="p">)</span><span class="err">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">50rem</span><span class="err">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">green</span><span class="err">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="err">;</span>
<span class="err">}</span>

<span class="nt">button</span> <span class="err">{</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">0</span><span class="mi">.2rem</span> <span class="nb">outset</span> <span class="n">lightgray</span> <span class="o">!</span><span class="n">important</span><span class="err">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">darkgray</span> <span class="o">!</span><span class="n">important</span><span class="err">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="mi">.2rem</span> <span class="m">0</span><span class="mi">.5rem</span> <span class="o">!</span><span class="n">important</span><span class="err">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="err">;</span>
<span class="err">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Okay, now let’s see what we have here. If you read the <a href="https://chakra-ui.com/getting-started" rel="noopener" target="_blank">Chakra tutorial</a>,
  then you will know we have to encapsulate our whole application into the <code class="language-plaintext highlighter-rouge">&lt;ChakraProvider&gt;</code> JSX tag. Whatever we do inside,
  it can be a regular JSX component, a simple HTML or preferably a <a href="https://chakra-ui.com/docs/components" rel="noopener" target="_blank">Chakra component</a>.</p>
<p>First we need a <code class="language-plaintext highlighter-rouge">&lt;MessageBar&gt;</code> that will show information regarding some JavaScript events. Then we need some greeting text
  represented by the <code class="language-plaintext highlighter-rouge">&lt;Heading&gt;</code> and a <code class="language-plaintext highlighter-rouge">&lt;Form&gt;</code>.</p>
<p>Right now none of them is doing anything. Let’s take a look at the components, and fine tune them.</p>
<h4 id="the-heading">The &lt;Heading&gt;</h4>
<p>The <code class="language-plaintext highlighter-rouge">&lt;Heading&gt;</code> actually is just fine as is:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">const</span> <span class="nx">Heading</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello there!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;)</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>We don’t need to touch, I didn’t have any plan with it other than adding a greeting message.</p>
<h4 id="the-messagebar">The &lt;MessageBar&gt;</h4>
<p>Let’s define the purpose. We can say for example, we want to see the alert notification whenever the window size changes.</p>
<p>To achieve that, we need <em>hooks</em>! We wouldn’t, if we used the <em>React Class Components</em>, but for some unknown reason -  at 
  least it’s unknown for me - the JS world don’t want to hear about classes and methods and private properties and other 
  classical OOP stuffs… They want functions! But a not too long time ago, they faced a situation when they couldn’t use the 
  <em>Class Components’</em> state and lifecycle mechanism, so they invented the <em>HOOKS</em>! I bet, under the hood the hooks are some 
  kind of helluva big cracking, hacking, antipattern pile of stinky junk. But that’s what we have, that’s what we have to use:</p>
<ul>
  <li><em>useState</em> that lets you add React state to function components.</li>
  <li><em>useEffect</em> lets you express different kinds of side effects after a component renders.</li>
</ul>
<p>And also we will need to use the Chakra UI. Create the <code class="language-plaintext highlighter-rouge">src/scripts/components/MessageBar.tsx</code>:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">useState</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">FunctionComponent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Alert</span><span class="p">,</span> <span class="nx">AlertIcon</span><span class="p">,</span> <span class="nx">AlertTitle</span><span class="p">,</span> <span class="nx">AlertDescription</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@chakra-ui/react</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Box</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@chakra-ui/layout</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">MessageBar</span><span class="p">:</span><span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kd">const</span> <span class="p">[[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">],</span> <span class="nx">setWindowSize</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="kr">number</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">([</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Alert</span> <span class="na">id</span><span class="p">=</span><span class="s">"messagebar"</span> <span class="na">status</span><span class="p">=</span><span class="s">"info"</span> <span class="na">variant</span><span class="p">=</span><span class="s">"top-accent"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">AlertIcon</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">Box</span> <span class="na">className</span><span class="p">=</span><span class="s">"chakra-alert__content"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">AlertTitle</span><span class="p">&gt;</span>The browser window is resized<span class="p">&lt;/</span><span class="nc">AlertTitle</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">AlertDescription</span><span class="p">&gt;</span>The window size now is <span class="si">{</span><span class="nx">x</span><span class="si">}</span> x <span class="si">{</span><span class="nx">y</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">AlertDescription</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Box</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Alert</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MessageBar</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, we didn’t add any magic here so far, just getting the window sizes and put them into the <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>
  variables, and we printed them out.</p>
<p>To have the magic work, let’s add the <code class="language-plaintext highlighter-rouge">useEffect</code>:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre>
  </td>
  <td class="rouge-code">
    <pre>    <span class="c1">// ...</span>
    <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">handleResize</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">setWindowSize</span><span class="p">([</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">])</span>
        <span class="p">}</span>

        <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">resize</span><span class="dl">'</span><span class="p">,</span> <span class="nx">handleResize</span><span class="p">)</span>
    
        <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">resize</span><span class="dl">'</span><span class="p">,</span> <span class="nx">handleResize</span><span class="p">)</span>
    <span class="p">},</span> <span class="p">[])</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="c1">// ...</span>
    <span class="p">)</span>
<span class="c1">// ...</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>By default - according to the definition - the <code class="language-plaintext highlighter-rouge">useEffect</code> runs both after the first render and after every update. But 
  in our case we want it to run only once, specifically when the page is rendered. How to do this? Just simply pass an empty 
  array (<code class="language-plaintext highlighter-rouge">[]</code>) as a second argument. This tells React that our effect doesn’t depend on any values from props or state, so 
  it never needs to re-run. And indeed, our effect depends on a window event. We also return the <code class="language-plaintext highlighter-rouge">useEffect</code> with a function. 
  It is the <code class="language-plaintext highlighter-rouge">cleanup function</code>, mainly to avoid memory leaks. Runs automatically, nice to have.</p>
<p>We also want this alert to appear only when the event is triggered. So let’s extend this <code class="language-plaintext highlighter-rouge">useEffect</code> function (showing
  only the additions):</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="kd">const</span> <span class="nx">MessageBar</span><span class="p">:</span><span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">isVisible</span><span class="p">,</span> <span class="nx">setVisibility</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nb">Boolean</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>

    <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="na">timerIds</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="kd">const</span> <span class="nx">handleResize</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">setWindowSize</span><span class="p">([</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">])</span>
            <span class="nx">cancelTimeoutHide</span><span class="p">()</span>
            <span class="nx">showAlertBox</span><span class="p">()</span>
            <span class="nx">timeoutHideAlertBox</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="kd">const</span> <span class="nx">showAlertBox</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">setVisibility</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="kd">const</span> <span class="nx">timeoutHideAlertBox</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">timerIds</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">setVisibility</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span> <span class="mi">1500</span><span class="p">))</span>
        <span class="p">}</span>

        <span class="kd">const</span> <span class="nx">cancelTimeoutHide</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">timerIds</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nb">window</span><span class="p">.</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timerIds</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
            <span class="p">}</span>
            <span class="nx">timerIds</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="p">}</span>

        <span class="c1">// ...</span>
    <span class="p">},</span> <span class="p">[])</span>

    <span class="k">return</span> <span class="nx">isVisible</span> <span class="p">?</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Alert</span> <span class="na">id</span><span class="p">=</span><span class="s">"size-alert"</span> <span class="na">status</span><span class="p">=</span><span class="s">"info"</span> <span class="na">variant</span><span class="p">=</span><span class="s">"top-accent"</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="cm">/* ... */</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Alert</span><span class="p">&gt;</span>
    <span class="p">)</span> <span class="p">:</span> <span class="p">&lt;&gt;&lt;/&gt;</span>
<span class="p">}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So we introduce a new state the <code class="language-plaintext highlighter-rouge">isVisible</code>. This controls whether the alert box “is visible” or not. Wow, what a miracle!
  How? When it’s visible, the component returns the alert box content, otherwise it returns and empty JSX tag, which makes the
  React renderer to remove the box from the source code.</p>
<p>We also added three new methods:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">showAlert</code>: shows the alert box</li>
  <li><code class="language-plaintext highlighter-rouge">timeoutHideAlert</code>: sets timeouts to hide the alert box.</li>
  <li><code class="language-plaintext highlighter-rouge">cancelTimeoutHideAlert</code>: clears the timeouts that were not executed yet.</li>
</ul>
<p>Why do we need array to collect the IDs? It is simply just to give room for more actions here. If you check the 
  <a href="https://github.com/Gixx/worstpractice-react/blob/main/src/scripts/components/MessageBar.tsx" rel="noopener" target="_blank">source code on GitHub</a>,
  you will see, I added another timout to add/remove a class name change that will make some CSS transition effect.</p>
<h4 id="the-form">The &lt;Form&gt;</h4>
<p>The Form. In <a href="/frontend/my-useless-react-app-1">Part 1</a> I set up the specification about the form and what it should be
  capable of. Just to recap, these were:</p>
<ul>
  <li>I need a select box that loads its option values from an endpoint (in this case from a json file)</li>
  <li>I need a text box which content changes depending on the selected dropdown value</li>
  <li>I need a button that changes its style depending on the selected dropdown value</li>
  <li>I need a checkbox that can block the button to change its style</li>
</ul>
<p>For now let’s construct a dummy form component. What can I say? I love dummy things! I’m dummy! Yaaaay!
  Create the <code class="language-plaintext highlighter-rouge">src/scripts/components/Form.tsx</code>:</p>
<div class="language-tsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">FunctionComponent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./Form/style.scss</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">Form</span><span class="p">:</span> <span class="nx">FunctionComponent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span>
<span class="p">{</span>
    <span class="kd">const</span> <span class="nx">SelectBox</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nt">select</span><span class="p">&gt;&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="p">=</span><span class="s">"1"</span><span class="p">&gt;</span>A select box value<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;&lt;/</span><span class="nt">select</span><span class="p">&gt;)</span>
    <span class="kd">const</span> <span class="nx">InputField</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">value</span><span class="p">=</span><span class="s">"An input field value"</span> <span class="p">/&gt;)</span>
    <span class="kd">const</span> <span class="nx">Lock</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nt">label</span><span class="p">&gt;</span>A checkbox to lock state: <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="p">=</span><span class="s">"checkbox"</span> <span class="na">value</span><span class="p">=</span><span class="s">"1"</span> <span class="p">/&gt;&lt;/</span><span class="nt">label</span><span class="p">&gt;)</span>
    <span class="kd">const</span> <span class="nx">Submit</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="p">=</span><span class="s">"submit"</span><span class="p">&gt;</span>A submit button<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;)</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">form</span> <span class="na">id</span><span class="p">=</span><span class="s">'MyForm'</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="nx">event</span> <span class="o">=&gt;</span> <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">SelectBox</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">InputField</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">Lock</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">Submit</span><span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Form</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>You can see, I imported a stylesheet too. That’s a nice way to group together component source with its styles. In the 
  webpack configuration we make sure that the styles won’t be inlined. Honestly I hate when a production code is full of 
  inline styles. Let’s keep it for debugging, and keep the styles in their well deserved own file. To do so, let’s modify the
  <code class="language-plaintext highlighter-rouge">webpack.config.ts</code> file:</p>
<div class="language-typescript highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="k">import</span> <span class="nx">MiniCssExtractPlugin</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mini-css-extract-plugin</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">config</span><span class="p">:</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">Configuration</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="c1">// ...</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">scss|css</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
                <span class="na">use</span><span class="p">:</span> <span class="p">[</span>
                    <span class="nx">MiniCssExtractPlugin</span><span class="p">.</span><span class="nx">loader</span><span class="p">,</span>
                    <span class="p">{</span><span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">css-loader</span><span class="dl">'</span><span class="p">,</span> <span class="na">options</span><span class="p">:</span> <span class="p">{</span><span class="na">importLoaders</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">sourceMap</span><span class="p">:</span> <span class="kc">false</span><span class="p">}},</span>
                    <span class="p">{</span><span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">postcss-loader</span><span class="dl">'</span><span class="p">,</span> <span class="na">options</span><span class="p">:</span> <span class="p">{</span><span class="na">sourceMap</span><span class="p">:</span> <span class="kc">true</span><span class="p">}},</span>
                    <span class="p">{</span><span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sass-loader</span><span class="dl">'</span><span class="p">,</span> <span class="na">options</span><span class="p">:</span> <span class="p">{</span><span class="na">sourceMap</span><span class="p">:</span> <span class="kc">true</span><span class="p">}},</span>
                <span class="p">],</span>
            <span class="p">},</span>
        <span class="p">],</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// ...</span>
        <span class="k">new</span> <span class="nx">MiniCssExtractPlugin</span><span class="p">({</span>
            <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">assets/styles/[name].[contenthash].css</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">chunkFilename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">[id].css</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">}),</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
<span class="c1">// ...</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now create the <code class="language-plaintext highlighter-rouge">src/scripts/components/Form/style.scss</code> file. Notice this stylesheet not under the <code class="language-plaintext highlighter-rouge">src/styles</code>, where we
  have the general <code class="language-plaintext highlighter-rouge">app.scss</code>. With this <code class="language-plaintext highlighter-rouge">import</code> we can make sure it will be included, compiled and minified too. For now
  keep it simple, but you can pimp it up anytime.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nf">#MyForm</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now we have a very basic, no-use form. Let’s pause here for a while, take a breath and play around. In the next article
  we will build the Form’s subcomponents and make the whole thing work. Cheers!</p>
]]></content><author><name>Gábor Iván</name></author><category term="frontend" /><category term="react" /><category term="js" /><category term="webpack" /><category term="typescript" /><category term="chakra" /><summary type="html"><![CDATA[After we have the working development environment, now it's time to create the components to fulfill my criteria I set up previously.]]></summary></entry></feed>
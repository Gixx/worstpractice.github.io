<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-10-25T10:30:25+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Worst Practice</title><subtitle></subtitle><author><name>Gábor Iván</name></author><entry><title type="html">My useless React App, Part 1</title><link href="http://0.0.0.0:4000/frontend/my-useless-react-app-1" rel="alternate" type="text/html" title="My useless React App, Part 1" /><published>2022-10-22T22:00:00+00:00</published><updated>2022-10-25T10:29:12+00:00</updated><id>http://0.0.0.0:4000/frontend/my-useless-react-app-1</id><content type="html" xml:base="http://0.0.0.0:4000/frontend/my-useless-react-app-1"><![CDATA[<h3 id="the-glorious-plans">The glorious plans</h3>
      <p>I thought I know JavaScript enough that to understand React will be a piece of cake. I thought I will adopt the knowledge in no time and
        also mastering the TypeScript to be able to write super strict typed clean code. Well, more or less I was right. I was right that I have some
        knowledge in JavaScript. And basically that’s all.</p>
      <p>But that was not enough. As soon as I realized that I started to look for articles “<em>for dummies</em>” to understand what part of the 
        ECMAScript 6, 7, 8, … 2022 or ES.Next I didn’t know about… well, it was a huge list. Some of them was familiar but didn’t really use, 
        while some of them (like the arrow function) was earned my hate, and I refused to use it any time. What a bad behavior, isn’t it? 
        And of course there were many small but important thing I didn’t know about. So I had to learn them.</p>
      <p>So first I had to reset my bad attitude, and accept the knowledge I refused. Now me and the arrow functions are like Jack Lemon and Walter Matthau
        in the legendary movie, <em>The Odd Couple</em>.</p>
      <h3 id="the-reachable-goals">The reachable goals</h3>
      <p>First of all, I had to set up some goals to reach. These were:</p>
      <ul>
        <li>Use the main <em>React.JS</em> and alternative solutions like, Angular, Vue or Preact etc.</li>
        <li>Use <em>Typescript</em>, to be as strict in typing as possible, and do whatever is necessary to avoid the <code class="language-plaintext highlighter-rouge">any</code>.</li>
        <li>Use <em>SCSS</em>, because it’s a minimum effort to use it in a project like this, and also a logical decision.</li>
        <li>Use an external library for the UIX, but I also should be able to override the behaviour when necessary.</li>
        <li>Use <em>Webpack</em> to hold it all together.</li>
      </ul>
      <h3 id="tldr">TL;DR</h3>
      <p>If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
        <a href="https://github.com/Gixx/worstpractice-react" target="_blank" rel="noopener">GitHub</a>.</p>
      <h3 id="too-long-to-be-in-one-article">Too long to be in one article</h3>
      <p>Honestly I started writing this article already in April, but I was too busy to finish. Meanwhile, I could improve the code a lot.
        For example, the Typescript support and the <a href="https://chakra-ui.com/" target="_blank" rel="noopener">Chakra UI</a> added only
        in the recent days. That’s why now I decided to split up the topic into multiple smaller articles, so I can get better into the
        details and not just throw in some chunks.</p>
      <h3 id="part-1">Part 1.</h3>
      <h4 id="the-application">The application</h4>
      <p>Many people would probably create a market ready product to demonstrate their knowledge. But not me. I create an application
        that is completely useless. It’s purpose to have some common features and use cases work together that are easy to copy and
        paste to a real product later. It will be a kind of proof of concept. So what I want to have here:</p>
      <ul>
        <li>I want a form encapsulated into the React application. For now, it won’t post anywhere.</li>
        <li>I need a select box that loads its option values from an endpoint (in this case from a json file)</li>
        <li>I need a text box which content changes depending on the selected dropdown value</li>
        <li>I need a button that changes its style depending on the selected dropdown value</li>
        <li>I need a checkbox that can block the button to change its style</li>
        <li>I need an alert box to comment some events</li>
      </ul>
      <p>This all looks stupid for the first sight, and for the second too, but if you think about it, these use cases are very common.</p>
      <h4 id="the-folder-structure">The folder structure</h4>
      <p>Okay, now we know what we want, so let’s start working. In the first step we create some folders and files:</p>
      <figure class="a-illustration">
        <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/frontend/my-useless-react-app-1/tree.png" width="252" />
        <figcaption class="a-illustration__caption">Basic folder structure. Icons by <a target="_blank" rel="noopener" href="https://icons8.com">Icons8</a>, generated with <a target="_blank" rel="noopener" href="https://www.jstree.com/">JsTree</a></figcaption>
      </figure>
      <p>I think I don’t have to describe the files and folders, those few who may read this blog probably already know the basics. 
        If not, I can highly recommend the <a href="https://scrimba.com/allcourses?topic=react" target="_blank" rel="noopener">Scrimba</a> website
        where you can find many great courses. There’s even a free course about React that I also used to learn the basics.</p>
      <h4 id="the-start">The start</h4>
      <p>I started this journey already in 2020 during the first wave of the Covid pandemic in Europe. That time the plan was only
        Webpack + React. Unfortunately I didn’t document my work, and now I can’t remember how it started, and what were the tops and 
        flops during the learning process. The first version of the application was so lame and simple, I didn’t feel good enough
        to publish it.</p>
      <p>I needed Webpack + React. So I looked for a working solution on the internet. Webinars, blogs and
        <a href="https://www.stackoverflow.com" target="_blank" rel="noopener">Stackoverflow</a> topics helped a lot. Copied the
        most promising ones, made them work and the job was done. This was basically my starting point, and I assume everybody, who
        used Webpack and React earlier will know how it looks like more or less: Webpack, Babel, React, Sass etc.</p>
      <h4 id="adding-the-typescript">Adding the Typescript</h4>
      <p>On the summer of 2022 I get back to this blogpost. I decided I pimp the application up a bit, and follow the rules
        of the nature by rewrite the whole thing in Typescript.</p>
      <h5 id="packagejson">package.json</h5>
      <p>So the problem for me was that I had to add also the <code class="language-plaintext highlighter-rouge">Typescript</code> to the configuration, and make it work
        together with the React and Webpack. With a fast search I could find the packages I have to add to the <code class="language-plaintext highlighter-rouge">package.json</code>:</p>
      <div class="language-json highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
        </td>
        <td class="rouge-code">
          <pre><span class="p">{</span><span class="w">
  </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@types/fork-ts-checker-webpack-plugin"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~0.4.5"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"@typescript-eslint/eslint-plugin"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~5.40.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"@typescript-eslint/parser"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~5.40.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"fork-ts-checker-webpack-plugin"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~7.2.13"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"prop-types"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~15.8.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ts-node"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~10.9.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typescript"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~4.8.4"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre>
        </td>
      </tr>
    </tbody>
  </table>
</code></pre>
</div>
</div>
<h5 id="webpackconfigts">webpack.config.ts</h5>
<p>For the Webpack, I had to change the extension of the webpack configuration from <code class="language-plaintext highlighter-rouge">.js</code> to <code class="language-plaintext highlighter-rouge">.ts</code> and 
  add/change some settings inside. Not sure, but maybe changing the file extension is optional.</p>
<p>The <code class="language-plaintext highlighter-rouge">entry</code> option changed from <code class="language-plaintext highlighter-rouge">.jsx</code> to the Typescript equivalent <code class="language-plaintext highlighter-rouge">.tsx</code>:</p>
<div class="language-typescript highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nx">entry</span><span class="p">:</span> <span class="nx">pathSrc</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/scripts/app.tsx</span><span class="dl">'</span><span class="p">,</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Then the module rules needed some Typescript support (both <code class="language-plaintext highlighter-rouge">.ts</code> and <code class="language-plaintext highlighter-rouge">.tsx</code> along with <code class="language-plaintext highlighter-rouge">.js</code> and <code class="language-plaintext highlighter-rouge">.jsx</code>) by adding a new 
  preset to the <code class="language-plaintext highlighter-rouge">babel-loader</code>:</p>
<div class="language-typescript highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kr">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">rules</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">ts|js</span><span class="se">)</span><span class="sr">x</span><span class="se">?</span><span class="sr">$/</span><span class="p">,</span>
            <span class="na">exclude</span><span class="p">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
            <span class="na">use</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">babel-loader</span><span class="dl">'</span><span class="p">,</span>
                <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
                    <span class="na">presets</span><span class="p">:</span> <span class="p">[</span>
                        <span class="dl">'</span><span class="s1">@babel/preset-env</span><span class="dl">'</span><span class="p">,</span>
                        <span class="dl">'</span><span class="s1">@babel/preset-react</span><span class="dl">'</span><span class="p">,</span>
                        <span class="dl">'</span><span class="s1">@babel/preset-typescript</span><span class="dl">'</span><span class="p">,</span>
                    <span class="p">],</span>
                <span class="p">},</span>
            <span class="p">},</span>
        <span class="p">},</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Changed the <code class="language-plaintext highlighter-rouge">resolve</code> setting to catch the new extensions:</p>
<div class="language-typescript highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nx">resolve</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.tsx</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.ts</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">],</span>
<span class="p">},</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>And in the end adding a new plugin that runs TypeScript type checker:</p>
<div class="language-typescript highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nx">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">ForkTsCheckerWebpackPlugin</span><span class="p">({</span>
        <span class="na">async</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="tsconfigjson">tsconfig.json</h5>
<p>Then I added the <code class="language-plaintext highlighter-rouge">tsconfig.json</code> to the project. For what this file is, and what its purpose, read the 
  <a target="_blank" rel="noopener" href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">official documentation</a>.
  My configuration has a few extra options compared to the documentation:</p>
<div class="language-json highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"dom"</span><span class="p">,</span><span class="w"> </span><span class="s2">"dom.iterable"</span><span class="p">,</span><span class="w"> </span><span class="s2">"esnext"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"allowJs"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"skipLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"esModuleInterop"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es6"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"declaration"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"forceConsistentCasingInFileNames"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"emitDecoratorMetadata"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"resolveJsonModule"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"isolatedModules"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noEmit"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"jsx"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typeRoots"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"node_modules/@types"</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"src/scripts"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"exclude"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"node_modules"</span><span class="p">,</span><span class="w"> </span><span class="s2">"src/styles"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Unfortunately I have no idea, which blog I get these settings from, and why they are good or necessary.</p>
<h4 id="checking">Checking</h4>
<p>To check if all these changes work well, I made a dummy application that simply outputs a “Hello World”.</p>
<p>First we need a template. In the configuration we can add the <code class="language-plaintext highlighter-rouge">HTMLWebpackPlugin</code> to define and deal with it:</p>
<div class="language-typescript highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">React + Webpack test</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="nx">pathSrc</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/template.html</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// template file</span>
    <span class="na">filename</span><span class="p">:</span> <span class="nx">pathBuild</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/index.html</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// output file</span>
<span class="p">}),</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Great. Now let’s see our super simple template content:</p>
<div class="language-html highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"x-ua-compatible"</span> <span class="na">content=</span><span class="s">"ie=edge"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;&lt;</span><span class="err">%=</span> <span class="na">htmlWebpackPlugin.options.title</span> <span class="err">%</span><span class="nt">&gt;&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Note that we basically did nothing here, just give a sane minimal frame for out application. We don’t even include any
  JavaScript or CSS files. The only strange part is the title, where we insert a configuration value. The same we defined 
  for the <code class="language-plaintext highlighter-rouge">HTMLWebpackPlugin</code>. But this template is empty so far, so create the dummy application. To do so, create the 
  <code class="language-plaintext highlighter-rouge">app.tsx</code> file in the <code class="language-plaintext highlighter-rouge">src/scripts</code> folder with the following content:</p>
<div class="language-jsx highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-dom</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#root</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Hello World<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;,</span>
    <span class="nx">app</span>
<span class="p">)</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Yes, for the moment now it’s “only” a React code, but don’t forget: it will go through the Typescript parser. And if there’s
  no error during the build, then we can assume it’s working.</p>
<p>If you run the <code class="language-plaintext highlighter-rouge">npm run start</code> command, you should see the Hello World in the browser.</p>
<p>With this flimsy explanation and lame tutorial I finish the first part. In the next article I will show the different components,
  and will write about the difficulties I faced, and also the features I learned and adopted.</p>
]]></content><author><name>Gábor Iván</name></author><category term="frontend" /><category term="react" /><category term="js" /><category term="webpack" /><category term="typescript" /><category term="chakra" /><summary type="html"><![CDATA[A developer needs to develop. Not only as an everyday job, but also in knowledge. And since I am not really interested in the DevOps way, I looked at my other beloved part, the Frontend. So I said “It's better later than never” and started to learn React.]]></summary></entry><entry><title type="html">How to get the last modified file from an S3 Bucket?</title><link href="http://0.0.0.0:4000/backend/get-the-last-modified-file-from-s3-bucket" rel="alternate" type="text/html" title="How to get the last modified file from an S3 Bucket?" /><published>2021-04-06T16:15:00+00:00</published><updated>2022-10-05T19:13:18+00:00</updated><id>http://0.0.0.0:4000/backend/get-the-last-modified-file-from-s3-bucket</id><content type="html" xml:base="http://0.0.0.0:4000/backend/get-the-last-modified-file-from-s3-bucket"><![CDATA[<h3 id="tldr">TL;DR</h3>
  <p>If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
    <a href="https://github.com/Gixx/worstpractice-aws-s3-adapter" target="_blank" rel="noopener">GitHub</a>.</p>
  <h3 id="requirement">Requirement</h3>
  <p>First, it must be nailed down, if you need this regularly, probably it’s better to create a RDS table where you can do such
    queries easily and in a cost/CPU/time effective way.</p>
  <p>This method is the opposite. It gets the full list from an S3 bucket, and then sort and filter on the local backend. Far from 
    optimal.</p>
  <p>I assume those looking for this code snippet has already some kind of access to the <a target="_blank" rel="noopener" href="https://aws.amazon.com/s3/">Amazon S3</a>
    and also has the keys and credentials for the AWS SDK S3 Client script to access it from their application.</p>
  <h3 id="the-adapter">The Adapter</h3>
  <p>I’m a PHP developer, so I will show how to do this in PHP. First I define some constants that we will need later:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">WorstPractice\Component\Aws\S3</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Adapter</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">AWS_DEFAULT_LIST_LIMIT</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">const</span> <span class="no">OBJECT_SORT_BY_NAME</span> <span class="o">=</span> <span class="s1">'^Key'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">OBJECT_SORT_BY_NAME_DESC</span> <span class="o">=</span> <span class="s1">'vKey'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">OBJECT_SORT_BY_DATE</span> <span class="o">=</span> <span class="s1">'^LastModified'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">OBJECT_SORT_BY_DATE_DESC</span> <span class="o">=</span> <span class="s1">'vLastModified'</span><span class="p">;</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The <code class="language-plaintext highlighter-rouge">AWS_DEFAULT_LIST_LIMIT</code> is the default value the <code class="language-plaintext highlighter-rouge">MaxKeys</code> limiter of the requested list. If there are more objects 
  in the given S3 bucket, it will return chunks. I believe the developers at AWS know why this value is the best, so I didn’t 
  change it. If I make it smaller, the more chunks I have to request, if I make it bigger it may hit the response time. So 
  the default limit is just fine.</p>
<p>Then I defined four constants for control the sorting. By default the objects are returned sorted in an ascending order 
  of the respective key names in the list, and currently there’s no official AWS way to change this sort. So we have to do 
  it locally.</p>
<p>I don’t like to put too complex logic to determine the key and sort direction, so I mixed the two using some semi-visual
  markers. Before the key name, I use either <code class="language-plaintext highlighter-rouge">^</code> or <code class="language-plaintext highlighter-rouge">v</code> to know if it’s a ascending (<code class="language-plaintext highlighter-rouge">^</code> or “up”) or a descending (<code class="language-plaintext highlighter-rouge">v</code> or 
  down) order.</p>
<h4 id="the-constructor">The constructor</h4>
<p>To <strong>instantiate</strong> the adapter, we need to pass the AWS S3 Client object, so it can communicate with the AWS when needed.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">//...</span>

<span class="kn">use</span> <span class="nc">Aws\S3\S3Client</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Adapter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">private</span> <span class="nc">S3Client</span> <span class="nv">$s3Client</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>I love the new features of the PHP8, for example this constructor property promotion simplifies a lot on the code.</p>
<h4 id="specify-the-bucket">Specify the bucket</h4>
<p>To <strong>use</strong> the different S3 Client actions, in most cases we need to specify the <strong>bucket</strong> we want to work with. To avoid
  unnecessary parameters, and assuming that one wants to work on the same bucket, we decouple this setting from the
  constructor into a separate public method:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">Adapter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    
    <span class="k">private</span> <span class="kt">string</span> <span class="nv">$bucket</span><span class="p">;</span>
    
    <span class="c1">// ...</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="n">setBucket</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$bucket</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bucket</span> <span class="o">=</span> <span class="nv">$bucket</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="get-the-buckets-object-list">Get the bucket’s object list</h4>
<p>In an S3 bucket we don’t talk about files, we talk about objects. An object holds various metadata like ID, key, date of 
  modification, the filesize etc. That’s why the sorting is so difficult, and if you need a frequently used sorting, I yet 
  again recommend You to create a table in a relational database to solve it there.</p>
<p>To get the <code class="language-plaintext highlighter-rouge">last modified file from an S3 Bucket</code> we need to do four things:</p>
<ol>
  <li>set up the search options and additionally change the sort and limit arguments</li>
  <li>get the full bucket object list (filtered by prefix)</li>
  <li>apply the sorting on the full list (sort by “date modified” in descending order)</li>
  <li>get the first element and return the object’s key that we need to get the file.</li>
</ol>
<p>It looks as the following:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">Adapter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="n">getObjectListByPrefix</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$keyPrefix</span><span class="p">,</span> <span class="kt">string</span> <span class="nv">$sortBy</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="nv">$options</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getSearchOptions</span><span class="p">(</span><span class="nv">$keyPrefix</span><span class="p">,</span> <span class="nv">$sortBy</span><span class="p">,</span> <span class="nv">$limit</span><span class="p">);</span>

        <span class="nv">$results</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">fetchFullFileList</span><span class="p">(</span><span class="nv">$options</span><span class="p">);</span>
        <span class="c1">// Avoid sort if not needed.</span>
        <span class="nv">$sortBy</span> <span class="o">!==</span> <span class="k">self</span><span class="o">::</span><span class="no">OBJECT_SORT_BY_NAME</span> <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">sortFileList</span><span class="p">(</span><span class="nv">$results</span><span class="p">,</span> <span class="nv">$sortBy</span><span class="p">);</span>
        <span class="c1">// Avoid limit if not needed.</span>
        <span class="nv">$limit</span> <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">limitFileList</span><span class="p">(</span><span class="nv">$results</span><span class="p">,</span> <span class="nv">$limit</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$results</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>First we setup the basic options array for the request. If we use the default sort by value, we can skip the expensive 
  process of custom sorting on PHP side. Also if the limit is equal to zero, we can skip the additional method call.</p>
<p>Now let’s see the these methods</p>
<h4 id="the-search-options">The search options</h4>
<p>Here we set up the basic options array, and if necessary change the <code class="language-plaintext highlighter-rouge">$sortBy</code> and <code class="language-plaintext highlighter-rouge">$limit</code> parameters:</p>
<ul>
  <li>If the sortBy was not set, set the default one. I could have added a constant for it, but didn’t feel necessary.</li>
  <li>If the limit is a negative number, we consider it as a soft mistake and use the absolute value of it. I could have 
    use the negative limit to control the direction of the sort, but it would have added an unnecessary complexity.</li>
</ul>
<p>Then we check if the given sort-by parameter is the default AWS S3 sorting. We can use this information to add an AWS 
  side result limiter, and if the limit is lower than the default AWS list limit (<code class="language-plaintext highlighter-rouge">MaxKeys</code>). It’s good for the performance.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">Adapter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">private</span> <span class="k">function</span> <span class="n">getSearchOptions</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$keyPrefix</span><span class="p">,</span> <span class="kt">?string</span> <span class="o">&amp;</span><span class="nv">$sortBy</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="nv">$limit</span><span class="p">):</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="nv">$options</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s1">'Bucket'</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bucket</span><span class="p">,</span>
            <span class="s1">'EncodingType'</span> <span class="o">=&gt;</span> <span class="s1">'url'</span><span class="p">,</span>
            <span class="s1">'Prefix'</span> <span class="o">=&gt;</span> <span class="nv">$keyPrefix</span><span class="p">,</span>
            <span class="s1">'RequestPayer'</span> <span class="o">=&gt;</span> <span class="s1">'requester'</span>
        <span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$sortBy</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$sortBy</span> <span class="o">=</span> <span class="k">self</span><span class="o">::</span><span class="no">OBJECT_SORT_BY_NAME</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$limit</span> <span class="o">=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$limit</span><span class="p">);</span>

        <span class="c1">// We can add a query limit here only when we don't want any special sorting.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$sortBy</span> <span class="o">===</span> <span class="k">self</span><span class="o">::</span><span class="no">OBJECT_SORT_BY_NAME</span> <span class="o">&amp;&amp;</span> <span class="nv">$limit</span> <span class="o">&lt;</span> <span class="k">self</span><span class="o">::</span><span class="no">AWS_DEFAULT_LIST_LIMIT</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$options</span><span class="p">[</span><span class="s1">'MaxKeys'</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$limit</span><span class="p">;</span>
            <span class="c1">// Set the parameter to 0 to avoid the unnecessary array_chunk later.</span>
            <span class="nv">$limit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$options</span><span class="p">;</span>
    <span class="p">}</span>   
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Note, we added a <code class="language-plaintext highlighter-rouge">Prefix</code> index to the options. In an S3 bucket the <em>prefix</em> is something like a path on the filesystem. 
  Generally it can be anything that is part of the beginning of the object’s key, but with slashes (<code class="language-plaintext highlighter-rouge">/</code>), the S3 console on
  the AWS website will consider them as “folders”. This will help a lot when we request file list under a specific “sub-folder”.</p>
<h4 id="the-requester">The requester</h4>
<p>Here we communicate with the AWS through the S3 Client provided by the AWS SDK. In this method we have to heavily build
  on the <a target="_blank" rel="noopener" href="https://docs.aws.amazon.com/aws-sdk-php/v3/api/class-Aws.S3.S3Client.html">SDK documentation</a>, 
  So we have to believe what is written there:</p>
<ul>
  <li>It there is no result, then the <code class="language-plaintext highlighter-rouge">Contents</code> index is empty in the response array.</li>
  <li>Otherwise the all the required indexes <strong>must</strong> exist.</li>
</ul>
<p>Getting a full bucket list is a little bit tricky. We need to keep requesting the AWS, until we get all the objects, then
  merge the results into one array.</p>
<p>To achieve this, the best option is the <code class="language-plaintext highlighter-rouge">do ... while</code> loop.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">Adapter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    
    <span class="k">private</span> <span class="k">function</span> <span class="n">fetchFullFileList</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$options</span><span class="p">):</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="nv">$results</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="nv">$continuationToken</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>

        <span class="k">do</span> <span class="p">{</span>
            <span class="nv">$options</span><span class="p">[</span><span class="s1">'ContinuationToken'</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$continuationToken</span><span class="p">;</span>

            <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">s3Client</span><span class="o">-&gt;</span><span class="nf">listObjectsV2</span><span class="p">(</span><span class="nv">$options</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$response</span><span class="p">[</span><span class="s1">'Contents'</span><span class="p">]))</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$results</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$response</span><span class="p">[</span><span class="s1">'Contents'</span><span class="p">];</span>
            <span class="nv">$continuationToken</span> <span class="o">=</span> <span class="nv">$response</span><span class="p">[</span><span class="s1">'NextContinuationToken'</span><span class="p">];</span>
            <span class="nv">$isTruncated</span> <span class="o">=</span> <span class="nv">$response</span><span class="p">[</span><span class="s1">'IsTruncated'</span><span class="p">];</span>
            <span class="nb">usleep</span><span class="p">(</span><span class="mi">50000</span><span class="p">);</span> <span class="c1">// 50 ms pause to avoid CPU spikes</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nv">$isTruncated</span><span class="p">);</span>

        <span class="k">return</span> <span class="nb">array_merge</span><span class="p">([],</span> <span class="mf">...</span><span class="nv">$results</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>I’m always happy when I can use a <code class="language-plaintext highlighter-rouge">do ... while</code>, it’s a kind of rare occasion.</p>
<p>In the loop we get actual portion of the list. The <code class="language-plaintext highlighter-rouge">ContinuationToken</code> tells the AWS where it should continue the listing.
  For the first time, this token is empty, so the AWS will start in the beginning. In the response we get the 
  <code class="language-plaintext highlighter-rouge">NextContinuationToken</code> which points to the next portion. We call again the AWS with this token unless the <code class="language-plaintext highlighter-rouge">isTruncated</code>
  flag is <code class="language-plaintext highlighter-rouge">TRUE</code> which means we reached the end of the list.</p>
<p>A general rule is to avoid <code class="language-plaintext highlighter-rouge">array_merge</code> within loops. Then how to collect all the data into a list without it or adding
  another loop, like <code class="language-plaintext highlighter-rouge">foreach</code>? Here is an optimization advice:</p>
<blockquote>
  <p>Collect the result arrays into an array, and after the loop simple merge them with the help of the <strong>splat
      operator</strong>.</p>
</blockquote>
<p>Actually this part:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nb">array_merge</span><span class="p">([],</span> <span class="mf">...</span><span class="nv">$results</span><span class="p">);</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Here we use the <code class="language-plaintext highlighter-rouge">splat operator</code> (<code class="language-plaintext highlighter-rouge">...</code>) for “unpacking the argument”. Since we are sure that every element of the <code class="language-plaintext highlighter-rouge">$results</code>
  array are arrays too, we can bravely unpack it and pass all its items (arrays) to the <code class="language-plaintext highlighter-rouge">array_merge</code>. But since we need 
  to explicitly add two arrays, we use an empty array as a starting. The <code class="language-plaintext highlighter-rouge">array_merge</code> then merges all the arrays within 
  the <code class="language-plaintext highlighter-rouge">$results</code> with this empty array, and what we get is the full object list on an AWS S3 bucket starting with a specific 
  prefix.</p>
<h4 id="the-sorter">The sorter</h4>
<p>The next method is the <code class="language-plaintext highlighter-rouge">sortFileList</code>. We call it only when want other than the default sort.
  This method gives us a great opportunity to practice the custom sorting ability of PHP. First we need to check if we 
  need ascending or descending sort. As I wrote earlier, the first character should tell this. To avoid mistakes, we can 
  add a simple validator for the available sorting values too.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">Adapter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    
    <span class="k">private</span> <span class="kt">array</span> <span class="nv">$validSortByKeys</span> <span class="o">=</span> <span class="p">[</span>
        <span class="k">self</span><span class="o">::</span><span class="no">OBJECT_SORT_BY_NAME</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">OBJECT_SORT_BY_NAME_DESC</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">OBJECT_SORT_BY_DATE</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">OBJECT_SORT_BY_DATE_DESC</span><span class="p">,</span>
    <span class="p">];</span>
    
    <span class="c1">// ...</span>
    
    <span class="k">private</span> <span class="k">function</span> <span class="n">sortFileList</span><span class="p">(</span><span class="kt">array</span> <span class="o">&amp;</span><span class="nv">$fileList</span><span class="p">,</span> <span class="kt">?string</span> <span class="nv">$sortBy</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$fileList</span><span class="p">)</span> <span class="o">||</span> <span class="nb">empty</span><span class="p">(</span><span class="nv">$sortBy</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$sortBy</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">validSortByKeys</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$direction</span> <span class="o">=</span> <span class="nv">$sortBy</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">'^'</span> <span class="o">?</span> <span class="s1">'asc'</span> <span class="o">:</span> <span class="s1">'desc'</span><span class="p">;</span>
        <span class="nv">$sortByKey</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$sortBy</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

        <span class="k">return</span> <span class="nb">usort</span><span class="p">(</span><span class="nv">$fileList</span><span class="p">,</span> <span class="k">static</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$direction</span><span class="p">,</span> <span class="nv">$sortByKey</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$cmp</span> <span class="o">=</span> <span class="nb">strcmp</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="nv">$sortByKey</span><span class="p">],</span> <span class="nv">$b</span><span class="p">[</span><span class="nv">$sortByKey</span><span class="p">]);</span>
            <span class="k">return</span> <span class="nv">$direction</span> <span class="o">===</span> <span class="s1">'asc'</span> <span class="o">?</span> <span class="nv">$cmp</span> <span class="o">:</span> <span class="o">-</span><span class="nv">$cmp</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">}</span>    
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>If you are not familiar with the custom sort in PHP, this is how it works. The <a target="_blank" rel="noopener" href="https://www.php.net/manual/en/function.usort.php"><code class="language-plaintext highlighter-rouge">usort</code></a>
  function gets the array that needs to be sorted as a reference parameter. This means the function will change the parameter 
  itself and doesn’t return a new version of it as other array functions do like the <a target="_blank" rel="noopener" href="https://www.php.net/manual/en/function.array-replace.php"><code class="language-plaintext highlighter-rouge">array_replace</code></a>.</p>
<p>The second parameter is a callback function, that gets two actual elements from the array. We don’t need to know where are
  these placed in the original array, the <code class="language-plaintext highlighter-rouge">usort</code> calls this, not us. We only need to define the logic, that decides the 
  relation between the two items. Return <code class="language-plaintext highlighter-rouge">-1</code> if the first argument is considered to be respectively less than, <code class="language-plaintext highlighter-rouge">0</code> if it is 
  equal to, or <code class="language-plaintext highlighter-rouge">1</code> if it is greater than the second parameter.</p>
<p>With the <code class="language-plaintext highlighter-rouge">use</code> statement, we can “inject” variables into the function’s scope. This way we can control if the “greater”
  should be <code class="language-plaintext highlighter-rouge">1</code> or <code class="language-plaintext highlighter-rouge">-1</code> therefore apply the ascending and descending order without an extra <code class="language-plaintext highlighter-rouge">array_reverse</code> call.</p>
<h4 id="the-result-limiter">The result limiter</h4>
<p>This is the simplest: the result must be an array. If it’s not empty, then just chunk the array into pieces with the size
  of the <code class="language-plaintext highlighter-rouge">limit</code> and return the first chunk.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">Adapter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    
    <span class="k">private</span> <span class="k">function</span> <span class="n">limitFileList</span><span class="p">(</span><span class="kt">array</span> <span class="o">&amp;</span><span class="nv">$fileList</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$limit</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$fileList</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$limit</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$fileList</span> <span class="o">=</span> <span class="nb">array_chunk</span><span class="p">(</span><span class="nv">$fileList</span><span class="p">,</span> <span class="nv">$limit</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>

        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="get-the-last-modified-files-key">Get the last modified file’s key</h4>
<p>After having the method getting the full list sorted and chunked, the base problem of this topic is as simple as is:
  calling our method with the right parameters. Or we can create a method just for this special case.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">Adapter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="n">getLastUploadedKeyByPrefix</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$keyPrefix</span><span class="p">):</span> <span class="kt">?string</span>
    <span class="p">{</span>
        <span class="nv">$object</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getObjectListByPrefix</span><span class="p">(</span><span class="nv">$keyPrefix</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">OBJECT_SORT_BY_DATE_DESC</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$object</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s1">'Key'</span><span class="p">]</span> <span class="o">??</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>This will return a string with the file’s key on the S3 bucket, or <code class="language-plaintext highlighter-rouge">NULL</code> if the bucket with the given prefix is empty.
  You can also create a method that downloads the file from the S3 bucket, but let it be a homework.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="php" /><category term="aws" /><category term="s3-bucket" /><summary type="html"><![CDATA[Recently I had to make my hands dirty with the AWS S3, and I faced a problem of getting the latest/newest file from a bucket with PHP.]]></summary></entry><entry><title type="html">DIY Dependency Injection Container, Part 3</title><link href="http://0.0.0.0:4000/backend/diy-dependency-injection-container-3" rel="alternate" type="text/html" title="DIY Dependency Injection Container, Part 3" /><published>2020-06-19T16:20:00+00:00</published><updated>2022-10-05T19:13:18+00:00</updated><id>http://0.0.0.0:4000/backend/diy-dependency-injection-container-3</id><content type="html" xml:base="http://0.0.0.0:4000/backend/diy-dependency-injection-container-3"><![CDATA[<p>In the <a rel="prev" href="/backend/diy-dependency-injection-container-2" title="DIY Dependency Injection Container, Part 2">previous part</a>, 
    we defined the structure of the configuration data, and planned the behaviour we want our DI to follow.</p>
  <h3 id="tldr">TL;DR</h3>
  <p>If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
    <a href="https://github.com/Gixx/worstpractice-dependency-injection" target="_blank" rel="noopener">GitHub</a>.</p>
  <h3 id="to-tdd-or-not-to-tdd">to TDD or not to TDD?</h3>
  <p>This is always a question. Hardcore, fanatical, pop eyed far-side coders will hate me when I say: TDD is not for everyone and is not for every
    code. TDD requires a different thinking, a different learning path. For example for me, I’m not yet able to understand how can I do anything in
    TDD way. I hope in the future it will change, because a new knowledge always makes me better. I believe TDD helps when you are on the start grid
    and you know what the goal is but you don’t know yet the way to reach it. Like being in the dark room, and you see the exit sign bright in the distance, 
    but everything else is dark, so you have to feel the way with your feet to avoid traps, and roadblocks.</p>
  <p>But now it’s not a dark room. I know the goal, and I clearly see the path. Maybe there will be traps hidden, but I will try to cover not only the happy 
    path with tests. Not coding in TDD way doesn’t mean I don’t write tests. Test are not only important but ought to be mandatory.</p>
  <h3 id="the-di-class">The DI class</h3>
  <p>Note: Because the class will probably be long, I will add here only the fragments I will talk about and won’t include the whole actual source.</p>
  <h4 id="declaration-preparation">Declaration, preparation</h4>
  <p>In part one I wrote very enthusiastically on the strict types, so this should be the first thing we declare, then we implement the Interface too.</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">WorstPractice\Component\DependencyInjection</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Container</span> <span class="kd">implements</span> <span class="nc">ContainerInterface</span>
<span class="p">{</span>
    <span class="cd">/**
     * @var array The full raw configuration data
     */</span>
    <span class="k">private</span> <span class="kt">array</span> <span class="nv">$configuration</span><span class="p">;</span>

    <span class="cd">/**
     * Container constructor.
     *
     * @param array $configuration
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$configuration</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">configuration</span> <span class="o">=</span> <span class="nv">$configuration</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Returns true if the given service is registered.
     *
     * @param  string $identifier
     * @return bool
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">has</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
    
    <span class="p">}</span>

    <span class="cd">/**
     * Gets a service instance.
     *
     * @param  string $identifier
     * @return object
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">get</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">):</span> <span class="kt">object</span>
    <span class="p">{</span>
    
    <span class="p">}</span>

    <span class="cd">/**
     * Register a service object instance into the container.
     *
     * @param  string $identifier
     * @param  object $serviceInstance
     * @param  bool   $isShared
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">set</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">,</span> <span class="kt">object</span> <span class="nv">$serviceInstance</span><span class="p">,</span> <span class="kt">bool</span> <span class="nv">$isShared</span> <span class="o">=</span> <span class="kc">true</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
    
    <span class="p">}</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So what we have here? We created the frame of our DI class. Declare the namespace and the class, implement our DI interface
  which is an extension of the <code class="language-plaintext highlighter-rouge">Psr\Container\ContainerInterface</code>. We added a constructor method that accepts an array with the configuration
  data. It’s a raw data, so basically it can hold anything, no validation added yet.</p>
<p>In part one I already wrote about my problem with the strict types when you implement an interface which doesn’t that strict.
  So the methods defined in the <code class="language-plaintext highlighter-rouge">Psr\Container\ContainerInterface</code> unfortunately are without proper parameter types.</p>
<h4 id="additional-storage-properties">Additional storage properties</h4>
<p>The methods are still empty, but before filling them, take a step back and let’s think, what we need:</p>
<ul>
  <li>We need an internal storage for the parsed config, let’s call it Service Library.</li>
</ul>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre>  <span class="cd">/**
   * @var array The instantiation-ready library with all necessary data.
   */</span>
  <span class="k">private</span> <span class="kt">array</span> <span class="nv">$serviceLibrary</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<ul>
  <li>We need an internal storage for the instantiated services, this is the Service Container.</li>
</ul>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * @var array The instantiated services.
 */</span>
<span class="k">private</span> <span class="kt">array</span> <span class="nv">$serviceContainer</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The Service Container is a simple key-value array, where the key is the service identifier and the value is the service instance.</p>
<p>The Service Library is a bit complex. It’s a parsed version of the raw configuration data. Like for the Service Container, the key
  here is the service identifier, and the value is an array similar to the configuration. First we create some constants to always
  refer the correct key and don’t have to deal with accidental, hidden typos:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="k">const</span> <span class="no">SERVICE_CLASS</span> <span class="o">=</span> <span class="s1">'class'</span><span class="p">;</span>
<span class="k">private</span> <span class="k">const</span> <span class="no">SERVICE_ARGUMENTS</span> <span class="o">=</span> <span class="s1">'arguments'</span><span class="p">;</span>
<span class="k">private</span> <span class="k">const</span> <span class="no">SERVICE_METHOD_CALL</span> <span class="o">=</span> <span class="s1">'calls'</span><span class="p">;</span>
<span class="k">private</span> <span class="k">const</span> <span class="no">SERVICE_SHARE</span> <span class="o">=</span> <span class="s1">'shared'</span><span class="p">;</span>
<span class="k">private</span> <span class="k">const</span> <span class="no">SERVICE_INHERIT</span> <span class="o">=</span> <span class="s1">'inherits'</span><span class="p">;</span>
<span class="k">private</span> <span class="k">const</span> <span class="no">SERVICE_INITIALIZED</span> <span class="o">=</span> <span class="s1">'initialized'</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Mostly they are the same as in the configuration, except the <code class="language-plaintext highlighter-rouge">SERVICE_INITIALIZED</code> which is there to flag that we already instantiated a service.</p>
<h3 id="the-has-method">The <code class="language-plaintext highlighter-rouge">has</code> method</h3>
<p>After this how can we decide whether a service exists or not? Or with other words, how we check whether the DI has a service or not?
  The answer is pretty simple. The DI has a service if:</p>
<ul>
  <li>the service is instantiated and registered into the Service Container.</li>
  <li>the service is not instantiated yet but registered into the Service Library.</li>
  <li>the service is not registered into any internal storage but exists in the raw configuration or the it’s a loadable class.</li>
</ul>
<p>Be clean and simple, create three additional checker methods to cover these cases:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * Checks if the service has been already registered into the container
 *
 * @param string $identifier
 * @return bool
 */</span>
<span class="k">private</span> <span class="k">function</span> <span class="n">isServiceRegisteredIntoContainer</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">bool</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceContainer</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]);</span>
<span class="p">}</span>

<span class="cd">/**
 * Checks if the service has been already registered into the library
 *
 * @param string $identifier
 * @return bool
 */</span>
<span class="k">private</span> <span class="k">function</span> <span class="n">isServiceRegisteredIntoLibrary</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">bool</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]);</span>
<span class="p">}</span>

<span class="cd">/**
 * Checks if the service name is a valid class, or it's in the raw configuration.
 *
 * @param string $identifier
 * @return bool
 */</span>
<span class="k">private</span> <span class="k">function</span> <span class="n">isServiceRegistrableIntoLibrary</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">bool</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nb">class_exists</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">)</span> <span class="o">||</span> <span class="k">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">configuration</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now we have these beauties, we can finish the <code class="language-plaintext highlighter-rouge">has</code> method:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * Returns true if the given service is registered.
 *
 * @param  string $identifier
 * @return bool
 */</span>
<span class="k">public</span> <span class="k">function</span> <span class="n">has</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">):</span> <span class="kt">bool</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceRegisteredIntoContainer</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">)</span>
        <span class="o">||</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceRegisteredIntoLibrary</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">)</span>
        <span class="o">||</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceRegistrableIntoLibrary</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>If we code like this, we can keep the <a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">Cyclomatic complexity</a>
  low, and after we cover them with unit tests, also the <acronym title="Change Risk Anti Pattern">CRAP</acronym> Score.</p>
<h3 id="the-set-method">The <code class="language-plaintext highlighter-rouge">set</code> method</h3>
<p>Let’s continue with the <code class="language-plaintext highlighter-rouge">set</code> method since it’s almost as simple as the <code class="language-plaintext highlighter-rouge">has</code>. The <code class="language-plaintext highlighter-rouge">get</code> will be the most complex, so leave it last.
  The <code class="language-plaintext highlighter-rouge">set</code> method basically injects an instance into the container, so instead of building up an instance from the configuration, we go
  the opposite way and build up the configuration from the instance. What question need to asked first? This:</p>
<ul>
  <li>What should happen if a service with the given identifier already exists?</li>
</ul>
<p>Well, I am a guy who is not afraid of raise errors when there is a use case we don’t want to allow. So my answer is: throw an exception.</p>
<p>And again to reduce complexity, first create another checker method:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * Checks if the service has been already initialized.
 *
 * @param  string $identifier
 * @return bool
 */</span>
<span class="k">private</span> <span class="k">function</span> <span class="n">isServiceInitialized</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">bool</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">][</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_INITIALIZED</span><span class="p">]</span> <span class="o">??</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So the <code class="language-plaintext highlighter-rouge">set</code> method will look like:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * Register a service object instance into the container.
 *
 * @param  string $identifier
 * @param  object $serviceInstance
 * @param  bool   $isShared
 * @throws RuntimeException
 */</span>
<span class="k">public</span> <span class="k">function</span> <span class="n">set</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">,</span> <span class="kt">object</span> <span class="nv">$serviceInstance</span><span class="p">,</span> <span class="kt">bool</span> <span class="nv">$isShared</span> <span class="o">=</span> <span class="kc">true</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="c1">// Check if the service is initialized already.</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceInitialized</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="p">(</span>
            <span class="nb">sprintf</span><span class="p">(</span><span class="s1">'Another service with this identifier (%s) is already initialized.'</span><span class="p">,</span> <span class="nv">$identifier</span><span class="p">)</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Register service.</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceContainer</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$serviceInstance</span><span class="p">;</span>

    <span class="c1">// Overwrite any previous settings.</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_INITIALIZED</span> <span class="o">=&gt;</span> <span class="kc">true</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_ARGUMENTS</span> <span class="o">=&gt;</span> <span class="p">[],</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_METHOD_CALL</span> <span class="o">=&gt;</span> <span class="p">[],</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_SHARE</span> <span class="o">=&gt;</span> <span class="nv">$isShared</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_CLASS</span> <span class="o">=&gt;</span> <span class="nb">get_class</span><span class="p">(</span><span class="nv">$serviceInstance</span><span class="p">),</span>
    <span class="p">];</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p><strong>Note:</strong> in PHP 8.0 we will be able to use <code class="language-plaintext highlighter-rouge">$serviceInstance::class</code> instead of <code class="language-plaintext highlighter-rouge">get_class($serviceInstance)</code>.</p>
<p>I was not sure which of my most used exceptions fits here best:</p>
<ul>
  <li>RuntimeException</li>
  <li>InvalidArgumentException</li>
  <li>OutOfBoundsException</li>
</ul>
<p>Of course I could introduce new exceptions too, but frankly I am not big fan of unnecessarily create files. The built-in 
  exception classes are more than enough to cover any cases. So why we don’t use them? Ok, I agree there’s a beauty in throw
  an <code class="language-plaintext highlighter-rouge">OhNoAnotherIdiotUsesMyCodeWithoutReadingTheFuckingManualException</code>, but hey… Do we really win anything with it? I guess no.
  We can add error codes for the exceptions if we want to target them more precisely.</p>
<h3 id="the-get-method">The <code class="language-plaintext highlighter-rouge">get</code> method</h3>
<p>This one is a beast, with sometimes weird and twisted logic. The goal is simple: if we have the given service registered, return its
  instance or throw an exception otherwise. But since it’s the most crucial part of the whole DI, let’s stop again to summarize
  the problems we need to face and solve.</p>
<p>This DI follows a “<em>build-on-the-fly</em>” strategy:</p>
<ul>
  <li>Do not parse the configuration until a service is not requested.</li>
  <li>Register the corresponding service configuration into the Service Library, resolve inheritance to have all the information prepared
    for the instantiation.</li>
  <li>Check the class arguments and the method call arguments for other service references and initialized them first.</li>
  <li>Initialize the service and register it into the Service Container.</li>
</ul>
<h4 id="what-pitfalls-we-need-to-handle">What pitfalls we need to handle?</h4>
<h5 id="reference-loops">Reference loops</h5>
<ul>
  <li>Inheritance loop: when services reference each other as they are inherited from:</li>
</ul>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'form.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'inherits'</span> <span class="o">=&gt;</span> <span class="s1">'shared.form.service'</span><span class="p">,</span>
        <span class="s1">'shared'</span> <span class="o">=&gt;</span> <span class="kc">false</span>
    <span class="p">],</span>
    <span class="s1">'shared.form.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'inherits'</span> <span class="o">=&gt;</span> <span class="s1">'form.service'</span><span class="p">,</span>
        <span class="s1">'shared'</span> <span class="o">=&gt;</span> <span class="kc">true</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<ul>
  <li>Argument Reference loop: when services reference each other. Even one service can reference itself on configuration level:</li>
</ul>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'form.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="nc">Namespace\To\Form\Service</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
        <span class="s1">'arguments'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">'form.service'</span>
        <span class="p">],</span>
        <span class="s1">'calls'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="p">[</span><span class="s1">'addSubForm'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'form.service'</span><span class="p">]]</span>
        <span class="p">],</span>       
        <span class="s1">'shared'</span> <span class="o">=&gt;</span> <span class="kc">true</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<ul>
  <li>Mixed variations of the two cases above.</li>
</ul>
<h5 id="invalid-configuration-data">Invalid configuration data</h5>
<ul>
  <li>Missing or invalid class constructor arguments.</li>
  <li>Missing or invalid called method arguments.</li>
  <li>Reference to a non existing class.</li>
  <li>Reference to a non existing method to call.</li>
  <li>Other semantic errors in the configuration data.</li>
</ul>
<p>So in the first place we need to build the line of defense. To deal with the different reference loop cases we will introduce a
  new internal storage to store all the services which are involved in the current retrieval. Let’s call it simply Loop Detector.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * @var array An array to to detect reference loops.
 */</span>
<span class="k">private</span> <span class="kt">array</span> <span class="nv">$referenceLoopDetector</span> <span class="o">=</span> <span class="p">[];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>When we handle references we also use the same <code class="language-plaintext highlighter-rouge">get</code> logic for the referenced classes. But since we can’t change the <code class="language-plaintext highlighter-rouge">get</code> method’s 
  declaration to add proper type hinting, I prefer to create a new method:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * Gets a service instance.
 *
 * @param  string $identifier
 * @return object
 */</span>
<span class="k">public</span> <span class="k">function</span> <span class="n">get</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">):</span> <span class="kt">object</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getFromContainer</span><span class="p">((</span><span class="n">string</span><span class="p">)</span> <span class="nv">$identifier</span><span class="p">);</span>
<span class="p">}</span>

<span class="cd">/**
 * @param string $identifier
 * @return object
 */</span>
<span class="k">private</span> <span class="k">function</span> <span class="n">getFromContainer</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">object</span>
<span class="p">{</span>

<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, the public entry point remain the <code class="language-plaintext highlighter-rouge">get</code> method which simply proxies the call to an internal function with
  casting the parameter. In the <code class="language-plaintext highlighter-rouge">getFromContainer</code> to save time and resources the first thing we must do is to check the loop:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * @param string $identifier
 * @throws RuntimeException
 * @return object
 */</span>
<span class="k">private</span> <span class="k">function</span> <span class="n">getFromContainer</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">object</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">referenceLoopDetector</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="p">(</span>
            <span class="nb">sprintf</span><span class="p">(</span><span class="s1">'Reference loop detected! Reference chain: %s'</span><span class="p">,</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">' -&gt; '</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">referenceLoopDetector</span><span class="p">))</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">referenceLoopDetector</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$identifier</span><span class="p">;</span>

    <span class="c1">// Todo retrieve the service instance or throw exception.</span>
    
    <span class="nb">array_pop</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">referenceLoopDetector</span><span class="p">);</span>
    
    <span class="c1">// Todo return the service instance.</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>If we have a loop in a reference node, the process must be stopped and throw an exception. Otherwise we add 
  the identifier to the loop detector, then process config, instantiate the service, whatever. Then, before return the service 
  instance, we remove the identifier from the loop detector, to allow already used references on other nodes starting from this level.</p>
<p>To extend my language skills with some visual explanation, I made a shitty illustration to demonstrate the valid and invalid 
  reference:</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2020/backend/diy-dependency-injection-container-3/references.png" width="700" />
  <figcaption class="a-illustration__caption">Valid and invalid references</figcaption>
</figure>
<p>In this example referencing <code class="language-plaintext highlighter-rouge">Service C</code> twice is valid, as they are on different nodes, but referencing <code class="language-plaintext highlighter-rouge">Service A</code> again will throw an error.
  If we split this up, we can instantiate <code class="language-plaintext highlighter-rouge">Service C</code> alone, and <code class="language-plaintext highlighter-rouge">Service B</code> (with <code class="language-plaintext highlighter-rouge">Service C</code> in the argument), but we can never instantiate
  <code class="language-plaintext highlighter-rouge">Service A</code> and <code class="language-plaintext highlighter-rouge">Service D</code>…</p>
<h4 id="return-the-service-or-die">Return the service or die</h4>
<p>This <code class="language-plaintext highlighter-rouge">getFromContainer</code> will do nothing else, just prepare the service, and get it back if it exists. It can return in two ways:</p>
<ul>
  <li>the same instance for the same identifier every time</li>
  <li>a new instance for the same identifier every time</li>
</ul>
<p>For the second option I prefer to use the <code class="language-plaintext highlighter-rouge">clone</code> technique, because we can benefit from the use of <code class="language-plaintext highlighter-rouge">__clone</code> magic method, which is
  much better than re-instantiate a class every time. The way of return controlled by the <code class="language-plaintext highlighter-rouge">shared</code> configuration option.</p>
<p>If the service does not exist, we simply throw an exception. There’s always a big argument about the good behaviour: in case of not
  find something is a <code class="language-plaintext highlighter-rouge">return null</code> or an Exception. I would say it always depends on the context. In this case I would prefer the exception, 
  because it’s not a database query controlled by user input to list something, and it can happen that there will be no result for the 
  search expressions. No.</p>
<p>In this case we <strong>must</strong> have a result. If the configuration is wrong, or the autoloader is not configured well, or some PHP extension is
  not loaded, and we want the DI to return the given instance, then it’s a big fucking exception when it can’t.</p>
<p>So here we go:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * @param string $identifier
 * @throws RuntimeException
 * @return object
 */</span>
<span class="k">private</span> <span class="k">function</span> <span class="n">getFromContainer</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">object</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">referenceLoopDetector</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$identifier</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceRegisteredIntoLibrary</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">OutOfBoundsException</span><span class="p">(</span>
            <span class="nb">sprintf</span><span class="p">(</span><span class="s1">'The given service (%s) is not defined service or class name.'</span><span class="p">,</span> <span class="nv">$identifier</span><span class="p">)</span>
        <span class="p">);</span>
    <span class="p">}</span>
    
    <span class="nb">array_pop</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">referenceLoopDetector</span><span class="p">);</span>

    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">][</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_SHARE</span><span class="p">]</span>
        <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceContainer</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]</span>
        <span class="o">:</span> <span class="k">clone</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceContainer</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">];</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>That is all nice, but if you remember I wrote that we build the library on the fly. So in this for the DI won’t return 
  anything, since it’s still empty. So it’s time to dig deeper in the hole, and prepare the service.</p>
<h4 id="preparing-the-service">Preparing the service</h4>
<p>Preparing the service is a two step check:</p>
<ol>
  <li>If the service is not yet in the Service Library, then register it.</li>
  <li>If the service in the Service Library but not in the Container, then add it to the container.</li>
</ol>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="k">function</span> <span class="n">getFromContainer</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">object</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">referenceLoopDetector</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$identifier</span><span class="p">;</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">prepareService</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">);</span> <span class="c1">// &lt;-- the new thing here</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceRegisteredIntoLibrary</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">// exception</span>
    <span class="p">}</span>
    
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">function</span> <span class="n">prepareService</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="c1">// Not registered in the library but it's a valid class name, or it's in the raw configuration: register.</span>
    <span class="k">if</span> <span class="p">(</span>
        <span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceRegisteredIntoLibrary</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">)</span>
        <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceRegistrableIntoLibrary</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">)</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">registerServiceToLibrary</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Registered in the library but not in the container, so register it there too.</span>
    <span class="k">if</span> <span class="p">(</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceRegisteredIntoLibrary</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">)</span>
        <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isServiceRegisteredIntoContainer</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">)</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">registerServiceToContainer</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, for the checks we use those methods we already used for the <code class="language-plaintext highlighter-rouge">has</code> method.</p>
<h5 id="register-the-service-into-the-container">Register the service into the Container.</h5>
<p>I start this one, because it’s the simpler one. Register a service into the container means:</p>
<ul>
  <li>Resolve the class constructor argument references</li>
  <li>Instantiate the given service with the arguments</li>
  <li>Resolve the argument references for the methods to be called</li>
  <li>Call the methods</li>
  <li>Save the instance into the Container</li>
  <li>Mark the service as initialized in the Service Library</li>
</ul>
<p>Sound complex first, but it ain’t. Let’s go step-by-step.</p>
<h6 id="1-resolve-argument-references">1. Resolve argument references</h6>
<p>Here we just pass the configured arguments array to a new function (always focus on to reduce complexity), then we just 
  iterate through this list, and when the give key in the array is numeric, we try to get the service for it, otherwise
  just simply store the value. In the end, return the new argument list with the resolved references.</p>
<p>Do you remember the <a href="/backend/diy-dependency-injection-container-2#indexes">previous part</a> when I explained the
  way I will separate literal argument values from the service references? Here it is.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="k">function</span> <span class="n">registerServiceToContainer</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="c1">// Check arguments.</span>
    <span class="nv">$argumentList</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">setArgumentListReferences</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">][</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_ARGUMENTS</span><span class="p">]);</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">function</span> <span class="n">setArgumentListReferences</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$argumentList</span><span class="p">):</span> <span class="kt">array</span>
<span class="p">{</span>
    <span class="nv">$resolvedArgumentList</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$argumentList</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Numeric keys marks reference values</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">is_numeric</span><span class="p">(</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getFromContainer</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="nv">$resolvedArgumentList</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$resolvedArgumentList</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Later, when we will prepare the Service Library, we will make sure that the structure is always consistent, so here and now 
  we don’t have to check whether the indexes are existing, because they are.</p>
<h6 id="2-instantiate-the-service">2. Instantiate the service</h6>
<p>Earlier every framework and library used that annoying <code class="language-plaintext highlighter-rouge">ReflectionClass</code> to workaround the problem of passing arguments to the
  constructor, but since PHP 5.6 already we can use an array as arguments with the <code class="language-plaintext highlighter-rouge">... $args</code> syntax. Brilliant. We will just do it:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="k">function</span> <span class="n">registerServiceToContainer</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="c1">// Check arguments.</span>
    <span class="c1">// $argumentList = ...</span>

    <span class="c1">// Create new instance.</span>
    <span class="nv">$className</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">][</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_CLASS</span><span class="p">];</span>
    <span class="nv">$serviceInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$className</span><span class="p">(</span><span class="mf">...</span><span class="nv">$argumentList</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Again, when we will prepare the Service Library later, the value under the <code class="language-plaintext highlighter-rouge">self::SERVICE_CLASS</code> index will always be a validated
  classname, and not an alias.</p>
<h6 id="3-call-methods-after-service-instantiation">3. Call methods after service instantiation</h6>
<p>If you remember, in the <a href="/backend/diy-dependency-injection-container-2#post-init-calls">previous part</a> I described
  how the method call list must be structured. Every element must contain the method name, and its argument list.</p>
<p>So we have to iterate through on this list, check if the method exists, and handle its arguments the same way we did for the 
  class constructor, then perform the call.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="k">function</span> <span class="n">registerServiceToContainer</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$serviceInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$className</span><span class="p">(</span><span class="mf">...</span><span class="nv">$argumentList</span><span class="p">);</span>

    <span class="c1">// Perform post init method calls.</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">][</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_METHOD_CALL</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$methodCallList</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$method</span> <span class="o">=</span> <span class="nv">$methodCallList</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">method_exists</span><span class="p">(</span><span class="nv">$serviceInstance</span><span class="p">,</span> <span class="nv">$method</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="p">(</span>
                <span class="nb">sprintf</span><span class="p">(</span><span class="s1">'The method "%s::%s" does not exist or not public.'</span><span class="p">,</span> <span class="nv">$className</span><span class="p">,</span> <span class="nv">$method</span><span class="p">)</span>
            <span class="p">);</span>
        <span class="p">}</span>

        <span class="nv">$methodArgumentList</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">setArgumentListReferences</span><span class="p">(</span><span class="nv">$methodCallList</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">??</span> <span class="p">[]);</span>
        <span class="nv">$serviceInstance</span><span class="o">-&gt;</span><span class="nv">$method</span><span class="p">(</span><span class="mf">...</span><span class="nv">$methodArgumentList</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>If the method does not exist, we again throw an exception. Anyway it will be a fatal error (<code class="language-plaintext highlighter-rouge">Throwable</code>), if the configuration
  is wrong and we pass too few arguments, or with wrong type, order etc.</p>
<h6 id="4-register-the-instance-into-the-container">4. Register the instance into the Container</h6>
<p>… and mark it as initialized in the Library.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="k">function</span> <span class="n">registerServiceToContainer</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="c1">// Register service.</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceContainer</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$serviceInstance</span><span class="p">;</span>

    <span class="c1">// Mark as initialized.</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">][</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_INITIALIZED</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="register-the-service-into-the-library">Register the service into the Library.</h5>
<p>As the last brick in our beautiful house is to build the library. This means:</p>
<ul>
  <li>Parse the raw config and prepare the values.</li>
  <li>Resolve configuration inheritance. And detect inheritance loops.</li>
  <li>Validate the service class belongs to the identifier. Also handle the case when the identifier itself a valid class.</li>
  <li>Fill missing information with defaults.</li>
</ul>
<h6 id="1-parse-the-config">1. Parse the config</h6>
<p>Because we go deeper and deeper, and try to keep the code as clean as possible, we again start the “Register…” function
  with a call to another method to collect data. This method is the <code class="language-plaintext highlighter-rouge">getServiceConfiguration</code>:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/**
 * @var array An intermediate store for partially prepared data.
 */</span>
<span class="k">private</span> <span class="kt">array</span> <span class="nv">$serviceConfiguration</span><span class="p">;</span>

<span class="k">private</span> <span class="k">function</span> <span class="n">registerServiceToLibrary</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="nv">$serviceConfiguration</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getServiceConfiguration</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">function</span> <span class="n">getServiceConfiguration</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">array</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceConfiguration</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceConfiguration</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="c1">// In case of classes without config, we provide an empty array</span>
    <span class="nv">$configuration</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">configuration</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]</span> <span class="o">??</span> <span class="p">[];</span>

    <span class="c1">// Resolve inheritance.</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">resolveInheritance</span><span class="p">(</span><span class="nv">$configuration</span><span class="p">,</span> <span class="nv">$identifier</span><span class="p">);</span>

    <span class="c1">// Save the configuration.</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceConfiguration</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$configuration</span><span class="p">;</span>

    <span class="k">return</span> <span class="nv">$configuration</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>First we check if we already have a half-ready data in the new, temporary storage: <code class="language-plaintext highlighter-rouge">serviceConfiguration</code>. This is a half-ready state 
  between the raw configuration and the Service Library. Why we need this? Just for safety. We should never mess up the raw configuration, 
  and we should never store half-ready information in the Service Library. We can call it temp data if you like.</p>
<p>So if we already have this temp data for the given service, we return it. If we don’t, then  pick up the raw configuration for the give
  service and go on. It’s no problem, if we don’t have a configuration for the requested class, until the identifier is an instantiable 
  class, and the object can be created without arguments. Otherwise we will throw an exception in the <code class="language-plaintext highlighter-rouge">getFromContainer</code>
  <a href="#preparing-the-service">as I wrote earlier</a>.</p>
<h6 id="2-resolve-the-inheritance">2. Resolve the inheritance</h6>
<p>The <code class="language-plaintext highlighter-rouge">getServiceConfiguration</code> will call the <code class="language-plaintext highlighter-rouge">resolveInheritance</code> method, which will modify the temporary config data if needed.
  Let’s see, how it does:</p>
<ul>
  <li>Check if there’s inheritance configuration for the service at all. No means no change.</li>
  <li>Check if the inheritance doesn’t get into a loop. Yes means exception.</li>
  <li>Get the configuration of the parent service.</li>
  <li>Overwrite the parent’s copied configuration with the given ones.</li>
  <li>Set the class name definition if not given.</li>
</ul>
<p>This whole concept will look like this. It’s a bigger code sample, but makes no sense to split into more calls. Only to reduce the 
  complexity I put the inheritance loop check into a different method.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="kt">array</span> <span class="nv">$inheritanceLoopDetector</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">private</span> <span class="k">function</span> <span class="n">resolveInheritance</span><span class="p">(</span><span class="kt">array</span> <span class="o">&amp;</span><span class="nv">$configuration</span><span class="p">,</span> <span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$configuration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_INHERIT</span><span class="p">]))</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">checkForInheritanceLoop</span><span class="p">(</span><span class="nv">$configuration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_INHERIT</span><span class="p">],</span> <span class="nv">$identifier</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">inheritanceLoopDetector</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$identifier</span><span class="p">;</span>
    <span class="nv">$parentConfiguration</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getServiceConfiguration</span><span class="p">(</span><span class="nv">$configuration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_INHERIT</span><span class="p">]);</span>

    <span class="c1">// not needed any more</span>
    <span class="nb">unset</span><span class="p">(</span><span class="nv">$configuration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_INHERIT</span><span class="p">]);</span>

    <span class="c1">// Overwrite the parent service's config with the current service's config</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$configuration</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$parentConfiguration</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// If the class name is not explicitly defined but the identifier is a valid class name,</span>
    <span class="c1">// the inherited class name should be overwritten.</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$configuration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_CLASS</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nb">class_exists</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">))</span> <span class="p">{</span>
        <span class="nv">$parentConfiguration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_CLASS</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$identifier</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nv">$configuration</span> <span class="o">=</span> <span class="nv">$parentConfiguration</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">function</span> <span class="n">checkForInheritanceLoop</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$parentIdentifier</span><span class="p">,</span> <span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$parentIdentifier</span> <span class="o">===</span> <span class="nv">$identifier</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="p">(</span>
            <span class="nb">sprintf</span><span class="p">(</span><span class="s1">'Self referencing is not allowed: %s'</span><span class="p">,</span> <span class="nv">$identifier</span><span class="p">),</span>
            <span class="mi">1004</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">inheritanceLoopDetector</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="p">(</span>
            <span class="nb">sprintf</span><span class="p">(</span><span class="s1">'Inheritance loop detected for service: %s'</span><span class="p">,</span> <span class="nv">$identifier</span><span class="p">),</span>
            <span class="mi">1005</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>To detect an inheritance loop, we add a new class property <code class="language-plaintext highlighter-rouge">inheritanceLoopDetector</code> and it works the same way as the 
  <code class="language-plaintext highlighter-rouge">referenceLoopDetector</code>. But here, we dont need to remove the added identifier before the end of the function, because
  at once we discover only one and exactly one node. No support for multi-inheritance yet.</p>
<p>So we passed the checks, then we get the parent’s configuration. There’s a recursion, - as the <code class="language-plaintext highlighter-rouge">getServiceConfiguration</code>
  calls the <code class="language-plaintext highlighter-rouge">resolveInheritance</code> and it calls the <code class="language-plaintext highlighter-rouge">getServiceConfiguration</code> back and so on. And that’s why we need to loop detection,
  to avoid the infinite loops.</p>
<p>When we have the parent’s configuration data, we iterate through on the current service’s config and overwrite anything 
  in the parent config we explicitly set for our service. Except the <code class="language-plaintext highlighter-rouge">self::SERVICE_INHERIT</code> key. The parent configuration
  for sure doesn’t have this key, since it’s already finished this resolve process.</p>
<p>And to handle the weird case when the class name is not explicitly defined but the service identifier is a valid class name, then
  we should overwrite the inherited class name too.</p>
<p>So the inheritance chain is resolved, the class definition is corrected, we are ready to register the service into the Library. 
  Almost.</p>
<h6 id="3-validate-service-class-name">3. Validate service class name</h6>
<p>Let’s get back to the <code class="language-plaintext highlighter-rouge">registerServiceToLibrary</code> method. After we have the service configuration, we can check if the class
  we have defined there is a valid, instantiable class or not. If not, as before we throw an exception.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="k">function</span> <span class="n">registerServiceToLibrary</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="nv">$serviceConfiguration</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getServiceConfiguration</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">);</span>
    <span class="nv">$className</span> <span class="o">=</span> <span class="nv">$serviceConfiguration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_CLASS</span><span class="p">]</span> <span class="o">??</span> <span class="nv">$identifier</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">class_exists</span><span class="p">(</span><span class="nv">$className</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="p">(</span>
            <span class="nb">sprintf</span><span class="p">(</span><span class="s1">'The resolved class "%s" cannot be found.'</span><span class="p">,</span> <span class="nv">$className</span><span class="p">)</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h6 id="4-register-service-into-the-library">4. Register service into the library</h6>
<p>Now we have all the information to register the service to the Service Library.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">private</span> <span class="k">function</span> <span class="n">registerServiceToLibrary</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceLibrary</span><span class="p">[</span><span class="nv">$identifier</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_INITIALIZED</span> <span class="o">=&gt;</span> <span class="kc">false</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_CLASS</span> <span class="o">=&gt;</span> <span class="nv">$className</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_ARGUMENTS</span> <span class="o">=&gt;</span> <span class="nv">$serviceConfiguration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_ARGUMENTS</span><span class="p">]</span> <span class="o">??</span> <span class="p">[],</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_METHOD_CALL</span> <span class="o">=&gt;</span> <span class="nv">$serviceConfiguration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_METHOD_CALL</span><span class="p">]</span> <span class="o">??</span> <span class="p">[],</span>
        <span class="k">self</span><span class="o">::</span><span class="no">SERVICE_SHARE</span> <span class="o">=&gt;</span> <span class="nv">$serviceConfiguration</span><span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">SERVICE_SHARE</span><span class="p">]</span> <span class="o">??</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">];</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Of course we set the <code class="language-plaintext highlighter-rouge">self::SERVICE_INITIALIZED</code> flag to <code class="language-plaintext highlighter-rouge">false</code> until the service instance is not really created. The
  rest of the information are either already there, so it’s a simple assignment, or just fall back to defaults.</p>
<p>And pretty much that’s is.</p>
<h3 id="code-quality">Code quality</h3>
<p>In the beginning of this article I wrote that for this development I don’t need TDD. And yet, during write the article, I 
  had to modify the working code several times, add new unit test cases. So in fact I was wrong. And in fact when I had once an
  idea of a “maybe fail” use case, I definitely wrote the unit test first for it to see if it really fails. And when it did, 
  I improved the code. So in the end <strong>I fuckin’ did TDD!</strong> Hell yeah.</p>
<p>But unit tests are one thing. I tried to keep my code clean and nice all the time, and I used a bunch of tool to help me 
  achieve this noble goal:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">phplint</code> to detect syntax errors.</li>
  <li><code class="language-plaintext highlighter-rouge">PHP Mess Detector</code> to detect the mess (hahahaha).</li>
  <li><code class="language-plaintext highlighter-rouge">PHP Code Sniffer</code> to validate against <a target="_blank" rel="noopener" href="https://www.php-fig.org/psr/psr-12/">PSR-12</a>.</li>
  <li><code class="language-plaintext highlighter-rouge">CS-Fixer</code> to automatically fix code style glitches.</li>
  <li><code class="language-plaintext highlighter-rouge">PHP Unit</code> to verify my theory and find failures in the logic.</li>
  <li><code class="language-plaintext highlighter-rouge">PHPStan</code> turned up to level 7 check, to make sure my code can’t be any better.</li>
  <li><code class="language-plaintext highlighter-rouge">PHP7.4 docker image</code> to run all these tests</li>
</ul>
<p>Unfortunately the latest <code class="language-plaintext highlighter-rouge">PHPStan</code> started crying if I use array as a parameter or a return type, and I don’t super precisely define
  it’s structure in the PHPDoc. I understand the concept behind the idea, it’s just simply don’t work in this case. So I ignore these checks:</p>
<div class="language-plaintext highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre>    ignoreErrors:
        - '#return type has no value type specified in iterable type array#'
        - '#with no value type specified in iterable type array#'
        - '#type specified in iterable type (array|iterable)#'
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="conclusion">Conclusion</h3>
<p>It was a fun to create this simple and small DI class. But even if it works well - I am pretty sure about that - I don’t recommend to
  use it in production, because I will probably won’t maintain it too long. I made it for practice, to improve my skill and to 
  do something I can write about in this blog.</p>
<p>You can get the full source code with the unit tests and docker setup and instruction at 
  <a href="https://github.com/Gixx/worstpractice-dependency-injection" target="_blank" rel="noopener">GitHub</a>.</p>
<p>I hope, you enjoyed this mini series, maybe others will follow.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="php74" /><category term="dic" /><category term="clean-code" /><summary type="html"><![CDATA[It's time to finish our simple dependency injection container, and see if it works as expected.]]></summary></entry><entry><title type="html">DIY Dependency Injection Container, Part 2</title><link href="http://0.0.0.0:4000/backend/diy-dependency-injection-container-2" rel="alternate" type="text/html" title="DIY Dependency Injection Container, Part 2" /><published>2020-05-12T08:37:00+00:00</published><updated>2022-10-05T19:13:18+00:00</updated><id>http://0.0.0.0:4000/backend/diy-dependency-injection-container-2</id><content type="html" xml:base="http://0.0.0.0:4000/backend/diy-dependency-injection-container-2"><![CDATA[<p>In the <a rel="prev" href="/backend/diy-dependency-injection-container" title="DIY Dependency Injection Container, Part 1">previous part</a>, we talked about software engineering principles,
    about the dependency injection and its benefits, and we started to create our own implementation. We’ve finished with the
    Interface so far. In this article we will configuration the configuration data.</p>
  <h3 id="tldr">TL;DR</h3>
  <p>If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
    <a href="https://github.com/Gixx/worstpractice-dependency-injection" target="_blank" rel="noopener">GitHub</a>.</p>
  <h3 id="choose-the-right-weapon">Choose the right weapon</h3>
  <p>You have probably met with the world wide popular <acronym title="YAML Ain't Markup Language">YAML</acronym> file format. If not,
    then I tell you that the YAML is a human friendly data serialization standard for all programming languages. It can look
    something like this:</p>
  <div class="language-yaml highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="na">services</span><span class="pi">:</span>
  <span class="na">queue</span><span class="pi">:</span>
    <span class="na">class</span><span class="pi">:</span> <span class="s">\Namespace\To\Messaging\Queue</span>
    <span class="na">arguments</span><span class="pi">:</span> 
      <span class="pi">-</span> <span class="s1">'</span><span class="s">%config.host%'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">%config.user%'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">%config.password%'</span>

  <span class="na">queue.builder</span><span class="pi">:</span>
    <span class="na">class</span><span class="pi">:</span> <span class="s">\Namespace\To\Messaging\Queue\Builder</span>
    <span class="na">public</span><span class="pi">:</span> <span class="no">false</span>

  <span class="na">some.spooky.service</span><span class="pi">:</span>
    <span class="na">class</span><span class="pi">:</span> <span class="s">\Namespace\To\Spooky\Service</span>
    <span class="na">factory</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">@queue.builder'</span><span class="pi">,</span> <span class="nv">queue</span><span class="pi">]</span>
    <span class="na">calls</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">someMethod</span><span class="pi">,</span> <span class="pi">[</span><span class="s1">'</span><span class="s">some</span><span class="nv"> </span><span class="s">parameter'</span><span class="pi">]]</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>In general, that would be good for us. But unfortunately it ain’t. Because the PHP has no native support for it. Now I 
  see five options to choose from:</p>
<ol>
  <li>Use the Symfony package, that supports the latest YAML 1.2 standard.</li>
  <li>Use the <acronym title="PHP Extension Community Library">PECL</acronym> extension, that supports only the YAML 1.1 standard.</li>
  <li>Use another third-party PHP library.</li>
  <li>Write our own YAML parser.</li>
  <li>Give a damn and use associative arrays.</li>
</ol>
<p>Well, we already discussed in the previous part, that we don’t want to use any third-party libraries, so option 1 and 3 fell off. 
  Maybe we can’t add PECL extensions to our current setup, so option 2 also fell off. Write an own parser? Waste time to 
  create a complex a codebase that covers the full YAML standard and we maybe don’t even need the half of the YAML’s knowledge?
  And when we think about it, in the end, deep inside all the parsers the whole thing will end up in an average associative 
  array or Iterable class. Then why should we waste our time on this?</p>
<h4 id="pros-of-the-array-based-configuration">Pros of the array-based configuration</h4>
<ul>
  <li>No need to parse: better performance, lower memory consumption. Theoretically.</li>
  <li>It’s raw PHP, you don’t have to learn another syntax.</li>
  <li>You can add closures, which I really hate, but many developers love closures, so it’s a benefit.</li>
</ul>
<h4 id="cons-of-the-array-based-configuration">Cons of the array-based configuration</h4>
<ul>
  <li>The return types probably won’t be recognized by the IDE.</li>
  <li>Difficult to overview the structure.</li>
  <li>For multiple configurations we have to take care of their proper merge.</li>
</ul>
<h3 id="define-the-required-structure">Define the required structure</h3>
<p>In the previous section the YAML code is a perfect example to draw inspiration from it. It describes a clean 
  structure with several behaviours that we will try more or less copy. The YAML is good for many things and not only 
  for dependency injections, which in the most common use-case (Symfony of course) defined under the <code class="language-plaintext highlighter-rouge">services</code> block. 
  But since our configuration will be a PHP array, and we want it to use only for the DI, we skip this level:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1">// services</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="service-identifier">Service identifier</h4>
<p>A service identifier is a string of characters. Oh GOD, you didn’t belive it, did you? It can be a fantasy name as well 
  as a real class name including the <code class="language-plaintext highlighter-rouge">::class</code> constant:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'fantasy service name'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>
    <span class="s2">"</span><span class="se">\\</span><span class="s2">Namespace</span><span class="se">\\</span><span class="s2">To</span><span class="se">\\</span><span class="s2">MyClass"</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>
    <span class="err">\</span><span class="nc">Namespace\To\Another\Service</span><span class="o">::</span><span class="n">class</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The identifiers are the first level keys in the configuration array.</p>
<h4 id="class-reference">Class reference</h4>
<p>A second level key, with single string value. It is a class name or class constant string that points to an instantiatable 
  class. If the service identifier already points to such class, then this sub-key is optional.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="err">\</span><span class="nc">Namespace\To\MyService</span><span class="o">::</span><span class="n">class</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// no need the 'class` key here</span>
    <span class="p">],</span>
    <span class="err">\</span><span class="nc">Namespace\To\Some\ServiceInterface</span><span class="o">::</span><span class="n">class</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="err">\</span><span class="nc">Namespace\To\Some\Service</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="s2">"</span><span class="se">\\</span><span class="s2">Namespace</span><span class="se">\\</span><span class="s2">To</span><span class="se">\\</span><span class="s2">AbstractService"</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="err">\</span><span class="nc">Namespace\To\Another\Service</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
    <span class="p">],</span>   
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>This class reference can’t point to another service identifier, because that would be some kind of inheritance, and we
  will handle it in a separate key to make the DIC more fool-proof. So the following code should raise an error:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// WRONG !!!</span>
<span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'some.service'</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="err">\</span><span class="nc">Namespace\To\Some\Service</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="err">\</span><span class="nc">Namespace\To\Some\ServiceInterface</span><span class="o">::</span><span class="n">class</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="s1">'some.service'</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="class-constructor-arguments">Class constructor arguments</h4>
<p>Of course the dependency injection makes no sense, when all our services are simple objects without any initial data.
  Yes, we can use <code class="language-plaintext highlighter-rouge">setters</code> instead of constructor arguments, but I think it should be a matter of our own taste. 
  Both the constructor arguments and the setter methods have tops and flops, I won’t discriminate one for the other. I 
  used to keep myself to a simple rule: under a sane amount of parameters I prefer to use constructor arguments.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="err">\</span><span class="nc">Namespace\To\Some\ServiceInterface</span><span class="o">::</span><span class="n">class</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="err">\</span><span class="nc">Namespace\To\Some\Service</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
        <span class="s1">'arguments'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">'some parameter'</span>
        <span class="p">],</span>       
    <span class="p">],</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>That’s all nice, but we want to <strong>inject</strong> classes too. How to separate scalar values from service references? Let’s
  suppose we have the following class:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kn">namespace</span> <span class="nn">Namespace\To\My\Service</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Namespace\To\Some\Service</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">MakesNoSense</span> <span class="p">{</span>
    <span class="cd">/** @var string */</span>
    <span class="k">private</span> <span class="nv">$serviceIdentifier</span><span class="p">;</span>
    <span class="cd">/** @var SomeService */</span>
    <span class="k">private</span> <span class="nv">$service</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$serviceIdentifier</span><span class="p">,</span> <span class="kt">Service</span> <span class="nv">$service</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">serviceIdentifier</span> <span class="o">=</span> <span class="nv">$serviceIdentifier</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">service</span> <span class="o">=</span> <span class="nv">$service</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>…and we have the corresponding config:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'some.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="nc">Namespace\To\Some\Service</span><span class="o">::</span><span class="n">class</span>
    <span class="p">],</span>
    <span class="nc">Namespace\To\My\Service\MakesNoSense</span><span class="o">::</span><span class="n">class</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'arguments'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">'some.service'</span><span class="p">,</span>
            <span class="s1">'some.service'</span>
        <span class="p">]</span>   
    <span class="p">]</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>… then how we should write our DIC to handle this case?</p>
<ul>
  <li>We can use Reflection class to find out the parameter types, but that would go too far, and would make the code 
    unnecessarily complex. And maybe slow too.</li>
  <li>We could use some special character (like <code class="language-plaintext highlighter-rouge">@</code>) to mark class references, as they do in the Symfony YAML configs:
    <div class="language-yaml highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
      </td>
      <td class="rouge-code">
        <pre>  <span class="na">services</span><span class="pi">:</span>
      <span class="na">makes.no.sense.service</span><span class="pi">:</span>
          <span class="na">class</span><span class="pi">:</span> <span class="s">\Namespace\To\Service\MakesNoSense</span>
          <span class="na">arguments</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s1">'</span><span class="s">some.service'</span>
              <span class="pi">-</span> <span class="s1">'</span><span class="s">@some.service'</span>
</pre>
      </td>
    </tr>
  </tbody>
</table>
</code></pre>
</div>
    </div>
<p>… but this would require an extra <code class="language-plaintext highlighter-rouge">substr</code> or <code class="language-plaintext highlighter-rouge">strpos</code> check.</p>
</li>
<li>Or we can use a straightforward trick to mark which parameter is scalar and which is not.</li>
</ul>
<p>Let’s think about the third option. What do we have in PHP that can differentiate two identical values in an array?</p>
<h5 id="indexes">INDEXES!</h5>
<p>What’s more: <strong>associative indexes</strong>. And since class names are more-or-less self descriptive parameter values, 
  I would say, let’s use an explicit string index (key) for the scalar parameters only. So our previous config will look 
  like this:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'some.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="nc">Namespace\To\Some\Service</span><span class="o">::</span><span class="n">class</span>
    <span class="p">],</span>
    <span class="nc">Namespace\To\My\Service\MakesNoSense</span><span class="o">::</span><span class="n">class</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'arguments'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">'Service identifier parameter'</span> <span class="o">=&gt;</span> <span class="s1">'some.service'</span><span class="p">,</span>
            <span class="s1">'some.service'</span>
        <span class="p">]</span>   
    <span class="p">]</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Amazing! Then in the DIC we only have to check whether the argument definition’s current index is numeric or not, 
  and we will immediately know if we need to keep resolve the dependency for the parameter or just pass it as is.</p>
<h4 id="post-init-calls">Post-init calls</h4>
<p>Sometimes, to fully prepare a service, we need to call a method or to do an additional setup that we can’t necessarily
  do upon initializing the service. A typical example was the MySQL’s <code class="language-plaintext highlighter-rouge">charset</code> option which was ignored prior to PHP 5.3.6
  so we had to set it explicitly:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$connection</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PDO</span><span class="p">(</span><span class="s2">"mysql:host=</span><span class="nv">$host</span><span class="s2">;dbname=</span><span class="nv">$db</span><span class="s2">;charset=utf8"</span><span class="p">,</span>  <span class="nv">$user</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">defined</span><span class="p">(</span><span class="s1">'PHP_VERSION_ID'</span><span class="p">)</span> <span class="o">||</span> <span class="kc">PHP_VERSION_ID</span> <span class="o">&lt;=</span> <span class="mi">50306</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$connection</span><span class="o">-&gt;</span><span class="nb">exec</span><span class="p">(</span><span class="s2">"set names utf8"</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>And since we plan to use PHP 7.4, this example doesn’t valid. Honestly I can’t bring any live example right now. But this
  doesn’t mean there aren’t any. So let’s support it:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'form.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="nc">Namespace\To\Form\Service</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
        <span class="s1">'argument'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">'action'</span> <span class="o">=&gt;</span> <span class="s1">'login.php'</span><span class="p">,</span>
            <span class="s1">'method'</span> <span class="o">=&gt;</span> <span class="s1">'POST'</span>
        <span class="p">],</span>
        <span class="s1">'calls'</span> <span class="o">=&gt;</span> <span class="p">[</span>           
            <span class="p">[</span><span class="s1">'addElement'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'username'</span><span class="p">,</span> <span class="s1">'value'</span> <span class="o">=&gt;</span> <span class="s1">''</span><span class="p">,</span> <span class="err">\</span><span class="nc">Namespace\To\Form\Element\TextInput</span><span class="o">::</span><span class="n">class</span><span class="p">]],</span>
            <span class="p">[</span><span class="s1">'addElement'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'password'</span><span class="p">,</span> <span class="s1">'value'</span> <span class="o">=&gt;</span> <span class="s1">''</span><span class="p">,</span> <span class="err">\</span><span class="nc">Namespace\To\Form\Element\PasswordInput</span><span class="o">::</span><span class="n">class</span><span class="p">]],</span>
            <span class="p">[</span><span class="s1">'addElement'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'submit'</span><span class="p">,</span>  <span class="s1">'value'</span> <span class="o">=&gt;</span> <span class="s1">'Login'</span><span class="p">,</span> <span class="err">\</span><span class="nc">Namespace\To\Form\Element\SubmitButton</span><span class="o">::</span><span class="n">class</span><span class="p">]],</span>
            <span class="p">[</span><span class="s1">'addValidator'</span><span class="p">,</span> <span class="p">[</span><span class="err">\</span><span class="nc">Namespace\To\Form\Validator\CredentialValidator</span><span class="o">::</span><span class="n">class</span><span class="p">]],</span>
        <span class="p">],</span>
    <span class="p">],</span>  
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So in this example we define the config for a HTML Form service. There are constructor scalar parameters, and instead of
  creating the form by injecting all the necessary elements, we instead add them with public methods. This is just a very
  simple example, but it shows pretty well, how the <code class="language-plaintext highlighter-rouge">calls</code> sub-key is built up:</p>
<ul>
  <li>Every element of the <code class="language-plaintext highlighter-rouge">calls</code> sub-key is an array that defines one single method call.</li>
  <li>The first item of each array is the method name. It must exists as a public method within the class.</li>
  <li>The second item is an array again. It’s the argument list of the method and it’s optional in those cases when the 
    method doesn’t require any parameters. This list behaves the same way as the <code class="language-plaintext highlighter-rouge">argument</code> list for the class.</li>
  <li>One method can be called multiple times.</li>
</ul>
<h4 id="singleton">Singleton</h4>
<p>This one is a simple boolean key, called <code class="language-plaintext highlighter-rouge">shared</code>. If it’s TRUE, it means that the instance will be shared along the 
  runtime whenever we need it. Otherwise a new instance will be returned by the DIC.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'some.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="nc">Namespace\To\Some\Service</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
        <span class="s1">'shared'</span> <span class="o">=&gt;</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="nc">Namespace\To\My\Service\MakesNoSense</span><span class="o">::</span><span class="n">class</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'shared'</span> <span class="o">=&gt;</span> <span class="kc">false</span>   
    <span class="p">]</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>If the <code class="language-plaintext highlighter-rouge">shared</code> sub-key does not present, it will be considered as TRUE by default.</p>
<h4 id="inheritance">Inheritance</h4>
<p>In some cases we want to inherit configuration to avoid unnecessary code repeats, and apply only the differences. We
  will be able to do this with the <code class="language-plaintext highlighter-rouge">inherits</code> key. The value must be an existing <code class="language-plaintext highlighter-rouge">service identifier</code>, other than the 
  current one. Both self- of invalid referencing should raise an error.</p>
<p>To make it less complex, let’s say, if any of the sub-key’s value is changed, the full sub-key should be presented. 
  Also, the <code class="language-plaintext highlighter-rouge">shared</code> key must present if differs form the ancestor’s. So if for the ancestor the shared is FALSE, and 
  the descendant should be TRUE, then it must present explicitly, the default behaviour will not applied in this case.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'form.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'class'</span> <span class="o">=&gt;</span> <span class="nc">Namespace\To\Form\Service</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
        <span class="s1">'argument'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">'action'</span> <span class="o">=&gt;</span> <span class="s1">'/login.php'</span><span class="p">,</span>
            <span class="s1">'method'</span> <span class="o">=&gt;</span> <span class="s1">'POST'</span>
        <span class="p">],</span>
        <span class="s1">'calls'</span> <span class="o">=&gt;</span> <span class="p">[</span>           
            <span class="p">[</span><span class="s1">'addElement'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'username'</span><span class="p">,</span> <span class="s1">'value'</span> <span class="o">=&gt;</span> <span class="s1">''</span><span class="p">,</span> <span class="err">\</span><span class="nc">Namespace\To\Form\Element\TextInput</span><span class="o">::</span><span class="n">class</span><span class="p">]],</span>
            <span class="p">[</span><span class="s1">'addElement'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'password'</span><span class="p">,</span> <span class="s1">'value'</span> <span class="o">=&gt;</span> <span class="s1">''</span><span class="p">,</span> <span class="err">\</span><span class="nc">Namespace\To\Form\Element\PasswordInput</span><span class="o">::</span><span class="n">class</span><span class="p">]],</span>
            <span class="p">[</span><span class="s1">'addElement'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'submit'</span><span class="p">,</span>  <span class="s1">'value'</span> <span class="o">=&gt;</span> <span class="s1">'Login'</span><span class="p">,</span> <span class="err">\</span><span class="nc">Namespace\To\Form\Element\SubmitButton</span><span class="o">::</span><span class="n">class</span><span class="p">]],</span>
            <span class="p">[</span><span class="s1">'addValidator'</span><span class="p">,</span> <span class="p">[</span><span class="err">\</span><span class="nc">Namespace\To\Form\Validator\CredentialValidator</span><span class="o">::</span><span class="n">class</span><span class="p">]],</span>
        <span class="p">],</span>
        <span class="s1">'shared'</span> <span class="o">=&gt;</span> <span class="kc">false</span><span class="p">,</span>   
    <span class="p">],</span>
    <span class="s1">'shared.form.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'inherits'</span> <span class="o">=&gt;</span> <span class="s1">'form.service'</span><span class="p">,</span>
        <span class="s1">'shared'</span> <span class="o">=&gt;</span> <span class="kc">true</span>
    <span class="p">],</span>
    <span class="s1">'new.form.service'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">'inherits'</span> <span class="o">=&gt;</span> <span class="s1">'form.service'</span><span class="p">,</span>
        <span class="s1">'argument'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">'action'</span> <span class="o">=&gt;</span> <span class="s1">'/customer/login'</span><span class="p">,</span>
            <span class="s1">'method'</span> <span class="o">=&gt;</span> <span class="s1">'POST'</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>And that is all. We covered all the options we need from our DIC implementation to support. And it’s only a very small
  subset of what the YAML is capable of, yet enough for us.</p>
<p>In the next part we will create our DIC implementation.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="php74" /><category term="dic" /><category term="clean-code" /><category term="yaml" /><summary type="html"><![CDATA[The second step on our journey to create a stand-alone Dependency Injection Container. Discuss about the configuration doesn't sound too interesting, but it can hold us some surprises.]]></summary></entry><entry><title type="html">DIY Dependency Injection Container, Part 1</title><link href="http://0.0.0.0:4000/backend/diy-dependency-injection-container" rel="alternate" type="text/html" title="DIY Dependency Injection Container, Part 1" /><published>2020-04-26T21:29:00+00:00</published><updated>2022-10-05T19:13:18+00:00</updated><id>http://0.0.0.0:4000/backend/diy-dependency-injection-container</id><content type="html" xml:base="http://0.0.0.0:4000/backend/diy-dependency-injection-container"><![CDATA[<p>It’s very important to clarify: <strong>Do not reinvent the wheel</strong>. There are numerous great, well maintained, continuously
    developed solutions on the market written by professional developers, who enjoy the support of their large community. 
    I am talking about the big fish like Symfony, Laravel, Zend etc. So if you need a component for your web application,
    it’s better to look around first.</p>
  <p>This article became too long, so I decided to split up to three parts:</p>
  <ul>
    <li>Introduction and the Interface</li>
    <li>The configuration file</li>
    <li>The Dependency Injection Container implementation</li>
  </ul>
  <h3 id="tldr">TL;DR</h3>
  <p>If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
    <a href="https://github.com/Gixx/worstpractice-dependency-injection" target="_blank" rel="noopener">GitHub</a>.</p>
  <h3 id="your-path-is-your-decision">Your path is your decision</h3>
  <p>Of course nobody can force you to NOT Do It Yourself. It all depend on what your project requires. So let’s suppose, you
    are not allowed to use third party components for some very mysterious reasons. But you want to write a modern, clean, 
    object-oriented code and follow the <a target="_blank" rel="noopener" href="https://medium.com/successivetech/s-o-l-i-d-the-first-5-principles-of-object-oriented-design-with-php-b6d2742c90d7">
      <acronym title="Single-responsibility, Open-closed, Liskov substitution, Interface segregation, Dependency Inversion">SOLID</acronym>
      Principles</a> as much as possible.</p>
  <p>You look up the books of smart people about smart things. Best practices, software design patterns or just sit on the latest
    hype train. Whatever you do - unless you choose to do functional programming - sooner or later you will meet with the 
    <code class="language-plaintext highlighter-rouge">Dependency Injection</code> technique. And you realize it’s pretty cool, and you need it.</p>
  <p>But first let’s talk about something that is the core of most of the PHP websites in the world today. Even if you are a
    <em><q cite="https://starwars.fandom.com/wiki/Padawan" title="Jedi student in the Star Wars Universe">young padawan</q></em> and
    you have never ever heard about it, and you never had to deal with it, it’s important.</p>
  <h4 id="autoloader">Autoloader</h4>
  <p>Not that far in past, only a decade and a half ago, every PHP project was loud about the autoloading of objects. 
    There was a kind of race between masterminds who can create the best, more performing, more fool-proof <code class="language-plaintext highlighter-rouge">__autoload</code> function. 
    I talk about the era, when there were no <a target="_blank" rel="noopener" href="https://stackoverflow.com">Stack Overflow</a>
    (2008), not even <a target="_blank" rel="noopener" href="https://symfony.com/">Symfony Framework</a> (2007) or 
    <a target="_blank" rel="noopener" href="https://framework.zend.com/">Zend Framework</a> (2006). I talk about the era, when 
    everybody was happy to start their green-field projects in the brand new, (and finally but only more-or-less)
    Object-Oriented, PHP 5 (2004).</p>
  <p>Later, we got the <a target="_blank" rel="noopener" href="https://www.php-fig.org/psr/psr-0/">PSR-0</a> that was suppose to 
    show the way to a better future by giving us a recommendation for the autoloading. But time passes and the PSR-0 became 
    obsolete. Today its direct descendant, the <a target="_blank" rel="noopener" href="https://www.php-fig.org/psr/psr-4/">PSR-4</a>
    is in charge.</p>
  <p>And if we keep the recommendations of the PSR-4, and we use <a target="_blank" rel="noopener" href="https://getcomposer.org/doc/00-intro.md">composer</a> too, 
    we only need to give the path to our namespace, and the rest of the magic is done automatically. No more manual autoloading. 
    Here’s an example of the <code class="language-plaintext highlighter-rouge">composer.json</code> configuration:</p>
  <div class="language-json highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"WorstPractice\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./src/WorstPractice"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>…then all you need to do is to include the composer’s autoload file in the entry points of you web application:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">require_once</span> <span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/vendor/autoload.php'</span><span class="p">;</span>

<span class="nv">$myObject</span> <span class="o">=</span> <span class="k">new</span> <span class="err">\</span><span class="nf">WorstPractice\Component\MyClass</span><span class="p">();</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<blockquote>
  <p>Okay, now the classes can load, but what is this dependency thing?</p>
</blockquote>
<p>I already assumed, that you want to write clean code and follow the <strong>S.O.L.I.D.</strong> principles. And what is <strong>D</strong> in this
  acronym?</p>
<h4 id="d-is-for-dependency-inversion-principle">D is for Dependency Inversion Principle</h4>
<p>The Dependency Inversion Principle in a nutshell:</p>
<ol>
  <li>High-level modules should not depend on low-level modules. Both should depend on the abstraction.</li>
  <li>Abstractions should not depend on details. Details should depend on abstractions.</li>
</ol>
<p>If you don’t understand, check <a target="_blank" rel="noopener" title="stackify.com: SOLID Design Principles Explained: Dependency Inversion Principle with Code Examples" href="https://stackify.com/dependency-inversion-principle/">this great tutorial</a>
  with explanations and examples.</p>
<h4 id="dependency-injection">Dependency Injection</h4>
<p>Dependency Injection (DI) is a design pattern used to implement Inversion of Control (IoC). Although this shows us a 
  causal relationship, actually these terms are generally used interchangeably to describe the same design pattern.</p>
<p>I hope I could confuse you enough, so let’s just use <strong>DI</strong> from now.</p>
<h4 id="di-container">DI Container</h4>
<p>The <strong>DI Container</strong> is a framework/module/component/library for implementing automatic dependency injection. It manages 
  object creation, and also injects dependencies to the classes.</p>
<h3 id="lets-get-is-started">Let’s get is started</h3>
<p>Up till now you may already used software design patterns, such as <a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Facade_pattern#PHP">Facade</a>,
  <a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Singleton_pattern#PHP_implementation">Singleton</a> or
  <a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)#PHP">Factory</a>, etc.</p>
<p>Well, in the world of dependency injection, we can easily get rid of them, making the code cleaner, and more readable for other
  human lifeforms. And last but not least it helps a lot to your <acronym title="Integrated Development Environment">IDE</acronym>
  to discover the call chains. One of the primary benefits of DI is the ability to swap implementations of the injected class. That
  makes extremely easy to unit test classes.</p>
<p>If you are familiar with the big framework’s DI Container solutions, you already know how it works: You create a spooky
  configuration where you define the relationship and dependencies between classes and control additional behaviour
  such as returning the same instance every time or create new one (Singleton, motherfucker!).</p>
<h4 id="diy-di-container">DIY DI Container</h4>
<p>If we don’t want to use third party libraries - and we already clarified this several times -, let’s create out own:</p>
<ul>
  <li>One Interface, because of the <a target="_blank" rel="noopener" href="https://stackify.com/interface-segregation-principle/">Interface Segregation Principle</a></li>
  <li>A reasonably clean and understandable configuration file</li>
  <li>One single class to rule them all</li>
</ul>
<h3 id="the-interface">The Interface</h3>
<p>I wrote in the beginning of this article that you don’t need to reinvent the wheel. Or not completely. There are agreements
  on how a DI Container should behave. And there is a quasi standard for it. And a standard is not a library, a standard is a
  collection of rules and blueprints. You wouldn’t start to build your dream house without a blueprint, would you? I guess no.</p>
<p>So let’s grab this blueprint, and take a closer look.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kn">namespace</span> <span class="nn">Psr\Container</span><span class="p">;</span>

<span class="cd">/**
 * Describes the interface of a container that exposes methods to read its entries.
 */</span>
<span class="kd">interface</span> <span class="nc">ContainerInterface</span>
<span class="p">{</span>
    <span class="cd">/**
     * Finds an entry of the container by its identifier and returns it.
     *
     * @param string $id Identifier of the entry to look for.
     *
     * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
     * @throws ContainerExceptionInterface Error while retrieving the entry.
     *
     * @return mixed Entry.
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">get</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>

    <span class="cd">/**
     * Returns true if the container can return an entry for the given identifier.
     * Returns false otherwise.
     *
     * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
     * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
     *
     * @param string $id Identifier of the entry to look for.
     *
     * @return bool
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">has</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now we have a nice blueprint, but this blueprint unfortunately isn’t perfect. A good start, but there are some problems:</p>
<ul>
  <li>It’s backward compatible with earlier PHP editions, which means no type hinting:
    <ul>
      <li>no parameter type hints, and we can’t add them for the implementation either.</li>
      <li>no return types, but luckily we can override this.</li>
    </ul>
  </li>
  <li>It suggests to create new Exceptions that implement these two <code class="language-plaintext highlighter-rouge">NotFoundExceptionInterface</code> and <code class="language-plaintext highlighter-rouge">ContainerExceptionInterface</code>.<br />
    Honestly I always preferred the use the built-in ones. Those cover most of our needs.</li>
  <li>There is no declaration of adding instances to the container, but sometimes you can’t set up everything in the configuration.</li>
</ul>
<p>We have two chances:</p>
<ol>
  <li>Use the <code class="language-plaintext highlighter-rouge">Psr\Container\ContainerInterface</code> and extend it, but we will loose on the type hinting.</li>
  <li>Create our own interface but whenever somebody requires the DI to be <code class="language-plaintext highlighter-rouge">instanceof Psr\Container\ContainerInterface</code>, ours will fail.</li>
</ol>
<p>And because of implementation interchangeability - though reluctantly -, I still choose the first option. Let’s extend, and
  create the possibility to add instantiated objects to the container. Since this interface has a repository, we don’t</p>
<ul>
  <li>what’s more, we shouldn’t - copy it but import it. Run the following in the command line in your project’s document root:</li>
</ul>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>composer require psr/container
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>…or add it manually to your <code class="language-plaintext highlighter-rouge">composer.json</code> file:</p>
<div class="language-json highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="w">  </span><span class="nl">"require"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"php"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&gt;=7.4"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"psr/container"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="w">
  </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Additionally we set a requirement on the PHP version too. Now it’s time to create our interface: 
  <code class="language-plaintext highlighter-rouge">src/WorstPractice/Component/DependencyInjection/ContainerInterface.php</code></p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre>
  </td>
  <td class="rouge-code">
    <pre>
<span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">WorstPractice\Component\DependencyInjection</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Psr\Container\ContainerInterface</span> <span class="k">as</span> <span class="nc">PsrContainerInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">RuntimeException</span><span class="p">;</span>

<span class="cd">/**
 * Interface ContainerInterface
 * @package WorstPractice\Component\DependencyInjection
 */</span>
<span class="kd">interface</span> <span class="nc">ContainerInterface</span> <span class="kd">extends</span> <span class="nc">PsrContainerInterface</span>
<span class="p">{</span>
    <span class="cd">/**
     * Register the service object instance.
     *
     * @param string $identifier
     * @param object $serviceInstance
     * @param bool   $isShared
     * @throws RuntimeException
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">set</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$identifier</span><span class="p">,</span> <span class="kt">object</span> <span class="nv">$serviceInstance</span><span class="p">,</span> <span class="kt">bool</span> <span class="nv">$isShared</span> <span class="o">=</span> <span class="kc">true</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, I really mean to use the strict types. I think that is the most important feature improvement in PHP lately.
  However, a DI Container is typically NOT a service that can be typed pretty well, unless we call the <code class="language-plaintext highlighter-rouge">object</code> a precise
  type hint.</p>
<p>So what does this Interface do? It extends the <code class="language-plaintext highlighter-rouge">Psr\Container\ContainerInterface</code> to keep its benefits. Then we declared
  our extravagant method: <code class="language-plaintext highlighter-rouge">set</code>. It has three parameters, two is mandatory, the third is optional.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">$identifier</code>: String. It’s the instance’s class name, or just an alias of your choice. It’s important that the value 
    to be unique, or match to a configuration definition, that has not been initialized yet.</li>
  <li><code class="language-plaintext highlighter-rouge">$instance</code>: Object. It’s an object that have been initialized already but not destructed yet.</li>
  <li><code class="language-plaintext highlighter-rouge">$isShared</code>: Boolean. It will tell the DI container how this instance should be handled upon getting it: return a clone (new 
    instance every time) or the same instance (be like a singleton, but without the hateful <code class="language-plaintext highlighter-rouge">::getInstance();</code>)</li>
</ul>
<p>The method in normal case should not return anything. Why it should? Do we wait any kind of response? The only response 
  should be an exception, that is thrown when we try to add an instance with an alias that is already instantiated.
  This show how important is to use this method wisely. It’s not a common case when we need this, and that is why it’s not part
  of the PSR Interface. 
  However other implementations, like the <a target="_blank" rel="noopener" href="https://github.com/symfony/dependency-injection/blob/master/ContainerInterface.php">Symfony DI</a>
  (just to pick one) also feels it important to have this <code class="language-plaintext highlighter-rouge">set</code> method. So ours won’t be that renitent.</p>
<p>In the <a rel="next" href="/backend/diy-dependency-injection-container-2" title="DIY Dependency Injection Container, Part 2">next part</a> we will plan the configuration file.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="php74" /><category term="dic" /><category term="clean-code" /><category term="solid-principles" /><summary type="html"><![CDATA[Like many of my fate companions, I do home office too. And by staying at home, I can save 2-3 hours of travelling every day. So I decided to practice a little bit.]]></summary></entry><entry><title type="html">Why I dropped the `Mobile-first` approach</title><link href="http://0.0.0.0:4000/frontend/why-i-dropped-the-mobile-first-approach" rel="alternate" type="text/html" title="Why I dropped the `Mobile-first` approach" /><published>2020-03-11T14:05:00+00:00</published><updated>2022-10-05T19:13:18+00:00</updated><id>http://0.0.0.0:4000/frontend/why-i-dropped-the-mobile-first-approach</id><content type="html" xml:base="http://0.0.0.0:4000/frontend/why-i-dropped-the-mobile-first-approach"><![CDATA[<h3 id="the-wrong-decision">The (wrong) decision</h3>
  <p>It was late 2019. I was working on this blog in my free time since months, and I still couldn’t see the end. I was struggling with the
    design - as always - and my creativity went into the <code class="language-plaintext highlighter-rouge">not good enough</code> infinite loop, and started to reject any ideas came up.
    Meanwhile the backend part - if we can  talk about backend for a static website - went pretty well. Luckily I could heavily build on
    my experiences when I created my family blog, the <a href="https://thomas.von.fuerstenfeld.blog" target="_blank" rel="noopener">Thomas von Fürstenfeld</a>.</p>
  <p>It was almost Christmas season, when I finally had a design idea flashed in my mind. Since I felt I’m running out of time, I tried to
    sketch it up as simple as possible and drop all the unnecessary things. What remain was the color scheme and the header. That’s enough
    for the start.</p>
  <p>And this was the exact moment when I had to decide what is more important for me:</p>
  <ul>
    <li>Start the blog in the very beginning of 2020, even if the price is I have to drop the <code class="language-plaintext highlighter-rouge">Mobile-first</code> approach, or</li>
    <li>Do it properly, nice and clean, and maybe I will be able to publish it only in the summer maybe?</li>
  </ul>
  <p>Since I already had the domain bought in February 2019, I didn’t want to waste any time more. I really felt that if I don’t publish
    this blog in the first days of the New Year, I will get into the <code class="language-plaintext highlighter-rouge">not good enough</code> rejecting loop again… So I chose to give a damn
    on the handheld versions for a while, just do it, publish it. Anyway, developers develop on desktops, don’t they?</p>
  <h3 id="the-help-of-the-years-in-the-business">The help of the years in the business</h3>
  <p>So my own tech blog started, and I also wrote my first articles. I shared the links to a small group of developers, to check, read, and
    give some feedback about their impressions, etc. Among the many many positive feedback, there was one returning topic:</p>
  <blockquote>
    <p>Where is the mobile version?</p>
  </blockquote>
  <p>I realized, my assumption - that the web developers usually sits in front of a desktop computer and browse the Internet on their 24
    inch monitors - was totally wrong. I can’t avoid to create a version for the tablets and the mobile devices too.</p>
  <p>Luckily, without really focus on the semantic aspects, somehow I was able to create a nice, clean and tidy <code class="language-plaintext highlighter-rouge">HTML</code> structure in the
    first wave, and with the guiding help of the <a target="_blank" rel="noopener" href="https://css-tricks.com/abem-useful-adaptation-bem/">ABEM</a>
    <code class="language-plaintext highlighter-rouge">CSS</code> class naming convention, the style definitions were also became pretty flexible. This happens when you stare the monitor
    long enough: you get experiences which with time become skills.</p>
  <h3 id="surprise-motherer">Surprise, Mother#@!$er!</h3>
  <p>First I tried to figure out, what I should change to make this website look relatively good on the smaller screens. And here
    came the surprise: only a few parts required different styles. And some of these changes can be
    applied directly on the “global” styles. Great, isn’t it? I was happy I don’t have to refactor the whole frontend.</p>
  <p>So in the end, in one week of free time work, I was able to create a decent mobile and tablet version for this website. Unfortunately
    I had to give up the “Monitor with terrible code” (hidden) feature, because the dynamically positioning an element, which has the
    <code class="language-plaintext highlighter-rouge">perspective</code> style transformation applied on it, is very difficult, and it exceeds my current capabilities.</p>
  <p>So I modified the header, and I spliced off the <code class="language-plaintext highlighter-rouge">title with the woman</code> and the <code class="language-plaintext highlighter-rouge">monitor</code>. This way I could gently hide the monitor
    as soon as the header starts to shrink.</p>
  <p>Also the smallest screens got a <code class="language-plaintext highlighter-rouge">title only</code> header to maximize the useful area of the page. In fact this graphical change caused
    the biggest headache because the actual version of the design was never saved in an editable source (whatta loooser!), and I had to
    remember all those tiny adjustments to add them again. The rest of the job on the CSS side (overwrite margin, padding, font-size)
    were just a matter of manual measuring.</p>
  <h3 id="conclusion">Conclusion</h3>
  <p>When you have time, it’s worth to invest in planning, and thinking in the <code class="language-plaintext highlighter-rouge">mobile-first approach</code>. Most of the people reads articles
    on their mobile phones or tablets. Those, who refuse to support these devices will loose potential customers. For me, it’s not a
    disaster, I don’t think there are many people visiting this new and unknown website. And since I have taken up the responsive(ish)
    design, my future readers will know about my design failure only from this article.</p>
  ]]></content><author><name>Gábor Iván</name></author><category term="frontend" /><category term="responsive" /><category term="mobile" /><category term="design" /><summary type="html"><![CDATA[...and how I regret it. At least a little bit.]]></summary></entry><entry><title type="html">Deal with ‘public’ and ‘private’ access modifiers in JS</title><link href="http://0.0.0.0:4000/frontend/deal-with-public-and-private-access-modifiers-in-js" rel="alternate" type="text/html" title="Deal with ‘public’ and ‘private’ access modifiers in JS" /><published>2020-02-21T07:35:00+00:00</published><updated>2022-10-05T19:13:18+00:00</updated><id>http://0.0.0.0:4000/frontend/deal-with-public-and-private-access-modifiers-in-js</id><content type="html" xml:base="http://0.0.0.0:4000/frontend/deal-with-public-and-private-access-modifiers-in-js"><![CDATA[<h3 id="my-concept">My concept</h3>
  <p>You’d better know, I am basically a backend developer. Or, as I used to say with a little bit of humor and a piece of well-deserved self-critics:</p>
  <blockquote>
    <p>I am a Full-STUCK Señor PHP Developer</p>
  </blockquote>
  <p>Most of my time in the office I deal with corporate PHP codes, and try to give my best in it, and I also try to improve my skills. I write object-oriented
    code 99% during the work by using the most hyped and recommended patterns, such as Dependency Injection, Adapter, Factory, MVC, etc. So I use OO day-by-day,
    and I learned to think in the object-styled encapsulation during my years in the industry. In fact I already see the world in Objects…!
    That’s totally crazy, isn’t it?</p>
  <p>And when I deal with JavaScript for myself, like on this blog, where I can give myself free hand, I try to somehow adopt this ‘knowledge’ too. But we
    all know that, in the native way it is not that simple. It needs a different kind of thinking, which I find a bit weird and triple-twisted. There are
    objects of a kind, and since ES6 there are classes too, but not in the <code class="language-plaintext highlighter-rouge">class</code>ical way (Ha-Ha-Ha). Scope, inheritance, access modifiers and in general
    everything is just different. Well, JavaScript is a different animal for sure… that’s what they used to say.</p>
  <p>I know, there are many many wonderful frameworks and libraries to develop JavaScript. I could do React, Svelte, Vue and so on. But I don’t. Not right now.
    I want to do something simple, something on my own. I like to reinvent the wheel, and even if it will be a shitty one, it will be mine. And I don’t want
    to go deep in the soul of the JavaScript development now, and define terms, understand the whys, find the good way I ought to follow.</p>
  <p>The first step for a dummy / lame / rookie / amateur like me is to try to create something for my own. Make it work. Then, when I have some experience,
    I can learn the proper ‘How’. You can’t qualify yourself to the 100m sprint on the Olympic games until you can’t even walk, can you? And how do you learn
    to walk? Try it, do it, fail and retry.</p>
  <p>So I decided to use my understanding of the <code class="language-plaintext highlighter-rouge">Object</code>, and with the available tools of the JavaScript’s arsenal, I create something, in which I can feel
    myself comfortable when I code. Of course to achieve this, I had to give up some of OO things temporarily, and stick to a very basic concept:</p>
  <ul>
    <li>encapsulate properties and methods together</li>
    <li>support <code class="language-plaintext highlighter-rouge">public</code> and <code class="language-plaintext highlighter-rouge">private</code> access in some way</li>
    <li>no need for inheritance right now</li>
  </ul>
  <p>I tried several different ways before I choose the following two cases. Both have pros and cons. To be comparable I’ve made the same <code class="language-plaintext highlighter-rouge">Yet-another</code>
    UUID generator class.</p>
  <h4 id="way-1-clean-but-vulnerable">Way 1: clean but vulnerable.</h4>
  <p>This can be called a more ‘standard’ solution.</p>
  <div class="language-js highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="cm">/**
 * @typedef {Object} MyClass1
 * @property {function(): string} generateUUID
 * @property {string} nilUUID
 */</span>

<span class="cm">/**
 * @constructor
 */</span>
<span class="kd">const</span> <span class="nx">MyClass1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
<span class="p">{</span>
    <span class="cm">/** @type {array} */</span>
    <span class="kd">const</span> <span class="nx">AVAILABLE_CHARACTERS</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</span><span class="dl">'</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>

    <span class="cm">/** @type {array} */</span>
    <span class="kd">const</span> <span class="nx">uuidTemplate</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxxxxxxx-xxxx-!xxx-?xxx-xxxxxxxxxxxx</span><span class="dl">'</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>

    <span class="cm">/** @type {string} */</span>
    <span class="kd">const</span> <span class="nx">uuidVersion</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">4</span><span class="dl">'</span><span class="p">;</span>

    <span class="cm">/**
     * @returns {string}
     */</span>
    <span class="kd">const</span> <span class="nx">getNilUUID</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="dl">'</span><span class="s1">00000000-0000-0000-0000-000000000000</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="cm">/** @type {string} */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">nilUUID</span> <span class="o">=</span> <span class="nx">getNilUUID</span><span class="p">();</span>

    <span class="cm">/**
     * Generate a valid UUID
     * @see https://en.wikipedia.org/wiki/Universally_unique_identifier
     *
     * @return {string}
     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">generateUUID</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">isNilUUID</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">isNilUUID</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">nilUUID</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kd">let</span> <span class="nx">uuidVariant</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">random</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">uuid</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">uuidTemplate</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">random</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">|</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">16</span><span class="p">;</span>
            <span class="nx">uuidVariant</span> <span class="o">=</span> <span class="p">(</span><span class="nx">random</span> <span class="o">&amp;</span> <span class="mh">0x3</span><span class="p">)</span>  <span class="o">|</span> <span class="mh">0x8</span><span class="p">;</span>

            <span class="nx">uuid</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">uuidTemplate</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
                <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[^\-\!\?]</span><span class="sr">/</span><span class="p">,</span> <span class="nx">AVAILABLE_CHARACTERS</span><span class="p">[</span><span class="nx">random</span><span class="p">])</span>
                <span class="c1">// ! is the uuid version</span>
                <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">!</span><span class="dl">'</span><span class="p">,</span> <span class="nx">uuidVersion</span><span class="p">)</span>
                <span class="c1">// ? is the high bits of clock sequence according to rfc4122</span>
                <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">?</span><span class="dl">'</span><span class="p">,</span> <span class="nx">AVAILABLE_CHARACTERS</span><span class="p">[</span><span class="nx">uuidVariant</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">uuid</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">MyClass1</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">MyClass1</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">myObj1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass1</span><span class="p">();</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Our goal is to create an object where there is a publicly available property (<code class="language-plaintext highlighter-rouge">nilUUID</code>) and a publicly available method (<code class="language-plaintext highlighter-rouge">generateUUID()</code>).</p>
<p>We construct a new instance with the <code class="language-plaintext highlighter-rouge">new</code> keyword. If we leave the keyword and then try to call the <code class="language-plaintext highlighter-rouge">myObj1.generateUUID();</code>, we will get a
  <code class="language-plaintext highlighter-rouge">Uncaught TypeError: Cannot read property 'generateUUID' of undefined</code> error.</p>
<p>All the <code class="language-plaintext highlighter-rouge">const</code> and <code class="language-plaintext highlighter-rouge">let</code> methods and properties will be hidden from “outside”.
  So the <code class="language-plaintext highlighter-rouge">myObj1.getNilUUID();</code> will result a <code class="language-plaintext highlighter-rouge">Uncaught TypeError: myObj1.getNilUUID is not a function</code> error. We can call them to be <code class="language-plaintext highlighter-rouge">private</code>.</p>
<p>Every property and method having the <code class="language-plaintext highlighter-rouge">this</code> keyword will be reachable from outside. They are definitely <code class="language-plaintext highlighter-rouge">public</code>. But they are heavily vulnerable which
  I find really disturbing. But that’s the JS way. Try the <code class="language-plaintext highlighter-rouge">document.getElementById = 'sucker';</code> in the console on any website and see what happens. It’s
  also possible to inject new properties and methods into our instance which is also a bit… yuck…</p>
<div class="language-js highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// Get and set public property</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj1</span><span class="p">.</span><span class="nx">nilUUID</span><span class="p">);</span> <span class="c1">// '00000000-0000-0000-0000-000000000000'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj1</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span> <span class="c1">// '00000000-0000-0000-0000-000000000000'</span>

<span class="nx">myObj1</span><span class="p">.</span><span class="nx">nilUUID</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello World!</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj1</span><span class="p">.</span><span class="nx">nilUUID</span><span class="p">);</span> <span class="c1">// 'Hello World!'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj1</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span> <span class="c1">// 'Hello World!'</span>

<span class="c1">// BUT!</span>
<span class="nx">myObj1</span><span class="p">.</span><span class="nx">generateUUID</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">I am so sorry</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj1</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span> <span class="c1">//  Uncaught TypeError: myObj1.generateUUID is not a function</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj1</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">);</span> <span class="c1">// 'I am so sorry'</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="pros">Pros:</h5>
<ul>
  <li>It has a cleaner code.</li>
  <li>It’s easier to understand.</li>
  <li>Enforces the <code class="language-plaintext highlighter-rouge">new</code> keyword for instantiation.</li>
</ul>
<h5 id="cons">Cons:</h5>
<ul>
  <li>It is vulnerable: every public method and property can be re-defined.</li>
  <li>It has no support for <code class="language-plaintext highlighter-rouge">get</code>, <code class="language-plaintext highlighter-rouge">set</code> and <code class="language-plaintext highlighter-rouge">static</code> keywords.</li>
  <li>No type check is possible before assigning new value to the public properties.</li>
  <li>It’s possible to add/attach additional properties and methods to the instance.</li>
</ul>
<h5 id="demo">Demo:</h5>
<p><a target="_blank" rel="noopener" href="https://codepen.io/navig80/pen/qBdRNeb?editors=1111">CodePen</a></p>
<h4 id="way-2-twisted-thinking-to-protect-the-code">Way 2: twisted thinking to protect the code</h4>
<p>This one is a nasty motherfucker. I found the cons very annoying in the first example, so I tried to figure out, how can I eliminate them.</p>
<p>In this case we start the same way as previously, but then instead of making publicly available properties and methods, we simply
  <strong>return</strong> with an object.</p>
<div class="language-js highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cm">/**
 * @returns {string|Readonly&lt;{readonly, nilUUID: Object.nilUUID, generateUUID: (function(*=): string)}&gt;}
 * @constructor
 */</span>
<span class="kd">const</span> <span class="nx">MyClass2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
<span class="p">{</span>
    <span class="cm">/** @type {array} */</span>
    <span class="kd">const</span> <span class="nx">AVAILABLE_CHARACTERS</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</span><span class="dl">'</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>

    <span class="cm">/** @type {array} */</span>
    <span class="kd">const</span> <span class="nx">uuidTemplate</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxxxxxxx-xxxx-!xxx-?xxx-xxxxxxxxxxxx</span><span class="dl">'</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>

    <span class="cm">/** @type {string} */</span>
    <span class="kd">const</span> <span class="nx">uuidVersion</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">4</span><span class="dl">'</span><span class="p">;</span>

    <span class="cm">/**
     * @returns {string}
     */</span>
    <span class="kd">const</span> <span class="nx">getNilUUID</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="dl">'</span><span class="s1">00000000-0000-0000-0000-000000000000</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="cm">/**
     * Collection of public properties.
     *
     * @type {Object}
     */</span>
    <span class="kd">const</span> <span class="nx">properties</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">nilUUID</span><span class="p">:</span> <span class="nx">getNilUUID</span><span class="p">(),</span>
    <span class="p">};</span>

    <span class="cm">/**
     * Collection of public methods including setters and getters for public properties.
     *
     * @type { {readonly nilUUID: Object.nilUUID, generateUUID: (function(*=): string)} }
     */</span>
    <span class="kd">const</span> <span class="nx">methods</span> <span class="o">=</span> <span class="p">{</span>
        <span class="kd">set</span> <span class="nx">nilUUID</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">newValue</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="dl">'</span><span class="s1">nilUUID must store string value, </span><span class="dl">'</span> <span class="o">+</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">newValue</span><span class="p">)</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> given.</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="nx">properties</span><span class="p">.</span><span class="nx">nilUUID</span> <span class="o">=</span> <span class="nx">newValue</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="kd">get</span> <span class="nx">nilUUID</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">nilUUID</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**
         * Generate and return a valid UUID
         * @see https://en.wikipedia.org/wiki/Universally_unique_identifier
         *
         * @returns {string}
         */</span>
        <span class="na">generateUUID</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">isNilUUID</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">isNilUUID</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">nilUUID</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="kd">let</span> <span class="nx">uuidVariant</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">random</span><span class="p">;</span>
            <span class="kd">const</span> <span class="nx">uuid</span> <span class="o">=</span> <span class="p">[];</span>

            <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">uuidTemplate</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">random</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">|</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">16</span><span class="p">;</span>
                <span class="nx">uuidVariant</span> <span class="o">=</span> <span class="p">(</span><span class="nx">random</span> <span class="o">&amp;</span> <span class="mh">0x3</span><span class="p">)</span>  <span class="o">|</span> <span class="mh">0x8</span><span class="p">;</span>

                <span class="nx">uuid</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">uuidTemplate</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
                    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[^\-\!\?]</span><span class="sr">/</span><span class="p">,</span> <span class="nx">AVAILABLE_CHARACTERS</span><span class="p">[</span><span class="nx">random</span><span class="p">])</span>
                    <span class="c1">// ! is the uuid version</span>
                    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">!</span><span class="dl">'</span><span class="p">,</span> <span class="nx">uuidVersion</span><span class="p">)</span>
                    <span class="c1">// ? is the high bits of clock sequence according to rfc4122</span>
                    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">?</span><span class="dl">'</span><span class="p">,</span> <span class="nx">AVAILABLE_CHARACTERS</span><span class="p">[</span><span class="nx">uuidVariant</span><span class="p">]);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nx">uuid</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">methods</span><span class="p">);</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">MyClass2</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">MyClass2</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">myObj2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass2</span><span class="p">();</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Our goal is the same: create an object where there is a publicly available property (<code class="language-plaintext highlighter-rouge">nilUUID</code>) and a publicly available method (<code class="language-plaintext highlighter-rouge">generateUUID()</code>).</p>
<p>We construct a new instance with the <code class="language-plaintext highlighter-rouge">new</code> keyword. But unfortunately it’s not mandatory. However, I’d like to use it to keep the illusion.</p>
<p>As previously all the <code class="language-plaintext highlighter-rouge">const</code> and <code class="language-plaintext highlighter-rouge">let</code> methods and properties will be hidden from “outside”. And here’s the twisty thing: we define two objects in the
  private part. One for the “<em>public properties</em>” and one for the “<em>public methods</em>”. Within each object we can reach methods and properties by the <code class="language-plaintext highlighter-rouge">this</code>
  keyword, as we do it in the <code class="language-plaintext highlighter-rouge">generateUUID()</code> method. But for cross-referencing between the <code class="language-plaintext highlighter-rouge">properties</code> and <code class="language-plaintext highlighter-rouge">methods</code> we can’t use the <code class="language-plaintext highlighter-rouge">this</code>.</p>
<p>So why we separate the “<em>public</em>” properties and methods? Because in the end we will freeze the returning <code class="language-plaintext highlighter-rouge">methods</code> object, which means we can’t change
  this object any more. Luckily this does not stand for the contents of Arrays and Objects. In a frozen object we can’t change scalars, but we can
  add/change elements in an array/object. That’s why we collect all the “<em>public</em>” properties separately in an object. And since we can use the <code class="language-plaintext highlighter-rouge">get</code>
  and <code class="language-plaintext highlighter-rouge">set</code> keywords, we can create the illusion of working directly with the public property:</p>
<div class="language-js highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// Get and set public property</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj2</span><span class="p">.</span><span class="nx">nilUUID</span><span class="p">);</span> <span class="c1">// '00000000-0000-0000-0000-000000000000'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj2</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span> <span class="c1">// '00000000-0000-0000-0000-000000000000'</span>

<span class="nx">myObj2</span><span class="p">.</span><span class="nx">nilUUID</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello World!</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj2</span><span class="p">.</span><span class="nx">nilUUID</span><span class="p">);</span> <span class="c1">// 'Hello World!'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj2</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span> <span class="c1">// 'Hello World!'</span>

<span class="c1">// AND!</span>
<span class="nx">myObj2</span><span class="p">.</span><span class="nx">generateUUID</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">I am so sorry</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj2</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span> <span class="c1">// 'Hello World!'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj2</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">);</span> <span class="c1">// 'function()...'</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="pros-1">Pros</h5>
<ul>
  <li>The public code is in safe. No way to overwrite them.</li>
  <li>It has support for <code class="language-plaintext highlighter-rouge">get</code>, <code class="language-plaintext highlighter-rouge">set</code> and <code class="language-plaintext highlighter-rouge">static</code> keywords.</li>
  <li>With the <code class="language-plaintext highlighter-rouge">set</code> method we can do type check before assignment.</li>
  <li>Not possible to add/attach additional properties and methods.</li>
</ul>
<h5 id="cons-1">Cons</h5>
<ul>
  <li>This is far away from readability.</li>
  <li>It’s difficult to understand.</li>
  <li>Every public, read-write property requires a <code class="language-plaintext highlighter-rouge">set</code> and a <code class="language-plaintext highlighter-rouge">get</code> method.</li>
  <li>The <code class="language-plaintext highlighter-rouge">new</code> keyword is not mandatory.</li>
</ul>
<h5 id="demo-1">Demo:</h5>
<p><a target="_blank" rel="noopener" href="https://codepen.io/navig80/pen/yLNgVye?editors=1111">CodePen</a></p>
<h3 id="conclusion">Conclusion</h3>
<p>As you can see, in order to eliminate all the negatives from the first solution, I had to sacrifice all the positives from it. But I think it’s worth it,
  because in the end we want to use the code and not read it. And we can still use the <code class="language-plaintext highlighter-rouge">new</code> keyword if we want to.</p>
<p>Readability is not a big price to make our object defended from harmful hands. What do you think? Am I right? Am I wrong? Is this really a
  worst practice?</p>
]]></content><author><name>Gábor Iván</name></author><category term="frontend" /><category term="js" /><category term="oop" /><summary type="html"><![CDATA[I asked my Pro Frontend friends and colleagues to tell me their honest opinions about my codes. Well, I got it. This is the absolute worst practice I'm afraid.]]></summary></entry><entry><title type="html">Create a simple Hamburger menu with CSS only</title><link href="http://0.0.0.0:4000/frontend/create-a-simple-hamburber-menu-with-css" rel="alternate" type="text/html" title="Create a simple Hamburger menu with CSS only" /><published>2020-01-20T20:40:00+00:00</published><updated>2022-10-05T19:13:18+00:00</updated><id>http://0.0.0.0:4000/frontend/create-a-simple-hamburber-menu-with-css</id><content type="html" xml:base="http://0.0.0.0:4000/frontend/create-a-simple-hamburber-menu-with-css"><![CDATA[<h3 id="confession">Confession</h3>
  <p>The basic idea was not mine. Unfortunately I don’t even remember where I read about if for the first time, so I am unable to place
    credits, and I also unable to tell which solution was the one that give the base for my code. There are tons of tutorials in this
    topic believe me. And now here’s mine.</p>
  <h3 id="tldr">TL;DR</h3>
  <p>If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
    <a href="https://github.com/Gixx/worstpractice-css-hamburger-menu" target="_blank" rel="noopener">GitHub</a>.</p>
  <h3 id="build-my-burger-up">Build my Burger up!</h3>
  <p>The goal is to create a slide-in menu with semi-transparent, clickable backdrop without any JavaScript, image or font resources.
    Only HTML and CSS. It sounds easy, and after we have done it for the first time, we will see that, it IS really easy to understand
    and adopt this technique to other use cases.</p>
  <h4 id="naming-conventions">Naming conventions</h4>
  <p>There are many popular standards and recommendations on the market which should be considered before starting the development.
    I prefer the <a href="https://css-tricks.com/abem-useful-adaptation-bem/" target="_blank" rel="noopener">ABEM</a>, but please feel free to use
    any other you like. The code samples will be straightforward and easy to replace the class names.</p>
  <h4 id="1-wrapper">1. Wrapper</h4>
  <p>I tried some “wrapper-less” solutions during the development process, but none of them could satisfy my criteria. We <strong>NEED</strong> a wrapper.
    Anyways I like boxing and encapsulating.</p>
  <div class="language-html highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m-menu"</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="2-hamburger">2. Hamburger</h4>
<p>I’m starving for a (good) hamburger, and I am not (yet enough) afraid of the junk food giants. But forget about the food for a minute,
  because what we are talking about now is that three little <del>piggies</del> horizontal bars on the top left corner on this site (and on many
  others). This symbol became a standard in the last decade, so again:</p>
<blockquote>
  <p>No need to reinvent the wheel.</p>
</blockquote>
<p>There are (at least) three ways to create this icon:</p>
<ol>
  <li>Use an image. By itself, or as a background, doesn’t matter. A bit old thinking, but definitely the easiest.</li>
  <li>Use an Icon Font (like the <a href="https://material.io/resources/icons/" target="_blank" rel="noopener">Material Icons</a>). Elegant and popular solution.</li>
  <li>Use meaningless markup and style them with CSS.</li>
</ol>
<p>I used the third option, because I promised a “CSS-only Hamburger Menu”, and not a “CSS-only Hamburger Menu with Image, Font and Cheese”.
  So let’s create those meaningless markups:</p>
<div class="language-html highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m-menu"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m-menu__burger"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span&gt;&lt;/span&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="3-toggle-state">3. Toggle state</h4>
<p>Then, we have to be able to define two states: <code class="language-plaintext highlighter-rouge">Open</code> and <code class="language-plaintext highlighter-rouge">Closed</code>. Without JavaScript our toolkit is very limited when we
  are talking about ‘state’. No doubt, the best tool for this job is the <code class="language-plaintext highlighter-rouge">checkbox</code>. This HTML element natively provides us what we
  need, and we don’t have to deal with any JavaScript to change its state. And most importantly: we can differentiate these states
  on CSS level.</p>
<div class="language-html highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m-menu"</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"m-menu__toggle"</span> <span class="na">type=</span><span class="s">"checkbox"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="4-menu-body">4. Menu body</h4>
<p>And of course we need the menu body itself and some content to make it useful:</p>
<div class="language-html highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m-menu"</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m-menu__content"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;nav&gt;</span>
            <span class="nt">&lt;h2&gt;</span>Categories<span class="nt">&lt;/h2&gt;</span>
            <span class="nt">&lt;ul&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"index.html"</span><span class="nt">&gt;</span>Cars<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"index.html"</span><span class="nt">&gt;</span>Girls<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"index.html"</span><span class="nt">&gt;</span>Money<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
            <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/nav&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="5-backdrop">5. Backdrop</h4>
<p>Unfortunately the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop" target="_blank" rel="noopener"><code class="language-plaintext highlighter-rouge">::backdrop</code> CSS pseudo-element</a>
  is not supported in every modern browser… ☞ Safari! Hello?? …so we have do a little bit of workaround.</p>
<div class="language-html highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m-menu"</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m-menu__backdrop"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now, that we have the menu skeleton, it’s time to add the style that makes all the magic.</p>
<h3 id="pimp-my-burger-up">Pimp my Burger up!</h3>
<p>To be able to do the CSS job in the right way, I like to visualize the layers and boxes in my head. We need to know which element will
  be over the other. Until the W3C is not ready with the <code class="language-plaintext highlighter-rouge">Mind Reader API</code>, I use this simple diagram:</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2020/frontend/create-a-simple-hamburber-menu-with-css/layers.jpg" width="800" />
  <figcaption class="a-illustration__caption">Box layers</figcaption>
</figure>
<p>The actual page content will be between the <code class="language-plaintext highlighter-rouge">BODY</code> and the <code class="language-plaintext highlighter-rouge">.m-menu</code> wrapper.</p>
<h4 id="recommendation">Recommendation</h4>
<p>There are some default styles I used to set up every time, to be able to calculate better with box sizes. If you don’t want to use any of
  the popular CSS “Frameworks”, I highly recommend you to use these setting as well. I believe they will make your life much easier.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="o">*,</span> <span class="o">*</span><span class="nd">::before</span><span class="o">,</span> <span class="o">*</span><span class="nd">::after</span> <span class="p">{</span>
    <span class="nl">box-sizing</span><span class="p">:</span> <span class="n">border-box</span><span class="p">;</span>
    <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
    <span class="nl">cursor</span><span class="p">:</span> <span class="nb">default</span><span class="p">;</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">html</span> <span class="p">{</span>
    <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100vw</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">62.5%</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">body</span> <span class="p">{</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100vw</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
    <span class="nl">font-variant-ligatures</span><span class="p">:</span> <span class="n">no-common-ligatures</span><span class="p">;</span>
    <span class="nl">font-feature-settings</span><span class="p">:</span> <span class="s1">"kern"</span><span class="p">,</span> <span class="s1">"liga"</span> <span class="m">0</span><span class="p">,</span> <span class="s1">"clig"</span> <span class="m">0</span><span class="p">;</span>
    <span class="py">scroll-behavior</span><span class="p">:</span> <span class="n">smooth</span><span class="p">;</span>
    <span class="nl">overflow-x</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="explanation">Explanation</h5>
<dl>
  <dt><code>box-sizing: border-box;</code></dt>
  <dd>
    Applied on every element and on the <code>before</code> and <code>after</code> pseudo-element. Helps calculating with the box sizes
    and positions.
  </dd>
  <dt><code>cursor: default;</code></dt>
  <dd>
    It's my personal preference, but I don't like the default cursor over the text. Sometimes it's really hard to find, where you left it.
  </dd>
  <dt><code>font-size: 62.5%;</code></dt>
  <dd>
    Applied on the HTML element. If your browser supports the unspoken rules, then this should set the base size to 10 pixels. And
    later on you can simply use the <a href="https://www.w3.org/TR/css-values-3/#rem" target="_blank" rel="noopener"><code>rem</code> unit</a> instead
    of <code>px</code>. Why? Because if the user decides to change the browser's default font sizing, the design will automatically scale
    properly and the design will not break apart.
  </dd>
  <dt><code>orverflow-x: hidden;</code></dt>
  <dd>
    We stretch the HTML, the BODY and also our menu wrapper to the maximum width of the browsing area. In general it's fine, but on
    Windows the scrollbars are those old-fashioned ones that consumes a narrow area (around 20 pixels) from this browsing area instead
    of being an overlay like on Mac OSX and on some Linux Distros (e.g.: Ubuntu). So when we have a long content, the vertical scrollbar
    appears, takes 20 pixels from the browsing area, and since our HTML is said to be <code>100vw</code>, the whole thing together will be
    <code>100vw + 20px</code>, which is wider than it can display, so the horizontal scrollbar will appear too. That is what we try to avoid.
    Of course you have to keep this in mind, and plan your design well to let enough space for the scrollbar.
  </dd>
</dl>
<h4 id="1-the-wrapper">1. The wrapper</h4>
<p>We put the wrapper into the top left corner and stretch it over the whole browser window and also stuck it into that position whatever happens.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nc">.m-menu</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">fixed</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100vw</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
  <span class="nl">z-index</span><span class="p">:</span> <span class="m">100</span><span class="p">;</span>
  <span class="nl">pointer-events</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>See that we use the <code class="language-plaintext highlighter-rouge">vw</code> (<em>viewport width</em>) and <code class="language-plaintext highlighter-rouge">vh</code> (<em>viewport height</em>) instead of a percentage value. Why? In nutshell, a very non
  precisely answer is, we use it because the percentage will be calculated from the parent element, while the viewport is calculated
  from the browser window area size. And together with the <code class="language-plaintext highlighter-rouge">position: fixed</code> it will be always in the same viewport position even if we
  scroll the content “below”. Yes, they are <strong>below</strong>, because this wrapper should be <strong>always on top</strong>. For this make sure that the
  <code class="language-plaintext highlighter-rouge">z-index</code>’s value is high enough.</p>
<blockquote>
  <p>But if it’s on the top it will block the underneath content!</p>
</blockquote>
<p>No, and here’s the little magic, I was talking about. The <code class="language-plaintext highlighter-rouge">pointer-events: none;</code> will make sure that this element will let every
  pointer (mouse) events through to the elements underneath.</p>
<h4 id="2-the-backdrop">2. The backdrop</h4>
<p>The first layer inside the wrapper - counting from bottom to top - is the backdrop. What the backdrop is about? According to the definition, it…</p>
<blockquote>
  <p>is a box the size of the viewport which is rendered immediately beneath any element being presented in full-screen mode. This includes both
    elements which have been placed in full-screen mode using the Fullscreen API and <dialog> elements.</dialog></p>
</blockquote>
<p>Cool. Unfortunately this definition belongs to the <code class="language-plaintext highlighter-rouge">::backdrop</code> CSS pseudo-element, which is not supported, so we have to make it work with a bit
  of thinking.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nc">.m-menu__backdrop</span> <span class="p">{</span>
  <span class="nl">z-index</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">fixed</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">);</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">opacity</span> <span class="m">500ms</span> <span class="n">ease-out</span><span class="p">;</span>
  <span class="nl">pointer-events</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Yet another full-streched element. However here we used percentage instead of viewport units. Remember what I wrote about the difference between these
  units? We defined the <strong>must have</strong> size of the whole menu for the wrapper. Each children will reflect to this, so the percentage is just fine.</p>
<p>We defined here some contradictory things, like setting semi-transparent <code class="language-plaintext highlighter-rouge">background-color</code> when also set the
  opacity to zero. Why? We define everything that it should have when it will be fully visible, but the initial state is to not show it. Other styles
  like <code class="language-plaintext highlighter-rouge">display: none</code>, or <code class="language-plaintext highlighter-rouge">visibility: hidden</code>, or positioning out of the scope are not suitable, because for the fade-in effect those are simply not
  good. And we want fancy eye-candy for our menu, don’t we?</p>
<p>See that we also ignore the click event on it. That is by purpose, our workaround solution doesn’t need to be clicked.</p>
<p>For now let it rest a bit, and continue with the rest of the menu.</p>
<h4 id="3-the-burger">3. The burger</h4>
<p>The next layer is the Hamburger <em>icon</em> which technically is only a visual thing.
  Within the wrapper we can bravely position the elements with the <code class="language-plaintext highlighter-rouge">absolute</code> value too.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nc">.m-menu__burger</span> <span class="p">{</span>
  <span class="nl">z-index</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">4rem</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">4rem</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">1.1rem</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">1.1rem</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0.6rem</span> <span class="m">0.4rem</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>This will position the <em>hamburger icon</em> box <code class="language-plaintext highlighter-rouge">11px</code> from the top left corner. This is only the container for the bars which are created from one single
  <code class="language-plaintext highlighter-rouge">span</code> element the good old <code class="language-plaintext highlighter-rouge">::before</code> and <code class="language-plaintext highlighter-rouge">::after</code> pseudo-elements.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nc">.m-menu__burger</span> <span class="nt">span</span><span class="o">,</span>
<span class="nc">.m-menu__burger</span> <span class="nt">span</span><span class="nd">::before</span><span class="o">,</span>
<span class="nc">.m-menu__burger</span> <span class="nt">span</span><span class="nd">::after</span> <span class="p">{</span>
    <span class="nl">content</span><span class="p">:</span> <span class="s2">''</span><span class="p">;</span>
    <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">3.2rem</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">0.4rem</span><span class="p">;</span>
    <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">1.2rem</span><span class="p">;</span>
    <span class="nl">background</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">0.3rem</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.m-menu__burger</span> <span class="nt">span</span><span class="nd">::before</span> <span class="p">{</span>
    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">-0.8rem</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.m-menu__burger</span> <span class="nt">span</span><span class="nd">::after</span> <span class="p">{</span>
    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.8rem</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="explanation-1">Explanation</h5>
<p>So basically we set to hamburger container to <code class="language-plaintext highlighter-rouge">40px ✕ 40px</code> with thick padding (two times <code class="language-plaintext highlighter-rouge">4px</code> on the sides and two times <code class="language-plaintext highlighter-rouge">6px</code> on top and bottom),
  that will reduce the inner area <code class="language-plaintext highlighter-rouge">32px ✕ 28px</code>. This will be our sandbox. The <code class="language-plaintext highlighter-rouge">32px</code> width is exactly the with of the horizontal lines (the <em>layers</em>
  of the hamburger), and the <code class="language-plaintext highlighter-rouge">28px</code> is also perfect, because it’s an easy to count value when we divide it with <strong>7</strong>.</p>
<p>Why seven? Because it’s easy to count with: three of them are the bars themselves - so the height of one bar is <code class="language-plaintext highlighter-rouge">4px</code> -, and four are the gaps
  around them (also <code class="language-plaintext highlighter-rouge">4px</code>). Since the pseudo-elements belong to the “<em>parent</em>” and they move together, we have to calculate a little bit weird way:</p>
<ul>
  <li>position the <code class="language-plaintext highlighter-rouge">span</code> to the middle: gap + <code class="language-plaintext highlighter-rouge">::before</code> + gap, which is <code class="language-plaintext highlighter-rouge">3 ✕ 4px</code>, so set the <code class="language-plaintext highlighter-rouge">margin-top</code> to <code class="language-plaintext highlighter-rouge">12px</code>.</li>
  <li>position the <code class="language-plaintext highlighter-rouge">::before</code> above the span: position of the <code class="language-plaintext highlighter-rouge">span</code> as root - gap - height of the <code class="language-plaintext highlighter-rouge">::before</code>, which is <code class="language-plaintext highlighter-rouge">0 - 4px - 4px</code>, so set the <code class="language-plaintext highlighter-rouge">margin-top</code> to <code class="language-plaintext highlighter-rouge">-8px</code>.</li>
  <li>position the <code class="language-plaintext highlighter-rouge">::after</code> under the span: position of the <code class="language-plaintext highlighter-rouge">span</code> as root + the height of the <code class="language-plaintext highlighter-rouge">span</code> + gap, which is <code class="language-plaintext highlighter-rouge">0 + 4px + px</code>, so set the <code class="language-plaintext highlighter-rouge">margin-top</code> to <code class="language-plaintext highlighter-rouge">8px</code></li>
</ul>
<p>The measuring looks something like this on the picture:</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2020/frontend/create-a-simple-hamburber-menu-with-css/measuring.jpg" width="800" />
  <figcaption class="a-illustration__caption">Measuring the hamburger menu icon</figcaption>
</figure>
<h4 id="4-the-toggle">4. The toggle</h4>
<p>The next layer is the toggle, the heart of the menu controlling. Remember, it’s a <code class="language-plaintext highlighter-rouge">checkbox</code> element, that should be clickable, but not really visible.
  So we do the following:</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nc">.m-menu__toggle</span> <span class="p">{</span>
  <span class="nl">z-index</span><span class="p">:</span> <span class="m">3</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">4rem</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">4rem</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">1.1rem</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">1.1rem</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">outline</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">pointer-events</span><span class="p">:</span> <span class="n">all</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>See that the size and position in the initial state is the same as the hamburger’s, and positioned right above it. Yes, the trick is you can change the
  size of a checkbox. If you make it visible by setting the <code class="language-plaintext highlighter-rouge">opacity</code> to 1, you can see how weird it looks like. In fact in every browser it will look a
  bit different. But we don’t want to so it, we need it only to be functional. Luckily it will be, even after change it’s default size.
  And of course we have to make the hamburger clickable, so we set the <code class="language-plaintext highlighter-rouge">pointer-events: all</code>.</p>
<h4 id="5-the-menu">5. The menu</h4>
<p>The topmost layer is the menu content. It’s up to you how you design it, I prefer to make it similar to the one that the
  <a href="https://getmdl.io/components/index.html#layout-section" target="_blank" rel="noopener">Material Design Lite</a> uses. For this tutorial I focus on the menu
  “<em>frame</em>” only.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nc">.m-menu__content</span> <span class="p">{</span>
  <span class="nl">z-index</span><span class="p">:</span> <span class="m">4</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">30rem</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">2rem</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">230</span><span class="p">,</span> <span class="m">230</span><span class="p">,</span> <span class="m">230</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
  <span class="nl">transform-origin</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-31.5rem</span><span class="p">);</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">transform</span> <span class="m">0.5s</span> <span class="n">cubic-bezier</span><span class="p">(</span><span class="m">0.77</span><span class="p">,</span><span class="m">0.2</span><span class="p">,</span><span class="m">0.05</span><span class="p">,</span><span class="m">1.0</span><span class="p">);</span>
  <span class="nl">pointer-events</span><span class="p">:</span> <span class="n">all</span><span class="p">;</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">1rem</span> <span class="m">0</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.75</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="explanation-2">Explanation</h5>
<p>We defined a fixed <code class="language-plaintext highlighter-rouge">300px</code> width and stretched it vertically. By setting the <code class="language-plaintext highlighter-rouge">overflow: auto</code>, we make sure to support the menus with many entries and
  also make it work on small screens, like smart phones. We also enabled all <code class="language-plaintext highlighter-rouge">pointer-events</code>, because we want to make the menu items to be clickable.
  Remember you have to do this only within the wrapper.</p>
<p>We also added a little drop shadow just to visually highlight the menu. You can also see that we moved out the menu from the scope to the left with
  the size of <code class="language-plaintext highlighter-rouge">315px</code>. How we get this number? It’s the width of the menu (<code class="language-plaintext highlighter-rouge">300px</code>), the spread of the shadow (<code class="language-plaintext highlighter-rouge">10px</code>) and a little bit of safety margin
  (<code class="language-plaintext highlighter-rouge">5px</code>).</p>
<p>And don’t think that I am a Math genius, the <code class="language-plaintext highlighter-rouge">cubic-bezier</code> transition was fine-tuned with the <a href="https://www.edreamz.com/blog/fine-tuning-css-transitions-directly-in-chrome" target="_blank" rel="noopener">Google Chrome’s Dev Tools</a>.</p>
<h4 id="6-changing-state">6. Changing state</h4>
<p>Now we have the menu’s initial style ready. But how will it work? Let’s define the workflow:</p>
<ol>
  <li>Initial / Closed state: the hamburger icon is clickable, the rest of the page is not blocked by the wrapper</li>
  <li>Click on the hamburger</li>
  <li>The menu slides in and the backdrop fades in. ☞ Open state.</li>
  <li>Open state: the menu is visible, the menu items are individually clickable. The backdrop blocks the website “<em>under</em>” it, and the full backdrop is clickable.</li>
  <li>Click on the menu items will load the targeted address, click on the backdrop will slide out the menu and fades out the backdrop. ☞ Closed state.</li>
</ol>
<p>This behavior can be defined in three little rules which will be applied only when the checkbox is checked. For this we have to use the <code class="language-plaintext highlighter-rouge">:checked</code>
  pseudo-class selector which is widely supported.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nc">.m-menu__toggle</span><span class="nd">:checked</span> <span class="p">{</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>When the unvisible checkbox is clicked, it will get the <code class="language-plaintext highlighter-rouge">checked</code> property set by the browser, and with the <code class="language-plaintext highlighter-rouge">:checked</code> pseudo-class selector we can
  apply additional styles. Here we make it stretched to <code class="language-plaintext highlighter-rouge">100%</code> in both directions. Why we use percent instead of the <code class="language-plaintext highlighter-rouge">vw</code> and <code class="language-plaintext highlighter-rouge">vh</code> units? Because of the
  same reason we used it for the backdrop.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nc">.m-menu__toggle</span><span class="nd">:checked</span> <span class="o">~</span> <span class="nc">.m-menu__content</span> <span class="p">{</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Here when the checkbox is checked the <code class="language-plaintext highlighter-rouge">.m-menu__content</code> will drop its transform style, which was <code class="language-plaintext highlighter-rouge">translateX(-31.5rem);</code>. In this case the <code class="language-plaintext highlighter-rouge">none</code> is
  equal with setting it to <code class="language-plaintext highlighter-rouge">translateX(0);</code> but in a shorter way. The transition will add some dynamics into the slide-in.</p>
<div class="language-css highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nc">.m-menu__toggle</span><span class="nd">:checked</span> <span class="o">~</span> <span class="nc">.m-menu__backdrop</span> <span class="p">{</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Setting the backdrops’s <code class="language-plaintext highlighter-rouge">opacity</code> to <code class="language-plaintext highlighter-rouge">1</code> will make it appear with a transition effect that we defined in the backdrop’s initial state. And since we
  did it there, it will also “<em>played</em>” backwards when we get back to that state.</p>
<h3 id="live-demo">Live Demo</h3>
<p>I drop together a little demo, check it out on <a href="https://codepen.io/navig80/pen/VwYVBmo" target="_blank" rel="noopener">CodePen</a>.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Creating something spectacular is not that difficult if we use our imagination and practice a little bit. Even this tutorial is very very easy, and I still could
  optimize it’s structure a little bit while I was writing this article. It’s all about learn, practice and learn again. And don’t be afraid to leave the comfort
  zone of the various frameworks.</p>
<p>Is this a good practice or a worst practice? Please tell me.</p>
]]></content><author><name>Gábor Iván</name></author><category term="frontend" /><category term="css" /><category term="html" /><category term="smart" /><summary type="html"><![CDATA[Let's start with a pretty easy and smart solution. No JavaScript, only CSS.]]></summary></entry><entry><title type="html">Setup WSL2 with Docker</title><link href="http://0.0.0.0:4000/wsl/setup-wsl2-with-docker" rel="alternate" type="text/html" title="Setup WSL2 with Docker" /><published>2020-01-10T09:00:00+00:00</published><updated>2022-10-05T19:13:18+00:00</updated><id>http://0.0.0.0:4000/wsl/setup-wsl2-with-docker</id><content type="html" xml:base="http://0.0.0.0:4000/wsl/setup-wsl2-with-docker"><![CDATA[<h3 id="prolog">Prolog</h3>
  <p>For this experiment I used my own desktop PC which was recently upgraded after 7 years. New motherboard, new CPU, new
    RAM, new VGA. The upgradable components are the benefits, when you have an old-fashioned workstation. And for the new
    hardware, I installed a brand new Windows 10 Professional. Please don’t start flame war about operating systems, I
    have my own reasons to choose this.</p>
  <p>With the clean install I found it to be the perfect time to use all the knowledge I gathered during the years, and bring
    together a smooth, easy-to-use and maintainable workspace for web development, that sucks less to set up and feels better
    to use than ever before.</p>
  <h3 id="-todo-follow-the-trail">// @TODO follow the trail</h3>
  <h4 id="before-you-start">Before you start</h4>
  <p>The following list will change soon, as Microsoft will ship all the new features in Q2 2020 (if they can keep the deadlines).
    That is why I set the expiration day of this article to the upcoming months. So this tutorial is for those who don’t want to
    wait and are not afraid of taking a little bit of risk.</p>
  <h4 id="the-list">The list</h4>
  <p>It might be too long to write a step-by-step tutorial, and we all know, that when we need something, we only need to search
    for it on the Internet, and there’s a high chance to find the right solution. No need to reinvent the wheel.</p>
  <p>In fact, the following links cover most part of the setup process, so I just had to put them in the right order. But since some of them are
    not so recent, I unintentionally made <a href="#additional-discoveries">new discoveries</a>. Don’t forget to read them before you
    take the actions described on the linked pages.</p>
  <p>So here are the sources you will need to have a nice DIY-day:</p>
  <ol>
    <li><a href="https://www.microsoft.com/en-gb/software-download/windows10ISO" target="_blank" rel="noopener">Install Windows 10</a>.</li>
    <li><a href="https://winaero.com/blog/enable-openssh-client-windows-10/" target="_blank" rel="noopener">Enable the built-in OpenSSH Client</a> if it’s not present by default.</li>
    <li><a href="https://insider.windows.com/en-us/" target="_blank" rel="noopener">Join the Insider Program</a>.</li>
    <li><a href="https://www.windowscentral.com/how-switch-between-fast-and-slow-rings-windows-10-insider-preview" target="_blank" rel="noopener">Change your Insider settings to the “Fast Ring”</a>, to get the Windows <strong>build 18917</strong> or higher.</li>
    <li><a href="https://gitforwindows.org/" target="_blank" rel="noopener">Install Git for Windows</a>.</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">Install WSL1</a>.</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-install" target="_blank" rel="noopener">Install WSL2</a>.</li>
    <li><a href="https://docs.docker.com/docker-for-windows/edge-release-notes/" target="_blank" rel="noopener">Install the Edge release of the Docker Desktop Community</a>, version 2.1.7.0 or higher</li>
    <li><a href="https://devblogs.microsoft.com/commandline/share-environment-vars-between-wsl-and-windows/" target="_blank" rel="noopener">Share ENV variables between WSL and Windows</a></li>
    <li><a href="https://blog.joaograssi.com/windows-subsystem-for-linux-with-oh-my-zsh-conemu/" target="_blank" rel="noopener">Set up a more productive shell</a></li>
    <li><a href="https://blog.anaisbetts.org/using-github-credentials-in-wsl2/" target="_blank" rel="noopener">Fix the “git push to GitHub from WSL” issue</a></li>
  </ol>
  <p>From this point you can start your work with docker, it’s easy and fun. If you use PHPStorm for your work, <a href="#phpstorm">I have some tips</a>
    to make your life a little bit easier.</p>
  <h3 id="additional-discoveries"><a name="additional-discoveries"></a>Additional discoveries</h3>
  <h4 id="in-step-2-about-the-openssh">In step #2: About the OpenSSH</h4>
  <p>In my Windows 10 build the OpenSSH Client was enabled by default. It’s a luck, because I missed the release notes that
    Microsoft actually added it to the Windows at all. Otherwise I would install some third party solution. But the built-in
    is just as good as any other or even better.</p>
  <h4 id="in-step-8-issues-with-the-docker-desktop">In step #8: Issues with the Docker Desktop</h4>
  <p>After installing the Edge release, start the application (look for it in the system tray), right click on the icon and
    choose the settings. There <strong>you MUST uncheck</strong> the <em>Start Docker Desktop when you log in</em> option to avoid to start automatically
    earlier than the WSL2 engine. Because when it happens, none of your local drives will be mounted in any of the Docker containers
    and mounting manually always sucks.</p>
  <figure class="a-illustration">
    <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2020/wsl/setup-wsl2-with-docker/docker-desktop.png" width="700" />
    <figcaption class="a-illustration__caption">Settings of the Docker Desktop</figcaption>
  </figure>
  <p>Under the <em>Resources</em> menu, enable the WSL integration by selecting the Linux distribution you have.</p>
  <figure class="a-illustration">
    <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2020/wsl/setup-wsl2-with-docker/docker-desktop-2.png" width="700" />
    <figcaption class="a-illustration__caption">Choose your WSL distribution</figcaption>
  </figure>
  <p>And in the future, first always start the WSL first, and then the Docker Desktop app.</p>
  <h4 id="in-step-10-skip-the-terminal-emulator-part">In step #10: Skip the terminal emulator part</h4>
  <p>Many tutorial pages devote a whole chapter to the terminal emulators, particularly to the ConEmu. No doubt, that is a marvellous application,
    but let’s stop a little bit and think. Do we really need it? What will we win with another terminal? Okay, the <strong>CMD.exe</strong> is not enough, the
    <strong>PowerShell</strong> has a different purpose, the Git for windows shipped the <strong>BASH.exe</strong> which is a good start, but now we have the <strong>WSL.exe</strong>.
    We need that, we work with that, we work in that.</p>
  <h3 id="fine-tuning-the-phpstorm-terminal"><a name="phpstorm"></a>Fine tuning the PHPStorm terminal</h3>
  <p><a href="https://www.jetbrains.com/" target="_blank" rel="noopener">JetBrains</a> is an amazing company, which develops some really fantastic and without-only tools
    for the developer community. I am a PHP developer, so I use the <a href="https://www.jetbrains.com/phpstorm/" target="_blank" rel="noopener">PHPStorm</a>, but if
    you feel more comfortable on the frontend side, the <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a> is also a perfect choice.
    I believe, the common root makes this tutorial valid for the WebStorm as well.</p>
  <p>I don’t really like the endless path of the Documents folder in Windows, so I usually store my projects on my secondary hard drive: <code>D:\Project</code>.
    For the sake of clarity I create an example project: <code>MyTestProject</code>. The PHPStorm sets the built-in terminal’s path to the project root, so the
    Terminal will look something like this:</p>
  <figure class="a-illustration">
    <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2020/wsl/setup-wsl2-with-docker/phpstorm.png" width="800" />
    <figcaption class="a-illustration__caption">The default state of the Terminal tool in PHPStorm</figcaption>
  </figure>
  <p>The PHPStorm uses the <code>CMD.exe</code> by default, but luckily we can change that at our own will.</p>
  <figure class="a-illustration">
    <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2020/wsl/setup-wsl2-with-docker/phpstorm-2.png" width="800" />
    <figcaption class="a-illustration__caption">Terminal settings in PHPStorm</figcaption>
  </figure>
  <p>If the we change the <code>Shell path</code>’s value to <code>C:\Windows\System32\wsl.exe</code>, we see our beautiful PowerlineShell prompt we had
    set up in the step #10. First you need to close any opened PHPStorm Terminal window to make the changes take affect.</p>
  <figure class="a-illustration">
    <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2020/wsl/setup-wsl2-with-docker/phpstorm-3.png" width="800" />
    <figcaption class="a-illustration__caption">The Terminal tool with the WSL prompt</figcaption>
  </figure>
  <p>It’s simple, isn’t it? Then why am I wasting your previous time on write about a straightforward process? The answer is:</p>
  <blockquote>
    <p>Because in some cases - which I can’t identify - the Docker gives an extra twist to the simplicity.</p>
  </blockquote>
  <p>Yes, we want to use Docker. So let’s create a simple Docker machine. Personally I like the <code>docker-compose up -d</code> command more than the
    <code>docker run --one --billion --different --spooky --parameters</code>. So let’s create a simple Docker composition for webpack :</p>
  <div class="language-yaml highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.7'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">my_webpack</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">docker.my_webpack</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">my_webpack'</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">./:/app'</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>…and a <code>DOCKERFILE</code>, named <code>docker.my_webpack</code>:</p>
<div class="language-docker highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">FROM</span><span class="s"> node:13.4.0-alpine</span>

<span class="k">WORKDIR</span><span class="s"> /app</span>

<span class="k">RUN </span>npm <span class="nb">install </span>webpack@4.41.2 <span class="nt">-g</span>
<span class="k">RUN </span>npm <span class="nb">install </span>webpack-cli@3.3.10 <span class="nt">-g</span>
<span class="k">RUN </span>apk add bash
<span class="k">CMD</span><span class="s"> tail -f /dev/null</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>After finish the set up, the Terminal prompt may - but not necessarily - change from the project’s folder to WSL mounting point, and will look something like this:</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2020/wsl/setup-wsl2-with-docker/phpstorm-4.png" width="800" />
  <figcaption class="a-illustration__caption">The Terminal tool with wrong default path</figcaption>
</figure>
<p>I am not sure why it happens if it happens at all, and not sure why it doesn’t happen for others with the same setup. But it’s a fact, it happened to me.
  And one thing is sure: this is definitely not good. So how can we fix it? We need to use the environment variable in the PHPStorm we have seen
  in step #9, and modify the <code>.zshrc</code> file in the WSL interface.</p>
<h4 id="add-custom-environment-variable-to-phpstorms-terminal">Add custom ENVIRONMENT variable to PHPStorm’s Terminal</h4>
<p>Open up the Terminal’s settings window in PHPStorm again, and in the <code>Environment variables</code> field add the following:</p>
<div class="language-plaintext highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>PROJECT=MyTestProject;PATH=%PATH%\;D:\Projects;WSLENV=PROJECT/u
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Let me explain what we added:</p>
<ul>
  <li><code>PROJECT=MyTestProject</code> - we define a new environment variable, PROJECT and its value is the folder name of our project</li>
  <li><code>PATH=%PATH%\;D:\Projects</code> - we add the project’s parent folder to the PATH</li>
  <li><code>WSLENV=PROJECT/u</code> - we pass the PROJECT variable to the WSLENV. The <code>\u</code> flag indicates the value should only be included when invoking WSL from Win32.</li>
</ul>
<p>As you see, the PATH variable is not included in the WSLENV, however if we don’t present it here, the WSL won’t start.</p>
<p>So, in theory when the PHPStorm opens its Terminal emulator and calls the <code>wsl.exe</code>, it should pass all these variables to it.</p>
<h4 id="change-the-zshell-init-script">Change the ZShell init script</h4>
<p>Let’s get into the <code>WSL</code> command line and edit the <code>.zshrc</code> file in the “<em>home</em>” folder:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>vim ~/.zshrc
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Add the following lines to the end of the file:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c"># correct the initial path</span>
<span class="nb">cd</span> /mnt/d/Projects

<span class="c"># correct the project path</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nt">-v</span> PROJECT <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">cd</span> <span class="nv">$PROJECT</span>
<span class="k">fi</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>First we enforce the <code>WSL</code> to go into our general project root folder’s mounted equivalent: <code>/mnt/d/Projects</code>. I think it’s
  not a bad idea to start our work in WSL always in the same folder to not mess up the whole system.</p>
<p>Second, we look for the <code>PROJECT</code> environment variable. Remember, we’ve just passed it through the WSLENV. If this variable exists, it
  tries to use it as a folder name, and additionally to the previous, it tries to enter into it. If we set it up correctly, this should work.</p>
<h3 id="thats-all-for-now">That’s all for now</h3>
<p>Am I right? Am I not? Please feel free to share your opinions.</p>
]]></content><author><name>Gábor Iván</name></author><category term="wsl" /><category term="docker" /><category term="wsl2" /><category term="poweline-shell" /><category term="phpstorm" /><category term="windows" /><summary type="html"><![CDATA[I collected all the steps I had to make to build a full-value (web)development environment on Windows 10.]]></summary></entry><entry><title type="html">What am I doing???</title><link href="http://0.0.0.0:4000/general/what-am-i-doing" rel="alternate" type="text/html" title="What am I doing???" /><published>2020-01-08T14:23:00+00:00</published><updated>2022-10-05T19:13:18+00:00</updated><id>http://0.0.0.0:4000/general/what-am-i-doing</id><content type="html" xml:base="http://0.0.0.0:4000/general/what-am-i-doing"><![CDATA[<h3 id="i-cannot-explain-the-why">I cannot explain the why</h3>
  <p>For a long time now I always felt I want to shout out to the world all the crazy ideas I have in my mind.
    But also I am full of fear. With lots of fears, because writing articles and publish them to the public is a
    huge responsibility. And writing a blog is a double-edged weapon.</p>
  <ul>
    <li>What if I write something rubbish, because the English is not my mother tongue?</li>
    <li>What if I write something absolutely wrong, because I was too lazy to read a book in the given topic?</li>
    <li>What if I write something totally bullshit, that ruins my prestige to a level, where nobody will ever count with me again?</li>
  </ul>
  <h3 id="what-will-i-present-here">What will I present here?</h3>
  <p>Tips and tricks. Ideas and workarounds. Smart and stupid solutions. Tutorials for the dummy me, to have them later
    when I need them. And of course, it would be amazing if someone else other than me would also find these articles useful.</p>
  <p>To fulfill this goal, I will try my best to entertain You. I will try to explain every detail of my ideas, and present not only
    code samples but also links to the working source codes.</p>
  <p>I had some private projects in the past that were really good to train myself, but they mostly remained unfinished.
    My plan is to atomize these projects as much as possible, and create standalone modules or libraries, then publish
    them here one-by-one.</p>
  <p>I don’t say, that I am a top programmer with super-human knowledge in every programming language and technology. I know
    what I know, but I don’t know what I know wrong. The I am sure of one thing: I’d like to share my experiences. And I
    hope You welcome them. And You - dear visitor - can correct me, and judge me any time.</p>
  ]]></content><author><name>Gábor Iván</name></author><category term="general" /><category term="personal" /><summary type="html"><![CDATA[It is like a professional suicide. I decided to share my thoughts in various IT-related topics. Maybe a good idea, maybe not. The people of the Internet will judge me.]]></summary></entry></feed>
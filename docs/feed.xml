<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-02-24T15:37:47+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Worst Practice</title><subtitle></subtitle><author><name>Gábor Iván</name></author><entry><title type="html">Develop PHP on WSL2 in 2023</title><link href="http://0.0.0.0:4000/devenv/develop-php-on-wsl2-in-2023" rel="alternate" type="text/html" title="Develop PHP on WSL2 in 2023" /><published>2023-01-31T17:00:00+00:00</published><updated>2023-02-24T15:37:47+00:00</updated><id>http://0.0.0.0:4000/devenv/develop-php-on-wsl2-in-2023</id><content type="html" xml:base="http://0.0.0.0:4000/devenv/develop-php-on-wsl2-in-2023"><![CDATA[<h3 id="three-years">Three years</h3>
      <p>In the last three years many things changed:</p>
      <ul>
        <li>The WSL2 went production.</li>
        <li>The Windows OS got a new version (11), and it has an amazing WSL2 support.</li>
        <li>The Docker also shipped a better WSL integration.</li>
        <li>The PHPStorm IDE with the latest update made it easy and fun to work with WSL and Docker.</li>
        <li>Microsoft released the Windows Terminal, and it’s a must-have jack of all trades terminal emulator.</li>
      </ul>
      <h3 id="a-clean-start">A clean start</h3>
      <p>I prefer to do a clean installation to avoid all the trash we piled up during our previous experiments. But that’s the
        most optimistic way.</p>
      <h4 id="windows">Windows</h4>
      <p>Although it’s possible to use WSL2 on Windows 10, I would say if you can, please upgrade to Windows 11. It’s worth, 
        because of the much better integration and feature-support. So preferably you have a clean installation of Windows 11 
        (Build 22000 or higher). Use the <code class="language-plaintext highlighter-rouge">winver</code> command in <code class="language-plaintext highlighter-rouge">cmd.exe</code> to check yours.</p>
      <h3 id="applications">Applications</h3>
      <p>Against all the requirements of different official and non-official websites, you don’t need to install <code class="language-plaintext highlighter-rouge">git</code>, <code class="language-plaintext highlighter-rouge">php</code>, 
        <code class="language-plaintext highlighter-rouge">ruby</code> and most of the other development stuffs onto Windows. You will use them from inside WSL.</p>
      <h4 id="wsl2">WSL2</h4>
      <p>You can also install it from <code class="language-plaintext highlighter-rouge">Windows PowerShell</code>, but I would recommend to install it from the 
        <a href="https://aka.ms/wslstorepage">Microsoft Store</a>, because there - for some unknown reasons - they ship new features faster
        than into the command line repository. One such painfully missed new and awesome feature is the <code class="language-plaintext highlighter-rouge">systemd</code> support.</p>
      <p>When you install it, and choose the Linux distribution to use, I recommend to use Ubuntu. The only reason is it has an
        insane level of support, and as I experienced, most of the know-hows and issue solving topics on <a href="https://www.stackoverflow.com">Stackoverflow</a>
        in the <code class="language-plaintext highlighter-rouge">Linux</code> subject are belong to Ubuntu.</p>
      <p>Whenever the process asks you for a username and password to give, don’t go crazy, it’s a sandbox playground, you won’t
        host it as a webserver (hopefully). So just take it easy and give something easy to type. I gave my name <code class="language-plaintext highlighter-rouge">gabor</code>, but 
        you can do anything, for example <code class="language-plaintext highlighter-rouge">dev</code> as I did it three years ago. Give username and password the same. Not super secure,
        but only you will use it.</p>
      <h4 id="docker-desktop">Docker Desktop</h4>
      <p>Lately, there are <a href="https://nickjanetakis.com/blog/install-docker-in-wsl-2-without-docker-desktop">initiatives</a> to keep 
        Docker within WSL. Personally I am great supporter of this idea, but right now it seems to be very hacky. I would wait
        until it’s officially supported, so for now, please install the infamously big and resource-hungry
        <a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>.</p>
      <h4 id="windows-terminal">Windows Terminal</h4>
      <p>First there was the <code class="language-plaintext highlighter-rouge">CMD.EXE</code>. Later we got the <code class="language-plaintext highlighter-rouge">Windows PowerShell</code>. But to be honest, anybody, who took a bit seriously 
        the web development, never used these, and installed alternative command line emulators instead. But now, we have the
        <a href="https://aka.ms/terminal">Windows Terminal</a> that can integrate any other terminals. By default, the <code class="language-plaintext highlighter-rouge">CMD</code> and <code class="language-plaintext highlighter-rouge">PowerShell</code>
        are there, but after installing the <code class="language-plaintext highlighter-rouge">WSL</code> you will automatically get the “Ubuntu” option from the dropdown list. And this
        is exactly what we need.</p>
      <h4 id="phpstorm">PHPStorm</h4>
      <p>There is a big group in the developer community who take their vote on the <a href="https://code.visualstudio.com/Download">VSCode</a>.
        Personally I didn’t find it to fit my expectations after using PHPStorm for a decade. “<em>But VSCode is free</em>” - that’s what
        they used to say. Yes, it’s true. On the other hand you can get PHPStorm for free too (4 3 2, HAHAHA!), if you apply for the
        <a href="https://www.jetbrains.com/community/opensource/#support">Open Source License</a>. But if you don’t qualify for this license,
        that <a href="https://www.jetbrains.com/phpstorm/buy/#personal?billing=monthly">10$/month</a> won’t make anybody homeless. I bet you
        pay more on video streaming, don’t you?</p>
      <h3 id="fine-tune">Fine tune</h3>
      <p>After you have all the necessary applications, let’s make them work together.</p>
      <h4 id="docker-desktop-1">Docker Desktop</h4>
      <p>First, take the Docker Desktop and make it available for the WSL2. To do that, open the application, and on the top
        right (next to the “Sign in”/Profile) click on the cogwheel to get to the <code class="language-plaintext highlighter-rouge">Settings</code>. There, click on the <code class="language-plaintext highlighter-rouge">Resources</code> and
        the <code class="language-plaintext highlighter-rouge">WSL Integration</code> options. Enable the WSL integration and choose the Linux distro you have (Ubuntu).</p>
      <figure class="a-illustration">
        <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2023/devenv/develop-php-on-wsl2-in-2023/docker-1.png" width="700" />
        <figcaption class="a-illustration__caption">Choose your WSL distribution</figcaption>
      </figure>
      <h4 id="windows-terminal-1">Windows Terminal</h4>
      <p>When you first open the Windows Terminal, you will get the <code class="language-plaintext highlighter-rouge">CMD</code> as default terminal. Next to the actual tab, there’s a 
        dropdown menu, where you can open other terminals. Choose <code class="language-plaintext highlighter-rouge">Ubuntu</code> to get to the WSL. if it’s the first time opening the
        WSL terminal, it may take some time as it has to boot up. But it’s fast.</p>
      <p>Personally I’d like to store my Projects in a separate place, so I recommend to do the following:</p>
      <div class="language-bash highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre>
        </td>
        <td class="rouge-code">
          <pre><span class="nb">cd
mkdir </span>Projects
</pre>
        </td>
      </tr>
    </tbody>
  </table>
</code></pre>
</div>
</div>
<p>Now, from the terminal’s dropdown menu, select the <code class="language-plaintext highlighter-rouge">Settings</code>, and in the <code class="language-plaintext highlighter-rouge">Startup</code> menu, change the default profile to <code class="language-plaintext highlighter-rouge">Ubuntu</code>.</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2023/devenv/develop-php-on-wsl2-in-2023/terminal-1.png" width="700" />
  <figcaption class="a-illustration__caption">Change default profile</figcaption>
</figure>
<p>You can customize your Ubuntu profile as much as you want, this application is very flexible, so give a virtual hug
  to whatever Microsoft team developed this. One big plus is you can set your default starting directory. I set it to my
  <code class="language-plaintext highlighter-rouge">Projects</code> folder, so whenever I open the Windows Terminal, I will get into the WSL and into my work folder. What other
  reason would I have to open it, no?</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2023/devenv/develop-php-on-wsl2-in-2023/terminal-2.png" width="700" />
  <figcaption class="a-illustration__caption">Change startup directory</figcaption>
</figure>
<p>You can change the theme as well, my personal favourite is the <code class="language-plaintext highlighter-rouge">Solarized Dark</code> with the <a href="https://www.nerdfonts.com/font-downloads">Meslo Nerd Font</a>.</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2023/devenv/develop-php-on-wsl2-in-2023/terminal-3.png" width="700" />
  <figcaption class="a-illustration__caption">Change theme and font</figcaption>
</figure>
<h4 id="wsl">WSL</h4>
<p>Well, this is a bigger leap. The base state of the WSL (Ubuntu) is just a fresh clean installation, nothing is customized 
  there. So the first thing to do is update:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nt">-y</span> upgrade
<span class="nb">sudo </span>apt-get <span class="nt">-y</span> dist-upgrade
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="install-some-packages-you-may-need">Install some packages you may need</h5>
<p>There are some commonly used packages which are not necessarily shipped with the WSL’s Ubuntu by default. So just to
  make sure everything will work as expected, do a safety check and run this command:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nb">sudo </span>apt-get <span class="nt">-y</span> <span class="nb">install </span>git unzip zsh curl build-essential <span class="se">\</span>
ca-certificates sqlite3 software-properties-common <span class="se">\</span>
lsb-release apt-transport-https python3 python3-pip

<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>dbg
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="install-oh-my-zsh">Install Oh my zsh</h5>
<p>Yes, <code class="language-plaintext highlighter-rouge">sh</code> is good, <code class="language-plaintext highlighter-rouge">bash</code> is better, but if you want an all-inclusive experience, I recommend to install the <code class="language-plaintext highlighter-rouge">Oh my zsh</code>
  shell. It has some benefits that will come in handy.</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="install-the-powerlevel10k-theme">Install the Powerlevel10k theme</h5>
<p>Open the WSL and run the following commands:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre>
  </td>
  <td class="rouge-code">
    <pre>git clone <span class="nt">--depth</span><span class="o">=</span>1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
<span class="nb">echo</span> <span class="s1">'source ~/powerlevel10k/powerlevel10k.zsh-theme'</span> <span class="o">&gt;&gt;</span>~/.zshrc
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now open the <code class="language-plaintext highlighter-rouge">~/.zshrc</code> file in any editor you prefer and make sure the following line is set:</p>
<div class="language-ini highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="py">ZSH_THEME</span><span class="p">=</span><span class="s">"powerlevel10k/powerlevel10k"</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>If it’s there, it’s time to do some customization. Run the following command:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>p10k configure
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>This will guide you through some setup questions.</p>
<p>After finishing the setup, if you find the prompt too long, for example you see your username, or you are deep in the 
  directory tree and the prompt gets overflow, you can still fix it.</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2023/devenv/develop-php-on-wsl2-in-2023/wsl-2.png" width="700" />
  <figcaption class="a-illustration__caption">Prompt before</figcaption>
</figure>
<p>Open again the <code class="language-plaintext highlighter-rouge">~/.zshrc</code> file with an editor and add the following:</p>
<div class="language-ini highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="err">prompt_context()</span> <span class="err">{}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>This will wipe out the unnecessary user information from the prompt. Now open the <code class="language-plaintext highlighter-rouge">~/.p10k.zsh file</code> and look for the 
  following settings and change their values:</p>
<div class="language-ini highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="py">POWERLEVEL9K_SHORTEN_STRATEGY</span><span class="p">=</span><span class="s">default</span>
<span class="py">POWERLEVEL9K_SHORTEN_DELIMITER</span><span class="p">=</span><span class="s">'\u2026'</span>
<span class="py">POWERLEVEL9K_SHORTEN_DIR_LENGTH</span><span class="p">=</span><span class="s">2</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Save the files, then close and reopen the terminal to apply the changes:</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2023/devenv/develop-php-on-wsl2-in-2023/wsl-3.png" width="700" />
  <figcaption class="a-illustration__caption">Prompt after</figcaption>
</figure>
<h5 id="install-the-latest-nodejs">Install the latest NodeJS</h5>
<p>If you ask yourself, “Why do I have to install anything into WSL, when I will use Docker?”, you are more or less right.
  The answer is simple: Because there are some cases when it’s better to have it locally. Especially when you work with an
  IDE like the PHPStorm which has a bunch of inspection tools running in the background.</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre>
  </td>
  <td class="rouge-code">
    <pre>curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
nvm <span class="nb">install </span>node
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>If the <code class="language-plaintext highlighter-rouge">nvm install node</code> command fails, you need to close and reopen the terminal window and try again.</p>
<p><strong>NOTE:</strong> after the NodeJS installation the poweline10k prompt may start to show the node/nvm/npm version. If it disturbs you,
  you can remove it by editing the <code class="language-plaintext highlighter-rouge">~/.p10k.zsh</code> file and look for the <code class="language-plaintext highlighter-rouge">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS</code> setting. Just
  comment out or delete everything you don’t need there.</p>
<p>Verify the installation with:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre>nvm <span class="nt">--version</span>
node <span class="nt">--version</span>
npm <span class="nt">--version</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="install-php-with-some-packages">Install PHP with some packages</h5>
<p>PHP alone may come in handy any time, so it has a better reason to install it into the WSL than the NodeJS had. To
  do so, just run the following:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nb">sudo </span>add-apt-repository ppa:ondrej/php <span class="c"># Press enter when prompted.</span>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> php8.2
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> php8.2-<span class="o">{</span>bcmath,bz2,cgi,cli,common,curl,fpm,fpm-dbgsym,gd,intl,ldap,mbstring,mysql,opcache,pdo,pgsql,soap,sqlite3,xdebug,xml,zip<span class="o">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Verify the installation with:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre>
  </td>
  <td class="rouge-code">
    <pre>php <span class="nt">-v</span>
php <span class="nt">-m</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="switch-between-installed-php-versions">Switch between installed PHP versions</h5>
<p>You may end up with multiple PHP installations on your WSL. If you don’t see the version that you need, you can
  check and switch between the installed versions with the following command.</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nb">sudo </span>update-alternatives <span class="nt">--config</span> php
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h5 id="install-composer-with-some-packages">Install Composer with some packages</h5>
<p>It’s also a good idea to install the <code class="language-plaintext highlighter-rouge">Composer</code> globally on WSL along with some code quality packages, so PHPStorm can
  easily use them.</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre>curl <span class="nt">-sS</span> https://getcomposer.org/installer <span class="nt">-o</span> /tmp/composer-setup.php
<span class="nv">HASH</span><span class="o">=</span><span class="sb">`</span>curl <span class="nt">-sS</span> https://composer.github.io/installer.sig<span class="sb">`</span>
php <span class="nt">-r</span> <span class="s2">"if (hash_file('SHA384', '/tmp/composer-setup.php') === '</span><span class="nv">$HASH</span><span class="s2">') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"</span>
<span class="nb">sudo </span>php /tmp/composer-setup.php <span class="nt">--install-dir</span><span class="o">=</span>/usr/local/bin <span class="nt">--filename</span><span class="o">=</span>composer
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Verify the installation with:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>composer <span class="nt">-V</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now it’s time to add the quality tools:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="n">composer</span> <span class="k">global</span> <span class="k">require</span> <span class="s2">"squizlabs/php_codesniffer"</span>
<span class="n">composer</span> <span class="k">global</span> <span class="k">require</span> <span class="s2">"friendsofphp/php-cs-fixer"</span>
<span class="n">composer</span> <span class="k">global</span> <span class="k">require</span> <span class="s2">"phpmd/phpmd"</span>
<span class="n">composer</span> <span class="k">global</span> <span class="k">require</span> <span class="s2">"phpstan/phpstan"</span>
<span class="n">composer</span> <span class="k">global</span> <span class="k">require</span> <span class="s2">"vimeo/psalm"</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="phpstorm-1">PHPStorm</h4>
<p>After we installed all the necessary tools onto WSL, we can easily configure our beloved IDE.</p>
<h5 id="set-up-the-default-php-interpreter">Set up the default PHP Interpreter</h5>
<p>Because of my work, I have only PHP 8.1 installed on my computer, so some screenshots may confuse you. But the same 
  works for PHP 8.2 too. Now this is what you need to do:</p>
<ol>
  <li>Open up the PHPStorm settings.</li>
  <li>Choose the PHP option, and then on the other end of the <code class="language-plaintext highlighter-rouge">CLI Interpreter</code> part press the <code class="language-plaintext highlighter-rouge">...</code> button.</li>
  <li>Press the <code class="language-plaintext highlighter-rouge">+</code> button and choose the <code class="language-plaintext highlighter-rouge">From Docker, Vagrant, VM, WSL, Remote...</code> option.</li>
  <li>Select the WSL option, and from the dropdown, select <code class="language-plaintext highlighter-rouge">Ubuntu</code>, then press <code class="language-plaintext highlighter-rouge">OK</code>.</li>
  <li>Set a name, that you can identify.</li>
  <li>Uncheck the <code class="language-plaintext highlighter-rouge">Visible only for this project</code> option, since this will be the default interpreter.</li>
  <li>In the <code class="language-plaintext highlighter-rouge">General</code> field you should see the PHP and Xdebug versions that you installed on the WSL</li>
</ol>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2023/devenv/develop-php-on-wsl2-in-2023/phpstorm-1.png" width="700" />
  <figcaption class="a-illustration__caption">The PHP Interpreter</figcaption>
</figure>
<h5 id="set-up-the-composer">Set up the composer</h5>
<p>The next step is to set the composer. Of course, we will set the WSL’s global composer package manager that we installed
  earlier. The setup is easy: just pop up the <code class="language-plaintext highlighter-rouge">Settings &gt; PHP &gt; Composer</code> and on the <code class="language-plaintext highlighter-rouge">Execution</code> fieldset choose the 
  <code class="language-plaintext highlighter-rouge">Remote Interpreter</code> option, then from the <code class="language-plaintext highlighter-rouge">CLI Interpreter</code> dropdown choose the previously created WSL interpreter.
  When for some reason it wouldn’t list it (happened once to me), you can still click on the <code class="language-plaintext highlighter-rouge">...</code> button to configure it.</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2023/devenv/develop-php-on-wsl2-in-2023/phpstorm-2.png" width="700" />
  <figcaption class="a-illustration__caption">The PHP Interpreter</figcaption>
</figure>
<h5 id="set-up-the-code-quality-tools">Set up the code quality tools</h5>
<p>There are many settings in PHPStorm that can be set to be visible only for the actual project. Well, the quality tools 
  are global settings, so if you set it specifically for one project, then it may (and most likely) not work for the other.
  Especially when you use remote/docker interpreter for them.</p>
<p>It can be also tricky to set remote interpreter (e.g. Docker) for them, because the IDE will periodically <em>ping</em> these 
  tools to perform the quality check and if you are happen to be in the middle of an XDebug session in the same Docker 
  machine, you can end up in a deadlock situation.</p>
<p>As once, I reported it to my colleagues:</p>
<blockquote>
  In PHPStorm end any active debug session and turn off the XDebug listener before opening the Settings window. 
  Edge case: if you land on an option that was set to use/listen/track the remote interpreter (the docker container) 
  it may start checking the setup on the remote interpreter which is blocked by the active debug session, so the 
  settings window is blocked from any further action. You won't be able to close the settings window to turn off the 
  listener.
</blockquote>
<p>So if you go to <code class="language-plaintext highlighter-rouge">Settings &gt; PHP &gt; Quality tools</code> you will see the following tools listed:</p>
<ul>
  <li>PHP_CodeSniffer</li>
  <li>PHP Mess Detector</li>
  <li>PHP CS Fixer</li>
  <li>Psalm</li>
  <li>PHPStan</li>
</ul>
<p>These are not listed because we installed the corresponding composer packages. In fact, we installed these composer packages,
  because these settings are listed by default in PHPStorm.</p>
<p>Now we are in the right place, we have to do a bit of repetitive action, but we have to do it only once, and not for 
  every project:</p>
<ol>
  <li>Fold out the given tool’s options.</li>
  <li>Turn it <code class="language-plaintext highlighter-rouge">[On]</code>.</li>
  <li>Press the <code class="language-plaintext highlighter-rouge">...</code> next to the <code class="language-plaintext highlighter-rouge">Configuration</code>.</li>
  <li>Press the <code class="language-plaintext highlighter-rouge">+</code> button and choose our WSL interpreter from the popup dropdown.</li>
  <li>Close the popup and press the <code class="language-plaintext highlighter-rouge">Verify</code> button to… well… obviously verify</li>
</ol>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2023/devenv/develop-php-on-wsl2-in-2023/phpstorm-3.png" width="700" />
  <figcaption class="a-illustration__caption">The PHP Interpreter</figcaption>
</figure>
<p>When you finished with all the tools, the checks will continuously bother you whenever you wrote not a spotless and modern
  code. Good luck with it!</p>
<p>But with this setup you can start working with PHP and WSL easier than ever before.</p>
]]></content><author><name>Gábor Iván</name></author><category term="devenv" /><category term="docker" /><category term="wsl2" /><category term="powerline-shell" /><category term="phpstorm" /><category term="windows" /><summary type="html"><![CDATA[Three years after my previous article on the subject, it's time to look at how different the process is now.]]></summary></entry><entry><title type="html">I give up the Advent of Code</title><link href="http://0.0.0.0:4000/general/holiday" rel="alternate" type="text/html" title="I give up the Advent of Code" /><published>2022-12-19T08:00:00+00:00</published><updated>2023-01-31T11:35:11+00:00</updated><id>http://0.0.0.0:4000/general/holiday</id><content type="html" xml:base="http://0.0.0.0:4000/general/holiday"><![CDATA[<h3 id="sad-but-true">Sad but true</h3>
  <p>In the last days (December 16 - 17) I was struggling to solve the tasks of the AoC. They seem to be more difficult than 
    I can solve them with an average web developer knowledge.</p>
  <p>Yes, they are only algorithms. Yes, I could figure out the 16th, and the 17th algorithm, and I also wrote it and solved 
    the first part fluently. My solution proved that it works with the second task as well, but only on the example data.</p>
  <p>Unfortunately my solutions were so hungry for resources, that they couldn’t deal with the part two of the puzzle with 
    the real input.</p>
  <p>Now I feel depressed and disappointed again. But this was the first time, I tried this challenge and I could solve more
    than the half of it. So in the end of the day, I still can be a bit proud of myself. Maybe, there would be some puzzles 
    in the rest of the days that I could still solve, but this game should be done for fun and relaxation, and not to be
    nervous and depressed. I already sacrificed two full Saturdays in a row for this challenge, and that’s too much price.</p>
  <p>So I think it’s really time to stop here and now. It’s Christmastime, and I must not prefer this coding game over my
    family.</p>
  <p>I will spend the rest of the year with relaxation - hopefully.</p>
  <h3 id="the-hints">The hints</h3>
  <p>Probably you could find much better solutions than my PHP codes. But hey, it’s the Worst Practice!</p>
  <h4 id="16th-of-december">16th of December</h4>
  <p>This task truly fucked my brain through the North Korean border. I have never had to deal with graphs, maybe once on the 
    university twenty-something years ago. So first I had to search the internet which way should I start. This is how I 
    found the <a rel="noopener" target="_blank" href="https://www.programmingalgorithms.com/algorithm/floyd%E2%80%93warshall-algorithm/php/">Floyd Warshall algorithm</a>.</p>
  <p>So I had to build up the graph, then make a distance graph for it, then walk the whole thing:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="kd">class</span> <span class="nc">Valve</span> 
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Cave</span>
<span class="p">{</span>
    <span class="c1">//...</span>
    
    <span class="k">private</span> <span class="k">function</span> <span class="n">intiDistanceGraph</span><span class="p">():</span> <span class="kt">void</span> <span class="p">{</span>
        <span class="nb">sort</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valveNames</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceGraph</span> <span class="o">=</span> <span class="nb">array_fill_keys</span><span class="p">(</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valveNames</span><span class="p">,</span>
            <span class="nb">array_fill_keys</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valveNames</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">INFINITE</span><span class="p">)</span>
        <span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">applyFloydWarshall</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="n">applyFloydWarshall</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valves</span> <span class="k">as</span> <span class="nv">$name</span> <span class="o">=&gt;</span> <span class="nv">$valve</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$valve</span><span class="o">-&gt;</span><span class="n">tunnels</span> <span class="k">as</span> <span class="nv">$valveName</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceGraph</span><span class="p">[</span><span class="nv">$name</span><span class="p">][</span><span class="nv">$valveName</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valves</span> <span class="k">as</span> <span class="nv">$name1</span> <span class="o">=&gt;</span> <span class="nv">$valve1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valves</span> <span class="k">as</span> <span class="nv">$name2</span> <span class="o">=&gt;</span> <span class="nv">$valve2</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valves</span> <span class="k">as</span> <span class="nv">$name3</span> <span class="o">=&gt;</span> <span class="nv">$valve3</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceGraph</span><span class="p">[</span><span class="nv">$name2</span><span class="p">][</span><span class="nv">$name3</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span>
                        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceGraph</span><span class="p">[</span><span class="nv">$name2</span><span class="p">][</span><span class="nv">$name3</span><span class="p">],</span>
                        <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceGraph</span><span class="p">[</span><span class="nv">$name2</span><span class="p">][</span><span class="nv">$name1</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceGraph</span><span class="p">[</span><span class="nv">$name1</span><span class="p">][</span><span class="nv">$name3</span><span class="p">])</span>
                    <span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">getHighestReleasablePressure</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$currentValveName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$timeSpent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span> <span class="kt">int</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valvesOpened</span><span class="p">)</span> <span class="o">===</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valvesWithPressure</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$currentValveName</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$currentValveName</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">startPosition</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$currentValve</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valves</span><span class="p">[</span><span class="nv">$currentValveName</span><span class="p">];</span>
        <span class="nv">$pressure</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valvesWithPressure</span> <span class="k">as</span> <span class="nv">$targetValveName</span> <span class="o">=&gt;</span> <span class="nv">$targetValve</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valvesOpened</span><span class="p">[</span><span class="nv">$targetValveName</span><span class="p">]))</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$newTimeSpent</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceGraph</span><span class="p">[</span><span class="nv">$currentValve</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">][</span><span class="nv">$targetValveName</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$timeSpent</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$newTimeSpent</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">timeLimit</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valvesOpened</span><span class="p">[</span><span class="nv">$targetValveName</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$targetValve</span><span class="p">;</span>
                <span class="nv">$currentReleasePressure</span> <span class="o">=</span> <span class="nv">$targetValve</span><span class="o">-&gt;</span><span class="n">pressure</span> <span class="o">*</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">timeLimit</span> <span class="o">-</span> <span class="nv">$newTimeSpent</span><span class="p">);</span>
                <span class="nv">$targetValveReleasePressure</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getHighestReleasablePressure</span><span class="p">(</span><span class="nv">$targetValveName</span><span class="p">,</span> <span class="nv">$newTimeSpent</span><span class="p">);</span>

                <span class="nb">unset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">valvesOpened</span><span class="p">[</span><span class="nv">$targetValveName</span><span class="p">]);</span>

                <span class="nv">$pressure</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$pressure</span><span class="p">,</span> <span class="p">(</span><span class="nv">$currentReleasePressure</span> <span class="o">+</span> <span class="nv">$targetValveReleasePressure</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$pressure</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Probably this is the least efficient way to solve this puzzle.</p>
<h4 id="17th-of-december">17th of December</h4>
<p>The base concept of the puzzle is quite interesting. It’s a kind of low budget Tetris game. No turning, no line eliminations.
  I’m not a game developer, I don’t have any experience with long term, multi-steps game strategies, but I tried my best.</p>
<p>In the end it turned out, probably my best is the worst here, hehehe.</p>
<p>So the game is about falling shapes will pile up. The shapes can be imagined as two-dimensional arrays with zeros and ones.
  So we need to find a way to merge two arrays to not overlap the ones. OR, how about we represent them as a string and simply
  do some binary checks? They are zeros and ones for God’s sake!</p>
<p>This is the way I chose to go on. Yes, again: the theory is simple, the solution is not. It turned out to be extremely slow.
  Probably my code is wrong, and maybe the PHP is not the best platform for these task, I don’t know.</p>
<p>But here is what I made:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nb">file_get_contents</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">));</span>

<span class="nv">$gasFlow</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
<span class="nv">$rocks</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mi">0</span> <span class="o">=&gt;</span> <span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'0011110'</span><span class="p">,</span>
    <span class="mi">1</span> <span class="o">=&gt;</span> <span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'0001000'</span><span class="mf">.</span><span class="s1">'0011100'</span><span class="mf">.</span><span class="s1">'0001000'</span><span class="p">,</span>
    <span class="mi">2</span> <span class="o">=&gt;</span> <span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'0000100'</span><span class="mf">.</span><span class="s1">'0000100'</span><span class="mf">.</span><span class="s1">'0011100'</span><span class="p">,</span>
    <span class="mi">3</span> <span class="o">=&gt;</span> <span class="s1">'0010000'</span><span class="mf">.</span><span class="s1">'0010000'</span><span class="mf">.</span><span class="s1">'0010000'</span><span class="mf">.</span><span class="s1">'0010000'</span><span class="p">,</span>
    <span class="mi">4</span> <span class="o">=&gt;</span> <span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'0011000'</span><span class="mf">.</span><span class="s1">'0011000'</span><span class="p">,</span>
<span class="p">];</span>

<span class="nv">$areaWalls</span> <span class="o">=</span> <span class="s1">'1'</span><span class="mf">.</span><span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'1'</span><span class="mf">.</span><span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'1'</span><span class="mf">.</span><span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'1'</span><span class="mf">.</span><span class="s1">'0000000'</span><span class="mf">.</span><span class="s1">'1'</span><span class="p">;</span>

<span class="nv">$rocksFallen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$rockIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$gasFlowIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="nv">$emptyArea</span> <span class="o">=</span> <span class="nb">array_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">'0000000'</span><span class="p">);</span>
<span class="nv">$area</span> <span class="o">=</span> <span class="nb">array_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">'0000000'</span><span class="p">);</span>
<span class="nv">$actualAreaSlice</span> <span class="o">=</span> <span class="nv">$emptyArea</span><span class="p">;</span>
<span class="nv">$actualAreaMask</span> <span class="o">=</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">''</span><span class="p">,</span> <span class="nv">$actualAreaSlice</span><span class="p">);</span>
<span class="nv">$totalArea</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">do</span> <span class="p">{</span>
    <span class="nv">$actualRockMask</span> <span class="o">=</span> <span class="nv">$rocks</span><span class="p">[</span><span class="nv">$rockIndex</span><span class="p">];</span>
    <span class="nv">$actualRockSlice</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$actualRockMask</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
    <span class="nv">$areaIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$falling</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

    <span class="c1">// Check fall and slide until hit a rock or the ground</span>
    <span class="k">while</span> <span class="p">(</span><span class="nv">$falling</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Pick the next 4 rows</span>
        <span class="nv">$nextAreaSlice</span> <span class="o">=</span> <span class="nb">array_slice</span><span class="p">(</span><span class="nv">$area</span><span class="p">,</span> <span class="nv">$areaIndex</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
        <span class="c1">// Make a bitmask like the rocks</span>
        <span class="nv">$nextAreaMask</span> <span class="o">=</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">''</span><span class="p">,</span> <span class="nv">$nextAreaSlice</span><span class="p">);</span>

        <span class="c1">// If there's a hit with another rock, this step is invalid, quit</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">bindec</span><span class="p">(</span><span class="nv">$actualRockMask</span> <span class="o">&amp;</span> <span class="nv">$nextAreaMask</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// We made sure to always have enough free space "above", so there won't be underflow with the index.</span>
            <span class="nv">$areaIndex</span><span class="o">--</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// Apply falling</span>
        <span class="nv">$actualAreaSlice</span> <span class="o">=</span> <span class="nv">$nextAreaSlice</span><span class="p">;</span>
        <span class="nv">$actualAreaMask</span> <span class="o">=</span> <span class="nv">$nextAreaMask</span><span class="p">;</span>

        <span class="c1">// We hit the ground but we can slide once more</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$areaIndex</span> <span class="o">===</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$area</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$falling</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// Make a bitmask like the area walls by adding placeholders</span>
        <span class="nv">$actualAreaMaskWithWalls</span> <span class="o">=</span> <span class="s1">'0'</span><span class="mf">.</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">'0'</span><span class="p">,</span> <span class="nv">$actualAreaSlice</span><span class="p">)</span><span class="mf">.</span><span class="s1">'0'</span><span class="p">;</span>
        <span class="c1">// By pre-adding the placeholders for the walls, we can make sure the bit shift won't cause overflow or make floating pont number</span>
        <span class="nv">$actualRockMaskWithWalls</span> <span class="o">=</span> <span class="s1">'0'</span><span class="mf">.</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">'0'</span><span class="p">,</span> <span class="nv">$actualRockSlice</span><span class="p">)</span><span class="mf">.</span><span class="s1">'0'</span><span class="p">;</span>

        <span class="nv">$nextMove</span> <span class="o">=</span> <span class="nv">$gasFlow</span><span class="p">[</span><span class="nv">$gasFlowIndex</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$nextMove</span> <span class="o">===</span> <span class="s1">'&lt;'</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Check move left</span>
            <span class="nv">$actualRockMaskWithWalls</span> <span class="o">=</span> <span class="nb">str_pad</span><span class="p">(</span><span class="nb">decbin</span><span class="p">(</span><span class="nb">bindec</span><span class="p">(</span><span class="nv">$actualRockMaskWithWalls</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">28</span> <span class="o">+</span> <span class="mi">5</span><span class="p">),</span> <span class="s1">'0'</span><span class="p">,</span> <span class="no">STR_PAD_LEFT</span><span class="p">);</span>
            <span class="nv">$multiply</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// Check right</span>
            <span class="nv">$actualRockMaskWithWalls</span> <span class="o">=</span> <span class="nb">str_pad</span><span class="p">(</span><span class="nb">decbin</span><span class="p">(</span><span class="nb">bindec</span><span class="p">(</span><span class="nv">$actualRockMaskWithWalls</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">28</span> <span class="o">+</span> <span class="mi">5</span><span class="p">),</span> <span class="s1">'0'</span><span class="p">,</span> <span class="no">STR_PAD_LEFT</span><span class="p">);</span>
            <span class="nv">$multiply</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$freeSpaces</span> <span class="o">=</span> <span class="nv">$areaWalls</span> <span class="o">|</span> <span class="nv">$actualAreaMaskWithWalls</span><span class="p">;</span>

        <span class="c1">// If we don't hit the wall or any rock, we apply the bit shift on the original rock mask</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">bindec</span><span class="p">(</span><span class="nv">$actualRockMaskWithWalls</span> <span class="o">&amp;</span> <span class="nv">$freeSpaces</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$actualRockMask</span> <span class="o">=</span>  <span class="nb">str_pad</span><span class="p">(</span><span class="nb">decbin</span><span class="p">(</span><span class="nb">bindec</span><span class="p">(</span><span class="nv">$actualRockMask</span><span class="p">)</span> <span class="o">*</span> <span class="nv">$multiply</span><span class="p">),</span> <span class="mi">28</span><span class="p">,</span> <span class="s1">'0'</span><span class="p">,</span> <span class="no">STR_PAD_LEFT</span><span class="p">);</span>
            <span class="nv">$actualRockSlice</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$actualRockMask</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// try falling and shifting again</span>
        <span class="nv">$areaIndex</span><span class="o">++</span><span class="p">;</span>
        <span class="nv">$gasFlowIndex</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$gasFlowIndex</span> <span class="o">&gt;=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$gasFlow</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$gasFlowIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Make new mask</span>
    <span class="nv">$actualAreaAndRockMask</span> <span class="o">=</span> <span class="nv">$actualAreaMask</span> <span class="o">|</span> <span class="nv">$actualRockMask</span><span class="p">;</span>
    <span class="c1">// Create new slice</span>
    <span class="nv">$actualAreaAndRockSlice</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$actualAreaAndRockMask</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
    <span class="c1">// Replace old slice with new</span>
    <span class="nb">array_splice</span><span class="p">(</span><span class="nv">$area</span><span class="p">,</span> <span class="nv">$areaIndex</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nv">$actualAreaAndRockSlice</span><span class="p">);</span>

    <span class="nv">$rocksFallen</span><span class="o">++</span><span class="p">;</span>
    <span class="nv">$rockIndex</span><span class="o">++</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$rockIndex</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$rockIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nv">$emptyLinesInArea</span> <span class="o">=</span> <span class="nb">array_filter</span><span class="p">(</span><span class="nv">$area</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$row</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$row</span> <span class="o">===</span> <span class="s1">'0000000'</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="c1">// Add new empty lines if needed</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$emptyLinesInArea</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$num</span> <span class="o">=</span> <span class="mi">7</span> <span class="o">-</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$emptyLinesInArea</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$num</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nb">array_unshift</span><span class="p">(</span><span class="nv">$area</span><span class="p">,</span><span class="s1">'0000000'</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">$rocksFallen</span> <span class="o">&lt;</span> <span class="mi">2022</span><span class="p">);</span>

<span class="nv">$filledLinesInArea</span> <span class="o">=</span> <span class="nb">array_filter</span><span class="p">(</span><span class="nv">$area</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$row</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$row</span> <span class="o">!==</span> <span class="s1">'0000000'</span><span class="p">;</span>
<span class="p">});</span>

<span class="k">echo</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$filledLinesInArea</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As an idea, I think it was not that terrible, the solution definitely is. A true Worst Practice.</p>
]]></content><author><name>Gábor Iván</name></author><category term="general" /><category term="personal" /><summary type="html"><![CDATA[In the last days the Advent of Code went into Advanced of Code.]]></summary></entry><entry><title type="html">Advent of Code - Day 15</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-15" rel="alternate" type="text/html" title="Advent of Code - Day 15" /><published>2022-12-15T14:25:00+00:00</published><updated>2023-01-31T11:35:11+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-15</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-15"><![CDATA[<p><a href="https://adventofcode.com/2022/day/15" rel="noopener" target="_blank">Today’s puzzle</a> in short: we need to calculate
    the <a href="https://en.wikipedia.org/wiki/Taxicab_geometry" rel="noopener" target="_blank">Manhattan distance</a> between
    two points and measure the area you can cover with that distance.</p>
  <p>Something like this:</p>
  <iframe class="yt" width="281" height="500" src="https://www.youtube.com/embed/Wrp4EH5zd9I" title="Advent of code 2022 day 15." frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
  <h3 id="the-input-data">The input data</h3>
  <p>The input file is short, and basically simple too, if we ignore all the space filling text and just focus on the data:</p>
  <p>Each line contains the following text (variable data is replaced with <code class="language-plaintext highlighter-rouge">#</code>):</p>
  <div class="language-text highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
    </td>
    <td class="rouge-code">
      <pre>Sensor at x=#, y=#: closest beacon is at x=#, y=#
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="game-rules">Game rules</h3>
<p>Rules are simple:</p>
<ul>
  <li>Distance between coordinates are measured with the Manhattan distance.</li>
  <li>We need to determine every area that will be covered.</li>
</ul>
<h3 id="the-strategy">The strategy</h3>
<p>The difficulty in today’s task is not the calculation itself, but the amount of calculation. We can easily run out of
  process execution time limit, or what is worse: run out of memory.</p>
<p>So we have to do everything to reduce the number of data, that the script have to deal with.</p>
<p>The next important thing is, if you started filling areas like I did in the video, I have a bad news: that’s the wrong
  approach. We have to deal with <strong>ranges</strong>, and we need to merge <strong>ranges</strong> to solve both part one and two.</p>
<h3 id="part-one">Part one</h3>
<p>In part one, the question is how much area is covered by the sensors’ signals on the 2000000th row. This is good hint, that
  we need to focus only one specific line. So when we collect the sensors’ and beacon’s positions from the input data, we
  can immediately calculate whether the covered area reaches the target line or not.</p>
<p>With this trick we can remove more than half of the original data from the upcoming calculations.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$ranges</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">const</span> <span class="no">TARGET_ROW</span> <span class="o">=</span> <span class="mi">2000000</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$matches</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^Sensor at x=(?P&lt;sensorX&gt;\d+), y=(?P&lt;sensorY&gt;\d+): closest beacon is at x=(?P&lt;beaconX&gt;\d+), y=(?P&lt;beaconY&gt;\d+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$manhattanX</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorX'</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'beaconX'</span><span class="p">]);</span>
            <span class="nv">$manhattanY</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'beaconY'</span><span class="p">]);</span>

            <span class="nv">$distance</span> <span class="o">=</span> <span class="nv">$manhattanX</span> <span class="o">+</span> <span class="nv">$manhattanY</span><span class="p">;</span>

            <span class="c1">// If the signal area doesn't reach the target row, skip dealing with it.</span>
            <span class="k">if</span> <span class="p">(</span>
                <span class="o">!</span><span class="p">(</span><span class="no">TARGET_ROW</span> <span class="o">&gt;=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="no">TARGET_ROW</span> <span class="o">&lt;=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$distance</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
                <span class="o">!</span><span class="p">(</span><span class="no">TARGET_ROW</span> <span class="o">&lt;=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="no">TARGET_ROW</span> <span class="o">&gt;=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$distance</span><span class="p">)</span>
            <span class="p">)</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$distanceDiff</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="no">TARGET_ROW</span> <span class="o">&gt;</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">])</span> <span class="p">{</span>
                <span class="nv">$distanceDiff</span> <span class="o">=</span> <span class="no">TARGET_ROW</span> <span class="o">-</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">];</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="no">TARGET_ROW</span> <span class="o">&lt;</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">])</span> <span class="p">{</span>
                <span class="nv">$distanceDiff</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">-</span> <span class="no">TARGET_ROW</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$targetRowRangeStart</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorX'</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$distance</span> <span class="o">+</span> <span class="nv">$distanceDiff</span><span class="p">;</span>
            <span class="nv">$targetRowRangeStop</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorX'</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$distance</span> <span class="o">-</span> <span class="nv">$distanceDiff</span><span class="p">;</span>

            <span class="nv">$ranges</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$targetRowRangeStart</span><span class="p">,</span> <span class="nv">$targetRowRangeStop</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>With a simple regular expression, we can extract the coordinates that we need. Then with a simple algebra we can calculate
  the maximal distance that a sensor can cover. Obviously when the sensor’s <code class="language-plaintext highlighter-rouge">Y</code> coordinate plus the signal distance don’t reach
  the target line, we go on to the next sensor.</p>
<p>Then we have to calculate how much area will be covered on the given line. Simply subtract the two line numbers (the <code class="language-plaintext highlighter-rouge">Y</code> coordinates) 
  and we get how much part of the distance will fall on the target line. With this simple calculation we get the start and 
  end coordinates. And since we talk about one fix line number, we need to remember only the <code class="language-plaintext highlighter-rouge">X</code> coordinates, and the start
  with the end together gives a <strong>range</strong>.</p>
<p>We collect all the ranges we can. Okay but the ranges may overlap! So we need to merge them:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">function</span> <span class="n">mergeRanges</span><span class="p">(</span><span class="nv">$ranges</span><span class="p">):</span> <span class="kt">array</span>
<span class="p">{</span>
    <span class="nb">usort</span><span class="p">(</span><span class="nv">$ranges</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$b</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="p">});</span>

    <span class="nv">$y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$max</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$ranges</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$max</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$ranges</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nv">$ranges</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$y</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$ranges</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nv">$ranges</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
            <span class="nv">$ranges</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$ranges</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="nb">unset</span><span class="p">(</span><span class="nv">$ranges</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">array_values</span><span class="p">(</span><span class="nv">$ranges</span><span class="p">);</span>
<span class="p">}</span>

<span class="nv">$usedPositionsOnTargetRow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$ranges</span> <span class="o">=</span> <span class="nf">mergeRanges</span><span class="p">(</span><span class="nv">$ranges</span><span class="p">);</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$ranges</span> <span class="k">as</span> <span class="nv">$range</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$usedPositionsOnTargetRow</span> <span class="o">+=</span> <span class="nv">$range</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$range</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$usedPositionsOnTargetRow</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>I will be honest: probably I could solve the logic of merging ranges myself, but sometimes I like to be a lazy <em>M.F.</em> and look
  solutions for “simple” problems on the <a href="https://stackoverflow.com/questions/3630500/merging-overlapping-ranges-in-php-arrays" rel="noopener" target="_blank">Stackowerflow</a>.</p>
<p>Anyway, PHP should have a built-in function for this, shouldn’t it?</p>
<p>So we merged the ranges, then we need only count the covered areas.</p>
<h3 id="part-two">Part two</h3>
<p>In part two they twisted on the story and made <strong>every line as target line</strong>. Great, that will definitely eat up the Earth’s
  resources. Luckily they gave some discount on the rules.</p>
<p>Now we have to take consider ranges between 0 and 4000000. And we have to find the one single spot, that is not covered by
  any of the sensor’s signal.</p>
<p>I think, this will be still too much for any average home computer, so we still need to remove as many data as possible.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$allRanges</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">const</span> <span class="no">MIN_RANGE_START</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">const</span> <span class="no">MAX_RANGE_STOP</span> <span class="o">=</span> <span class="mi">4000000</span><span class="p">;</span>
<span class="k">const</span> <span class="no">FREQUENCY_MULTIPLIER</span> <span class="o">=</span> <span class="mi">4000000</span><span class="p">;</span>

<span class="nb">set_time_limit</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$matches</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^Sensor at x=(?P&lt;sensorX&gt;\d+), y=(?P&lt;sensorY&gt;\d+): closest beacon is at x=(?P&lt;beaconX&gt;\d+), y=(?P&lt;beaconY&gt;\d+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$manhattanX</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorX'</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'beaconX'</span><span class="p">]);</span>
            <span class="nv">$manhattanY</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'beaconY'</span><span class="p">]);</span>

            <span class="nv">$distance</span> <span class="o">=</span> <span class="nv">$manhattanX</span> <span class="o">+</span> <span class="nv">$manhattanY</span><span class="p">;</span>
            <span class="nv">$targetRow</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$distance</span><span class="p">;</span>

            <span class="k">while</span> <span class="p">(</span><span class="nv">$targetRow</span> <span class="o">&lt;=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$distance</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$distanceDiff</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

                <span class="k">if</span> <span class="p">(</span><span class="nv">$targetRow</span> <span class="o">&gt;</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">])</span> <span class="p">{</span>
                    <span class="nv">$distanceDiff</span> <span class="o">=</span> <span class="nv">$targetRow</span> <span class="o">-</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">];</span>
                <span class="p">}</span>

                <span class="k">if</span> <span class="p">(</span><span class="nv">$targetRow</span> <span class="o">&lt;</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">])</span> <span class="p">{</span>
                    <span class="nv">$distanceDiff</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorY'</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$targetRow</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="nv">$targetRowRangeStart</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorX'</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$distance</span> <span class="o">+</span> <span class="nv">$distanceDiff</span><span class="p">;</span>
                <span class="nv">$targetRowRangeStop</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'sensorX'</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$distance</span> <span class="o">-</span> <span class="nv">$distanceDiff</span><span class="p">;</span>

                <span class="c1">// Add ranges only within the limits</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$targetRowRangeStart</span> <span class="o">&lt;=</span> <span class="no">MAX_RANGE_STOP</span> <span class="o">&amp;&amp;</span> <span class="nv">$targetRowRangeStop</span> <span class="o">&gt;=</span> <span class="no">MIN_RANGE_START</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$allRanges</span><span class="p">[</span><span class="nv">$targetRow</span><span class="p">]))</span> <span class="p">{</span>
                        <span class="nv">$allRanges</span><span class="p">[</span><span class="nv">$targetRow</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
                    <span class="p">}</span>

                    <span class="nv">$allRanges</span><span class="p">[</span><span class="nv">$targetRow</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[</span>
                        <span class="nb">max</span><span class="p">(</span><span class="no">MIN_RANGE_START</span><span class="p">,</span> <span class="nv">$targetRowRangeStart</span><span class="p">),</span>
                        <span class="nb">min</span><span class="p">(</span><span class="no">MAX_RANGE_STOP</span><span class="p">,</span> <span class="nv">$targetRowRangeStop</span><span class="p">)</span>
                    <span class="p">];</span>
                <span class="p">}</span>
                <span class="nv">$targetRow</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Parsing the information works in the same way, but now we collect the ranges from every row and for every sensor.</p>
<p>I already had to increase the time limit, since it will be dead slow. I tell you now, the <code class="language-plaintext highlighter-rouge">$allRanges</code> array will have 
  more than 6 million elements, which elements are many-many arrays of range pairs.</p>
<p>PHP and arrays: straight way into the memory leak hell. But luckily it is still manageable. So we need to run the <code class="language-plaintext highlighter-rouge">mergeRanges()</code>
  function more than 6 million times! God, give me strength!</p>
<p>As the Advent of Code’s challenges are all prepared well, and they don’t want to trick you out or provide multiple possible
  results, we can bravely assume that this task has one, and only one valid result.</p>
<p>This way, when we start merging the ranges, we immediately stop as soon as we get two ranges after the merge. Because it
  means there’s an empty area between them. And because we trust the guys at <em>AoC</em>, we blindly believe the area is exactly
  one specific coordinate and no more.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">function</span> <span class="n">mergeRanges</span><span class="p">(</span><span class="nv">$ranges</span><span class="p">):</span> <span class="kt">array</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nv">$distressY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$distressX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$allRanges</span> <span class="k">as</span> <span class="nv">$targetRow</span> <span class="o">=&gt;</span> <span class="nv">$ranges</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$ranges</span> <span class="o">=</span> <span class="nf">mergeRanges</span><span class="p">(</span><span class="nv">$ranges</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$ranges</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$distressY</span> <span class="o">=</span> <span class="nv">$targetRow</span>
        <span class="nv">$distressX</span> <span class="o">=</span> <span class="nv">$ranges</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="s2">"Distress signal source: X = </span><span class="nv">$distressX</span><span class="s2">, Y = </span><span class="nv">$distressY</span><span class="s2">, Frequency = "</span><span class="mf">.</span> <span class="p">(</span><span class="nv">$distressX</span> <span class="o">*</span> <span class="no">FREQUENCY_MULTIPLIER</span> <span class="o">+</span> <span class="nv">$distressY</span><span class="p">)</span> <span class="mf">.</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[This time the game is not the one it looks like for the first sight.]]></summary></entry><entry><title type="html">Advent of Code - Day 14</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-14" rel="alternate" type="text/html" title="Advent of Code - Day 14" /><published>2022-12-14T16:25:00+00:00</published><updated>2023-01-31T11:35:11+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-14</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-14"><![CDATA[<p><a href="https://adventofcode.com/2022/day/14" rel="noopener" target="_blank">Today’s puzzle</a> in short: If you ever played
    to the original <a href="https://en.wikipedia.org/wiki/Boulder_Dash" rel="noopener" target="_blank">Boulder Dash</a> game 
    in the ’80s, you know what this game is about.</p>
  <p>If you didn’t, well here’s a very nice example from the game, that also highlights the physics, that we need to re-create:</p>
  <iframe class="yt" width="560" height="315" src="https://www.youtube-nocookie.com/embed/Nj-ldSUTFCg?start=17" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
  <h3 id="the-input-data">The input data</h3>
  <p>This time the input data is pretty complex: simulates drawing horizontal and vertical lines.</p>
  <ul>
    <li>Each line contains chained coordinates:
      <ul>
        <li>X and Y coordinates are separated by comma,</li>
        <li>positions are separated by <code class="language-plaintext highlighter-rouge">-&gt;</code>.</li>
      </ul>
    </li>
    <li>Between coordinates the <code class="language-plaintext highlighter-rouge">-&gt;</code> represents a vector (movement), so the coordinates on its sides are start and end points 
      of a continuous line (range).</li>
    <li>The coordinates are counted left to right, top to bottom.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>The given 2 dimensional data set represents the 2D schema of a cave:</p>
  <ul>
    <li>Where we draw according to the coordinates and vectors, there are rocks.</li>
    <li>The remaining space is void air.</li>
    <li>There’s a leak on the roof at the coordinates 500,0.</li>
  </ul>
  <p>On the leak, sand flows inside the cave and fill it up:</p>
  <ul>
    <li>1 piece of sand falls at a time.</li>
    <li>It can fall 1 unit on our map at a time.</li>
    <li>If it hits a rock and there’s free space 1 unit down on left, it continues falling there.</li>
    <li>If it hits a rock and there’s free space 1 unit down on right, it continues falling there.</li>
    <li>If it hits a rock and there’s no free space 1 unit down on any of the sides, it takes a rest and the next piece of sand start the process again.</li>
  </ul>
  <h3 id="the-data-model">The Data model</h3>
  <p>The most difficult part of the code was actually parsing the input and create the matrix of the used spaces:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre>
    </td>
    <td class="rouge-code">
      <pre>
<span class="nv">$cave</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$coordinates</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' -&gt; '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$previousX</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="nv">$previousY</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$coordinates</span> <span class="k">as</span> <span class="nv">$coordinate</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">[</span><span class="nv">$x</span><span class="p">,</span> <span class="nv">$y</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">','</span><span class="p">,</span> <span class="nv">$coordinate</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$previousX</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nv">$previousY</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$cave</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'#'</span><span class="p">;</span>
                <span class="nv">$previousX</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
                <span class="nv">$previousY</span> <span class="o">=</span> <span class="nv">$y</span><span class="p">;</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$distanceX</span> <span class="o">=</span> <span class="nv">$previousX</span> <span class="o">-</span> <span class="nv">$x</span><span class="p">;</span>
            <span class="nv">$distanceY</span> <span class="o">=</span> <span class="nv">$previousY</span> <span class="o">-</span> <span class="nv">$y</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$distanceX</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$iteratorX</span> <span class="o">=</span> <span class="nv">$distanceX</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>

                <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">!=</span> <span class="nv">$previousX</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">+=</span> <span class="nv">$iteratorX</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$cave</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'#'</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$distanceY</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$iteratorY</span> <span class="o">=</span> <span class="nv">$distanceY</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>

                <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="nv">$y</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">!=</span> <span class="nv">$previousY</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">+=</span> <span class="nv">$iteratorY</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$cave</span><span class="p">[</span><span class="nv">$j</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'#'</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="nv">$previousX</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
            <span class="nv">$previousY</span> <span class="o">=</span> <span class="nv">$y</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The only difficulty here is to calculate the ranges well and fill all the fields between the actual and previous coordinates.</p>
<h3 id="part-1">Part 1</h3>
<p>The map shows no ground for the cave, so the sand can fall into the eternity. We need to count the amount of sand remain on
  the rocks when the first piece falls to the nowhere.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$maxY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$cave</span> <span class="k">as</span> <span class="nv">$y</span> <span class="o">=&gt;</span> <span class="nv">$columns</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$maxY</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$maxY</span><span class="p">,</span> <span class="nv">$y</span><span class="p">);</span>
<span class="p">}</span>

<span class="nv">$restingSandCounter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$x</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>

<span class="k">do</span> <span class="p">{</span>
    <span class="nv">$tmp</span> <span class="o">=</span> <span class="nv">$cave</span><span class="p">;</span>
    <span class="nv">$tmp</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'o'</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$x</span><span class="p">]))</span> <span class="p">{</span>
        <span class="nv">$y</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
        <span class="nv">$y</span><span class="o">++</span><span class="p">;</span>
        <span class="nv">$x</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
        <span class="nv">$y</span><span class="o">++</span><span class="p">;</span>
        <span class="nv">$x</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nv">$cave</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"o"</span><span class="p">;</span>
        <span class="nv">$y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="nv">$x</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
        <span class="nv">$restingSandCounter</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="nv">$y</span> <span class="o">&lt;</span> <span class="nv">$maxY</span> <span class="o">+</span> <span class="mi">2</span><span class="p">));</span>

<span class="k">echo</span> <span class="nv">$restingSandCounter</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Here we need to check how far is the bottom of the last rock from the top. We set the position of the leak, then start the
  process. Any sand piece that passes that height will stop the process. In the simple <code class="language-plaintext highlighter-rouge">do ... while</code> loop we apply the 
  physics rules and as soon as a sand piece finds its place, we increment the counter that will give the solution for the puzzle.</p>
<p>In every loop we add the sand to our <code class="language-plaintext highlighter-rouge">$cave</code>, so the next piece of sand can count with it.</p>
<p>We maybe could use <code class="language-plaintext highlighter-rouge">ksort()</code> to sort the <code class="language-plaintext highlighter-rouge">$cave</code> array by keys order to get the highest key, but I didn’t want to ruin
  the structure we built, maybe in the next part we need it.</p>
<h3 id="part-2">Part 2</h3>
<p>Now we realize, there’s a ground in the cave, actually we stand on it. We need to count how much sand can fill the cave
  according to the rules until the leak gets blocked. The process is the same, only some initialization and loop check changed:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$cave</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">500</span> <span class="o">=&gt;</span> <span class="s1">'+'</span><span class="p">]];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now we have the same cave created, but now we need to add the ground to it. The game description says it can be infinite, 
  but that’s something that not easy to do with arrays, and also unnecessary. I guessed if the maximum height tripled in both
  directions is enough to not get into an infinite loop in the end:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$maxY</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
<span class="nv">$minX</span> <span class="o">=</span> <span class="mi">500</span> <span class="o">-</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nv">$maxY</span><span class="p">);</span>
<span class="nv">$maxX</span> <span class="o">=</span> <span class="mi">500</span> <span class="o">+</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nv">$maxY</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$minX</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$maxX</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$cave</span><span class="p">[</span><span class="nv">$maxY</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'#'</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>I didn’t make any proper calculations on it, simply tried out:</p>
<ul>
  <li>multiplying with two ended in an infinite loop (or I was just impatient)</li>
  <li>multiplying with three worked.</li>
</ul>
<p>As the <code class="language-plaintext highlighter-rouge">$maxY</code> was the bottom of the last rock, we had to add 2 more units to the height:</p>
<ul>
  <li>One for an empty air (where we are too)</li>
  <li>One for the ground (that we stand on).</li>
</ul>
<p>The rest is almost the same, only the while expression changes:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">do</span> <span class="p">{</span>
    <span class="c1">/// ...</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="nv">$cave</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">500</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">"o"</span><span class="p">));</span>

<span class="k">echo</span> <span class="nv">$restingSandCounter</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="bonus">Bonus</h3>
<p>I’m a visual type guy. I can understand everything better, if I can see it. So for this puzzle too, I made a print function
  which I didn’t add to the code samples, since it won’t work on the full data set.</p>
<p>But it was good enough to print the initial state of our cave:</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/backend/advent-of-code-day-14/cave.png" width="344" />
  <figcaption class="a-illustration__caption">Output sample of the </figcaption>
</figure>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[A nice sand-fall game, with very simple logic.]]></summary></entry><entry><title type="html">Advent of Code - Day 13</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-13" rel="alternate" type="text/html" title="Advent of Code - Day 13" /><published>2022-12-13T11:40:00+00:00</published><updated>2023-01-31T11:35:11+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-13</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-13"><![CDATA[<p><a href="https://adventofcode.com/2022/day/13" rel="noopener" target="_blank">Today’s puzzle</a> in short: compare &amp; sort.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>In the input file today we get a spooky, datastructure-like strings:</p>
  <ul>
    <li>Each line starts with <code class="language-plaintext highlighter-rouge">[</code> and ends with <code class="language-plaintext highlighter-rouge">]</code>.</li>
    <li>Between the sides there can be number separated by comma and encapsulated within square brackets.</li>
    <li>The square brackets are in pairs so the number of <code class="language-plaintext highlighter-rouge">[</code> equals to the number of <code class="language-plaintext highlighter-rouge">]</code>.</li>
    <li>It’s possible to have empty square bracket pairs (<code class="language-plaintext highlighter-rouge">[]</code>).</li>
    <li>Every third line is an empty line.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>We need to compare values between lines to determine if the line above is smaller than the line below.</p>
  <h3 id="part-one">Part one</h3>
  <p>In part one, we have different game rules, so I present them here:</p>
  <ul>
    <li>We take every two rows as a group.</li>
    <li>Groups are counted from 1.</li>
    <li>Groups are separated by the empty line.</li>
    <li>We need to check every group if the first member is “smaller” than the second one. If the first member is smaller, we 
      increment a counter with the group’s index.</li>
  </ul>
  <p>Saying one of them is “smaller” depends on our algorithm. So let’s see it:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$pairs</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nv">$pairIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$rightOrderPairIndexSum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$pairs</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$line</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$pairs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$left</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'[]'</span><span class="p">,</span> <span class="s1">'[null]'</span><span class="p">,</span><span class="nv">$pairs</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
            <span class="nv">$right</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'[]'</span><span class="p">,</span> <span class="s1">'[null]'</span><span class="p">,</span><span class="nv">$pairs</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span>
            <span class="nv">$result</span> <span class="o">=</span> <span class="nf">comparePairs</span><span class="p">(</span> <span class="nv">$left</span><span class="p">,</span> <span class="nv">$right</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$rightOrderPairIndexSum</span> <span class="o">+=</span> <span class="nv">$pairIndex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nv">$pairs</span> <span class="o">=</span> <span class="p">[];</span>
            <span class="nv">$pairIndex</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">comparePairs</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$left</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$right</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$left</span> <span class="k">as</span> <span class="nv">$index</span> <span class="o">=&gt;</span> <span class="nv">$leftValue</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$leftValue</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$right</span><span class="p">[</span><span class="nv">$index</span><span class="p">]))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$rightValue</span> <span class="o">=</span> <span class="nv">$right</span><span class="p">[</span><span class="nv">$index</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$leftValue</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$rightValue</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$rightValue</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$rightValue</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$leftValue</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$rightValue</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$leftValue</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$leftValue</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$leftValue</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$rightValue</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">=</span> <span class="nf">comparePairs</span><span class="p">(</span><span class="nv">$leftValue</span><span class="p">,</span> <span class="nv">$rightValue</span><span class="p">))</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$leftValue</span> <span class="o">==</span> <span class="nv">$rightValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$leftValue</span> <span class="o">&lt;</span> <span class="nv">$rightValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$leftValue</span> <span class="o">&gt;</span> <span class="nv">$rightValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$left</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$right</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$rightOrderPairIndexSum</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The trick part was in this puzzle, that the line almost looks like a JSON string. The only issue is the empty square brackets.
  But since these are strings, we can fix it by replacing every <code class="language-plaintext highlighter-rouge">[]</code> with <code class="language-plaintext highlighter-rouge">[null]</code>, and there you go: We have a JSON!</p>
<p>From this point is just a simple recursive function and a loop. The function always gets two arrays to compare. Then it
  starts a loop on the first parameter (making it the <code class="language-plaintext highlighter-rouge">left</code>) to compare the values:</p>
<ul>
  <li>If left-side value is <code class="language-plaintext highlighter-rouge">null</code>, that means originally there was an <code class="language-plaintext highlighter-rouge">[]</code>. Left is smaller, return <code class="language-plaintext highlighter-rouge">-1</code>.</li>
  <li>If the right-side pair does not exist, then the left is bigger, return <code class="language-plaintext highlighter-rouge">1</code>.</li>
  <li>If any of the left or right values is an array, while the other is a literal, we convert the literal into an array.</li>
  <li>If both values are arrays, we recursively call the compare function with these values and if it returns with <code class="language-plaintext highlighter-rouge">0</code>, we 
    continue the compare, otherwise we return what it returns (either <code class="language-plaintext highlighter-rouge">1</code> or <code class="language-plaintext highlighter-rouge">-1</code>).</li>
  <li>If both values are literals, and they are equal to each other, we continue the compare.</li>
  <li>If left is smaller, return <code class="language-plaintext highlighter-rouge">-1</code>.</li>
  <li>If right is smaller, return <code class="language-plaintext highlighter-rouge">1</code>.</li>
  <li>If we reach the end of the loop, and we see the size of the parameter is smaller, than the second’s, it means, left is
    smaller, return <code class="language-plaintext highlighter-rouge">-1</code>.</li>
  <li>If we didn’t return so far, the values should be equal, return <code class="language-plaintext highlighter-rouge">0</code>.</li>
</ul>
<h3 id="part-two">Part two</h3>
<p>Now we have a quite different game rule, however the code will hardly change.</p>
<ul>
  <li>We have to add two extra lines to the input: these will be the distress signal codes.</li>
  <li>We have to ignore the empty lines.</li>
  <li>We need to sort every line with the two new lines included.</li>
  <li>We have to check where are the distress signal codes now and multiply their indexes.</li>
  <li>The line indexing starts from 1.</li>
</ul>
<p>Luckily I instinctively wrote the <code class="language-plaintext highlighter-rouge">comparePairs()</code> function returns <code class="language-plaintext highlighter-rouge">-1</code>, <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>. With 20+ years of experience, this
  just came naturally. And what a luck! Now we have to sort all the lines, the PHP’s <code class="language-plaintext highlighter-rouge">usort()</code> function requires exactly a
  custom function that returns <code class="language-plaintext highlighter-rouge">-1</code>, <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>. So this time we have to change only the surrounding codes:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cp">&lt;?php</span>

<span class="nv">$lines</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'[[2]]'</span><span class="p">,</span>
    <span class="s1">'[[6]]'</span>
<span class="p">];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$lines</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$line</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">compare</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$a</span><span class="p">,</span> <span class="kt">string</span> <span class="nv">$b</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="nv">$left</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'[]'</span><span class="p">,</span> <span class="s1">'[null]'</span><span class="p">,</span><span class="nv">$a</span><span class="p">));</span>
    <span class="nv">$right</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'[]'</span><span class="p">,</span> <span class="s1">'[null]'</span><span class="p">,</span><span class="nv">$b</span><span class="p">));</span>

    <span class="k">return</span> <span class="nf">comparePairs</span><span class="p">(</span><span class="nv">$left</span><span class="p">,</span> <span class="nv">$right</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">comparePairs</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$left</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$right</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nb">usort</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="s1">'compare'</span><span class="p">);</span>

<span class="nv">$key1</span> <span class="o">=</span> <span class="nb">array_search</span><span class="p">(</span><span class="s1">'[[2]]'</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$key2</span> <span class="o">=</span> <span class="nb">array_search</span><span class="p">(</span><span class="s1">'[[6]]'</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">echo</span> <span class="p">(</span><span class="nv">$key1</span> <span class="o">*</span>  <span class="nv">$key2</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, I didn’t change the input file, instead I initialized the “line collection” array with the two new lines.
  Then, when we read the input, we skip all the empty lines, and add the rest to this collection.</p>
<p>I created a wrapper function called <code class="language-plaintext highlighter-rouge">compare</code>, to prepare the left- and right-side values before call our original <code class="language-plaintext highlighter-rouge">comparePairs()</code>.
  Of course, I could - and maybe I should - write it as an anonymous function as the second parameter of the <code class="language-plaintext highlighter-rouge">usort()</code>, but
  I like naming things.</p>
<p>The <code class="language-plaintext highlighter-rouge">usort()</code> will do the heavy job of sorting, then the <code class="language-plaintext highlighter-rouge">array_search</code> will get the indexes, that we need to solve the 
  puzzle.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[One of the first algorithm in programming you have to learn is sorting.]]></summary></entry><entry><title type="html">Advent of Code - Day 12</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-12" rel="alternate" type="text/html" title="Advent of Code - Day 12" /><published>2022-12-12T13:45:00+00:00</published><updated>2023-01-31T11:35:11+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-12</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-12"><![CDATA[<p><a href="https://adventofcode.com/2022/day/12" rel="noopener" target="_blank">Today’s puzzle</a> in short: <span lang="jp" title="Climb mount Niitaka">新高山登れ</span></p>
  <h3 id="the-input-data">The input data</h3>
  <p>We get a file with a bunch of alphabetical characters:</p>
  <ul>
    <li>The input has 41 lines and 71 columns</li>
    <li>Every character represents the height of the surface:
      <ul>
        <li><code class="language-plaintext highlighter-rouge">a</code> is the lowest</li>
        <li><code class="language-plaintext highlighter-rouge">z</code> is the highest</li>
        <li><code class="language-plaintext highlighter-rouge">b</code> is 1 level higher than <code class="language-plaintext highlighter-rouge">a</code></li>
        <li><code class="language-plaintext highlighter-rouge">c</code> is 1 level higher than <code class="language-plaintext highlighter-rouge">b</code></li>
        <li>…</li>
        <li><code class="language-plaintext highlighter-rouge">z</code> is 1 level higher than <code class="language-plaintext highlighter-rouge">y</code></li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">S</code> represents the start point</li>
    <li><code class="language-plaintext highlighter-rouge">E</code> represents the end point</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>One step at a time to a neighboring field only when:</p>
  <ul>
    <li>the neighbor field is maximum one level higher</li>
    <li>… or equal to the current one</li>
    <li>or lower (with any level) then the current one</li>
  </ul>
  <p>Our task is get from <code class="language-plaintext highlighter-rouge">S</code> to <code class="language-plaintext highlighter-rouge">E</code> in the shortest possible way.</p>
  <h3 id="the-data-model">The data model</h3>
  <p>Since part one and two are almost the same (again), I start with the common part. First we need to define a class to represent a
    field on the height map and also store the neighbor fields:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="kd">class</span> <span class="nc">Position</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$top</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$right</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$bottom</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$left</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="nv">$isVisited</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?int</span> <span class="nv">$distance</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">public</span> <span class="n">int</span> <span class="nv">$row</span><span class="p">,</span> <span class="kt">public</span> <span class="n">int</span> <span class="nv">$col</span><span class="p">,</span> <span class="kt">public</span> <span class="n">int</span> <span class="nv">$height</span><span class="p">,</span> <span class="kt">public</span> <span class="n">bool</span> <span class="nv">$isEnd</span><span class="p">)</span>
    <span class="p">{}</span>

    <span class="cd">/**
     * @return array&lt;int, Position&gt;
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">getNeighbors</span><span class="p">():</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="nv">$neighbors</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">top</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$neighbors</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">top</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$neighbors</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bottom</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$neighbors</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bottom</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$neighbors</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$neighbors</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So we can instantiate this class  with some basic information:</p>
<ul>
  <li>the vertical and horizontal position on the map,</li>
  <li>the height of the field,</li>
  <li>a flag whether it’s the target field or not.</li>
</ul>
<p>For the neighboring fields we created four nullable properties. Obviously the fields on the sides at least one neighbor is <code class="language-plaintext highlighter-rouge">NULL</code>.
  We also add a function to collect all non-NULL neighbors.</p>
<p>Now it’s time to create the height map from the input data:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/** @var array&lt;int, array&lt;int, Position&gt;&gt; $heightMap */</span>
<span class="nv">$heightMap</span> <span class="o">=</span> <span class="p">[];</span>
<span class="cd">/** @var array&lt;int,Position&gt; $startPositions */</span>
<span class="nv">$startPositions</span> <span class="o">=</span> <span class="p">[];</span>

<span class="c1">// Read file and fill the height map with positions</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$letters</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$cols</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$letters</span><span class="p">);</span>
        <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$letters</span> <span class="k">as</span> <span class="nv">$col</span> <span class="o">=&gt;</span> <span class="nv">$character</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$height</span> <span class="o">=</span> <span class="nf">match</span><span class="p">(</span><span class="nv">$character</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="s1">'S'</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
                <span class="s1">'E'</span> <span class="o">=&gt;</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'z'</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                <span class="k">default</span> <span class="o">=&gt;</span> <span class="nb">ord</span><span class="p">(</span><span class="nv">$character</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="p">};</span>
            <span class="nv">$position</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Position</span><span class="p">(</span>
                <span class="n">row</span><span class="o">:</span> <span class="nv">$row</span><span class="p">,</span>
                <span class="n">col</span><span class="o">:</span> <span class="nv">$col</span><span class="p">,</span>
                <span class="n">height</span><span class="o">:</span> <span class="nv">$height</span><span class="p">,</span>
                <span class="n">isEnd</span><span class="o">:</span> <span class="nv">$character</span> <span class="o">===</span> <span class="s1">'E'</span>
            <span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$character</span> <span class="o">===</span> <span class="s1">'S'</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$startPositions</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$position</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$col</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$position</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$row</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Although for part one there’s only one start position, I use an array to store it, because in part two there are multiple
  start positions, so my goal is to achieve both tasks with the less work.</p>
<p>The trick here is the same I used before: convert the characters into numbers. This way, I will get mutually exclusive correspondence:</p>
<ul>
  <li>for <code class="language-plaintext highlighter-rouge">a</code> we will get <code class="language-plaintext highlighter-rouge">1</code>,</li>
  <li>for <code class="language-plaintext highlighter-rouge">b</code> we will get <code class="language-plaintext highlighter-rouge">2</code>,</li>
  <li>…</li>
  <li>for <code class="language-plaintext highlighter-rouge">z</code> we will get <code class="language-plaintext highlighter-rouge">26</code>.</li>
</ul>
<p>There are the two special cases:</p>
<ul>
  <li>for <code class="language-plaintext highlighter-rouge">S</code> we set the height to <code class="language-plaintext highlighter-rouge">1</code> and add the current position to the <code class="language-plaintext highlighter-rouge">$startPositions</code>,</li>
  <li>for <code class="language-plaintext highlighter-rouge">E</code> we set the height to <code class="language-plaintext highlighter-rouge">26</code> and use this information on the <code class="language-plaintext highlighter-rouge">Position</code>’s constructor.</li>
</ul>
<p>The only reason is to store these <code class="language-plaintext highlighter-rouge">Position</code> instances in a multidimensional array is to keep the relative positions between
  the fields. Therefore, we have all to <code class="language-plaintext highlighter-rouge">Position</code>s, so we can link the neighbors by reference.</p>
<p>But we do it smart: we link the neighbor field only when it fulfills the <a href="#game-rules">Game rules</a>:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">foreach</span> <span class="p">(</span><span class="nv">$heightMap</span> <span class="k">as</span> <span class="nv">$row</span> <span class="o">=&gt;</span> <span class="nv">$cols</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$cols</span> <span class="k">as</span> <span class="nv">$col</span> <span class="o">=&gt;</span> <span class="nv">$position</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$col</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$top</span> <span class="o">=</span> <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$col</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nv">$top</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">top</span> <span class="o">=</span> <span class="nv">$top</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$cols</span><span class="p">[</span><span class="nv">$col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$right</span> <span class="o">=</span> <span class="nv">$cols</span><span class="p">[</span><span class="nv">$col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nv">$right</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="nv">$right</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$col</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$bottom</span> <span class="o">=</span> <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$col</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nv">$bottom</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">bottom</span> <span class="o">=</span> <span class="nv">$bottom</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$cols</span><span class="p">[</span><span class="nv">$col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$left</span> <span class="o">=</span> <span class="nv">$cols</span><span class="p">[</span><span class="nv">$col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nv">$left</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="nv">$left</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now, we have the <code class="language-plaintext highlighter-rouge">Position</code>s properly initializes, it’s time to  find the path. For this I create a new class, called <code class="language-plaintext highlighter-rouge">Path</code>:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">class</span> <span class="nc">Path</span>
<span class="p">{</span>
    <span class="cd">/** @var array&lt;int array&lt;int, int&gt;&gt; */</span>
    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$distanceMap</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="cd">/** @var array&lt;int, Position&gt;  */</span>
    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$queue</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$endPosition</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">public</span> <span class="nc">Position</span> <span class="nv">$startPosition</span><span class="p">,</span> <span class="kt">public</span> <span class="n">int</span> <span class="nv">$rows</span><span class="p">,</span> <span class="kt">public</span> <span class="n">int</span> <span class="nv">$cols</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$tmp</span> <span class="o">=</span> <span class="nb">array_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">cols</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceMap</span> <span class="o">=</span> <span class="nb">array_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">rows</span><span class="p">,</span> <span class="nv">$tmp</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">startPosition</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$startPosition</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">findPath</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">do</span> <span class="p">{</span>
            <span class="nv">$current</span> <span class="o">=</span> <span class="nb">array_shift</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">isEnd</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">endPosition</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            
            <span class="k">if</span> <span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">isVisited</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nv">$current</span><span class="o">-&gt;</span><span class="n">isVisited</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceMap</span><span class="p">[</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">row</span><span class="p">][</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">col</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceMap</span><span class="p">[</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">row</span><span class="p">][</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="n">distance</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$neighbors</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="nf">getNeighbors</span><span class="p">();</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$neighbors</span> <span class="k">as</span> <span class="nv">$position</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span><span class="p">,</span> <span class="nv">$neighbors</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">printDistanceMap</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$row</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">rows</span><span class="p">;</span> <span class="nv">$row</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
           <span class="k">for</span> <span class="p">(</span><span class="nv">$col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$col</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">cols</span><span class="p">;</span> <span class="nv">$col</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">echo</span> <span class="nb">str_pad</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$col</span><span class="p">],</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="no">STR_PAD_BOTH</span><span class="p">)</span><span class="mf">.</span><span class="s1">' |'</span><span class="p">;</span>
           <span class="p">}</span>
           <span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
           <span class="k">echo</span> <span class="nb">str_repeat</span><span class="p">(</span><span class="s1">'------+'</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">cols</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>To start, we need to initialize this class with the <code class="language-plaintext highlighter-rouge">$startPosition</code> and number of rows and columns of the height map.
  Inside this class we will create a new “map”, a multidimensional array to track the distance, we already climbed.</p>
<p>We will also need a queue know how many <code class="language-plaintext highlighter-rouge">Position</code>s more we need to climb. The path find process ends in two cases:</p>
<ul>
  <li>we reach the <em>End</em>,</li>
  <li>we run out of <code class="language-plaintext highlighter-rouge">Position</code>s in the queue.</li>
</ul>
<p>Upon instantiation, we add the <code class="language-plaintext highlighter-rouge">$startPosition</code> directly into the queue. Then we call the <code class="language-plaintext highlighter-rouge">findPath()</code> public method, that
  will start the search:</p>
<ul>
  <li>It takes the first element out from the queue.</li>
  <li>If the current <code class="language-plaintext highlighter-rouge">Position</code> is the <em>End</em>, we save the <code class="language-plaintext highlighter-rouge">Position</code> in to the <code class="language-plaintext highlighter-rouge">endPosition</code> property and stop the process.</li>
  <li>If the current <code class="language-plaintext highlighter-rouge">Position</code> is marked as already visited, we skip to the next <code class="language-plaintext highlighter-rouge">Position</code> in the queue. We can do that, because
    when we visited it earlier, that means we already added all its neighbors to the queue.</li>
  <li>Mark the current <code class="language-plaintext highlighter-rouge">Position</code> as visited.</li>
  <li>If the current <code class="language-plaintext highlighter-rouge">Position</code> is not yet recorded in the <code class="language-plaintext highlighter-rouge">distanceMap</code>, we save the <code class="language-plaintext highlighter-rouge">Position</code>’s distance into it.</li>
  <li>We get the current <code class="language-plaintext highlighter-rouge">Position</code>’s neighbors. And check one-by-one:
    <ul>
      <li>If the given neighbor has no distance set, we set the current <code class="language-plaintext highlighter-rouge">Position</code>’s distance, plus one.</li>
    </ul>
  </li>
  <li>Merge the neighbors into the queue. Most likely there will be a ton of redundancy in the queue, but the <code class="language-plaintext highlighter-rouge">isVisited</code> check
    will fasten up the process.</li>
</ul>
<p>I also added a <code class="language-plaintext highlighter-rouge">printDistanceMap</code> method to visualize, which <code class="language-plaintext highlighter-rouge">Position</code>s were checked during the process.</p>
<h3 id="part-one">Part one</h3>
<p>Now we have everything to complete the task. Here we have one fix starting point, so our script will look like the following:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$rows</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$heightMap</span><span class="p">);</span>
<span class="nv">$cols</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$heightMap</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

<span class="nv">$path</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Path</span><span class="p">(</span>
    <span class="n">startPosition</span><span class="o">:</span> <span class="nv">$startPositions</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
    <span class="n">rows</span><span class="o">:</span> <span class="nv">$rows</span><span class="p">,</span>
    <span class="n">cols</span><span class="o">:</span> <span class="nv">$cols</span>
<span class="p">);</span>
<span class="nv">$path</span><span class="o">-&gt;</span><span class="nf">findPath</span><span class="p">();</span>

<span class="k">echo</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="n">endPosition</span><span class="o">-&gt;</span><span class="n">distance</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>Here we have to take all the level 1 fields as start point, and find the shortest of them all. For this, we need to modify
  our part one code only a bit:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$letters</span> <span class="k">as</span> <span class="nv">$col</span> <span class="o">=&gt;</span> <span class="nv">$character</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ...</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$height</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$startPositions</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$position</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">// ...</span>
        <span class="p">}</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="c1">// ...</span>

<span class="nv">$minimalPath</span> <span class="o">=</span> <span class="kc">PHP_INT_MAX</span><span class="p">;</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$startPositions</span> <span class="k">as</span> <span class="nv">$start</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$path</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Path</span><span class="p">(</span>
        <span class="n">startPosition</span><span class="o">:</span> <span class="nv">$start</span><span class="p">,</span>
        <span class="n">rows</span><span class="o">:</span> <span class="nv">$rows</span><span class="p">,</span>
        <span class="n">cols</span><span class="o">:</span> <span class="nv">$cols</span>
    <span class="p">);</span>
    <span class="nv">$path</span><span class="o">-&gt;</span><span class="nf">findPath</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$path</span><span class="o">-&gt;</span><span class="n">endPosition</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$minimalPath</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$minimalPath</span><span class="p">,</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="n">endPosition</span><span class="o">-&gt;</span><span class="n">distance</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$row</span> <span class="o">&lt;</span> <span class="nv">$rows</span><span class="p">;</span> <span class="nv">$row</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$col</span> <span class="o">&lt;</span> <span class="nv">$cols</span><span class="p">;</span> <span class="nv">$col</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$col</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">isVisited</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
            <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$col</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$minimalPath</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>One small thing to notice here: we should not forget to “reset” every <code class="language-plaintext highlighter-rouge">Position</code> in every loop.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[I would climb the mountain high, so high, to be able to touch the sky.]]></summary></entry><entry><title type="html">Advent of Code - Day 11</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-11" rel="alternate" type="text/html" title="Advent of Code - Day 11" /><published>2022-12-11T13:45:00+00:00</published><updated>2023-01-31T11:35:11+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-11</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-11"><![CDATA[<p><a href="https://adventofcode.com/2022/day/11" rel="noopener" target="_blank">Today’s puzzle</a> in short: monkeys have
    their own rule how to choose who to pass the stolen items. We need to figure this out.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>The input data is way too complex to start parsing it. Instead, I chose to build the right data models from them.</p>
  <h4 id="game-rules">Game rules</h4>
  <p>So every monkey can have any number of items. With different calculation each monkey can determine how worried are we about 
    the item he/she/it is investigating at the moment. According to this worry level he/she/it passes the item either “left” or “right”.</p>
  <p>The topmost two monkeys who investigate the most items will give the puzzle result.</p>
  <h3 id="the-data-model">The data model</h3>
  <p>As I wrote before, it’s better to build up the data model from code, rather than parsing the input file:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="kd">class</span> <span class="nc">Monkey</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">WORRY_DIVIDER</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">Monkey</span> <span class="nv">$targetTrue</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">Monkey</span> <span class="nv">$targetFalse</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="nv">$inspectionCounter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$items</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">public</span> <span class="k">array</span> <span class="nv">$nextRoundItems</span> <span class="o">=</span> <span class="p">[],</span>
        <span class="kt">public</span> <span class="n">string</span> <span class="nv">$operand</span> <span class="o">=</span> <span class="s1">'$old'</span><span class="p">,</span>
        <span class="kt">public</span> <span class="n">int</span> <span class="nv">$testWorryIndex</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">runTest</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">setupNextRound</span><span class="p">();</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">items</span> <span class="k">as</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">testWorry</span><span class="p">(</span><span class="nv">$item</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="n">getNewWorry</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$old</span><span class="p">):</span> <span class="kt">int</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="k">eval</span><span class="p">(</span><span class="s1">'return '</span><span class="mf">.</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">operand</span><span class="p">)</span><span class="mf">.</span><span class="s1">';'</span><span class="p">);</span>
    <span class="p">}</span>


    <span class="k">private</span> <span class="k">function</span> <span class="n">testWorry</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$worry</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$newWorry</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getNewWorry</span><span class="p">(</span><span class="nv">$worry</span><span class="p">);</span>
        <span class="nv">$testWorry</span> <span class="o">=</span> <span class="nb">floor</span><span class="p">(</span><span class="nv">$newWorry</span> <span class="o">/</span> <span class="k">self</span><span class="o">::</span><span class="no">WORRY_DIVIDER</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">inspectionCounter</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$testWorry</span> <span class="o">%</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">testWorryIndex</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">targetTrue</span><span class="o">-&gt;</span><span class="n">nextRoundItems</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$testWorry</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">targetFalse</span><span class="o">-&gt;</span><span class="n">nextRoundItems</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$testWorry</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="n">setupNextRound</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">items</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">nextRoundItems</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">nextRoundItems</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>I made a dirty trick here: I used the hatred <code class="language-plaintext highlighter-rouge">eval()</code> function. The only reason to do this to simplify the final code.
  This way I can create a common class for each monkey, and I need only to pass their “calculation logic” as a string.</p>
<p>As you can see, I don’t pass the investigated items directly to the next monkey’s hand, instead, I just put into their “pockets”,
  so won’t mess up the investigation cycle. Then in the beginning of the next cycle each Monkey get the items out from their 
  “pocket” and the whole thing starts all over.</p>
<p>Let’s initialize the <code class="language-plaintext highlighter-rouge">Monkey</code>s with the input data.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$monkeys</span> <span class="o">=</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">66</span><span class="p">,</span> <span class="mi">79</span><span class="p">],</span> <span class="s1">'$old * 11'</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">84</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">75</span><span class="p">],</span> <span class="s1">'$old * 17'</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">85</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">67</span><span class="p">],</span> <span class="s1">'$old + 8'</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">70</span><span class="p">],</span> <span class="s1">'$old + 3'</span><span class="p">,</span> <span class="mi">19</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">57</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">78</span><span class="p">],</span> <span class="s1">'$old + 4'</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">65</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">72</span><span class="p">],</span> <span class="s1">'$old + 7'</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">77</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">91</span><span class="p">],</span> <span class="s1">'$old * $old'</span><span class="p">,</span> <span class="mi">17</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">76</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">99</span><span class="p">],</span> <span class="s1">'$old + 6'</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now we have the <code class="language-plaintext highlighter-rouge">Monkey</code> instances, but we still need to add their buddies as references:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$monkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The good thing is that this data model is 99% the same for <code class="language-plaintext highlighter-rouge">Part one</code> and <code class="language-plaintext highlighter-rouge">Part two</code>.</p>
<h3 id="part-one">Part one</h3>
<p>So we need to run this investigation 20 times, collect the results and choose the two highest.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">const</span> <span class="no">ITERATION</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="no">ITERATION</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$m</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="p">;</span> <span class="nv">$m</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$monkeys</span><span class="p">[</span><span class="nv">$m</span><span class="p">]</span><span class="o">-&gt;</span><span class="nf">runTest</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$inspections</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$monkeys</span> <span class="k">as</span> <span class="nv">$monkey</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$inspections</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$monkey</span><span class="o">-&gt;</span><span class="n">inspectionCounter</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">rsort</span><span class="p">(</span><span class="nv">$inspections</span><span class="p">);</span>

<span class="p">[</span><span class="nv">$first</span><span class="p">,</span> <span class="nv">$second</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$inspections</span><span class="p">;</span>

<span class="k">echo</span> <span class="s2">"Monkey business level is: "</span><span class="mf">.</span><span class="p">(</span><span class="nv">$first</span> <span class="o">*</span> <span class="nv">$second</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>This part is almost the same as the previous one, except:</p>
<ul>
  <li>The <code class="language-plaintext highlighter-rouge">WORRY_DIVIDER</code> is “<em>something, that we need to figure out</em>”</li>
  <li>The <code class="language-plaintext highlighter-rouge">ITERATION</code> is <strong>10000</strong></li>
</ul>
<p>This high number of iteration makes the worry levels so high, that makes calculation difficult, and in some programming 
  languages even impossible because of the legendary <strong>overflow</strong>.</p>
<p>First I missed the “<em>find another way to keep your worry levels manageable</em>” suggestion, and just simply removed the division
  by three according to the puzzle description. Then I didn’t understand why they don’t accept my result. The solution
  was the <em>Least common multiple</em>.</p>
<p>And if you check every number we use to check the new worry level is actually a prime number. So the common value for the
  <code class="language-plaintext highlighter-rouge">WORRY_DIVIDER</code> is just simply multiply them.</p>
<p>All the changes on the part one code:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">class</span> <span class="nc">Monkey</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">WORRY_DIVIDER</span> <span class="o">=</span> <span class="p">(</span><span class="mi">7</span> <span class="o">*</span> <span class="mi">13</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">19</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">11</span> <span class="o">*</span> <span class="mi">17</span> <span class="o">*</span> <span class="mi">3</span><span class="p">);</span>
    
    <span class="c1">// ...</span>
    
    <span class="k">private</span> <span class="k">function</span> <span class="n">testWorry</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$worry</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="nv">$testWorry</span> <span class="o">=</span> <span class="nv">$newWorry</span> <span class="o">%</span> <span class="k">self</span><span class="o">::</span><span class="no">WORRY_DIVIDER</span><span class="p">;</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ...</span>

<span class="k">const</span> <span class="no">ITERATION</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>

<span class="c1">// ...</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[These monkeys always steal the man's valuables. We need to get back, just need to figure out where they land next.]]></summary></entry><entry><title type="html">Advent of Code - Day 10</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-10" rel="alternate" type="text/html" title="Advent of Code - Day 10" /><published>2022-12-10T13:00:00+00:00</published><updated>2023-01-31T11:35:11+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-10</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-10"><![CDATA[<p><a href="https://adventofcode.com/2022/day/10" rel="noopener" target="_blank">Today’s puzzle</a> in short: we have a screen 
    display and need to figure out what we draw on it.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>This time in the input file we get some nice programming commands:</p>
  <ul>
    <li>Each line contains exactly 1 command</li>
    <li>If the command is <code class="language-plaintext highlighter-rouge">noop</code>, it suppose to do nothing just takes one CPU cycle.</li>
    <li>It the command is <code class="language-plaintext highlighter-rouge">addx n</code>, it suppose to increment / decrement the <em>X</em> register by <code class="language-plaintext highlighter-rouge">n</code> (<code class="language-plaintext highlighter-rouge">n</code> can be negative). This 
      command takes two CPU cycle.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <ul>
    <li>The <code class="language-plaintext highlighter-rouge">addx n</code> command first takes two CPU cycle, and only after that changes the register.</li>
  </ul>
  <h3 id="part-one">Part one</h3>
  <p>Now we have to sum the X register’s value in the 20th cycle and in every 40 cycles after that. This (with an additional
    calculation) will give the <code class="language-plaintext highlighter-rouge">Signal Strength</code>’s value, what we need to give to pass the puzzle.</p>
  <h4 id="the-code">The code</h4>
  <p>The code is so simple, I don’t waste too many characters to describe, how it works. Check it yourself:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$cycle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$signalStrength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$cycle</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$cycle</span> <span class="o">===</span> <span class="mi">20</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$cycle</span> <span class="o">-</span> <span class="mi">20</span><span class="p">)</span> <span class="o">%</span> <span class="mi">40</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$signalStrength</span> <span class="o">+=</span> <span class="nv">$cycle</span> <span class="o">*</span> <span class="nv">$x</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">!=</span> <span class="s1">'noop'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$cycle</span><span class="o">++</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$cycle</span> <span class="o">===</span> <span class="mi">20</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$cycle</span> <span class="o">-</span> <span class="mi">20</span><span class="p">)</span> <span class="o">%</span> <span class="mi">40</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$signalStrength</span> <span class="o">+=</span> <span class="nv">$cycle</span> <span class="o">*</span> <span class="nv">$x</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="p">[,</span> <span class="nv">$value</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
            <span class="nv">$x</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$signalStrength</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>The part two is a bit more complex, but should not confuse anybody. Here we have a small <code class="language-plaintext highlighter-rouge">display screen</code> which is 40
  characters wide and 6 characters tall. Luckily our input data contains exactly 240 CPU cycle (42 <code class="language-plaintext highlighter-rouge">noop</code> and 99 <code class="language-plaintext highlighter-rouge">addx</code> command).</p>
<p>So the input data is enough to fully fill the whole display with something. But with what? We move a <code class="language-plaintext highlighter-rouge">pixel</code> on this screen, 
  and this pixel is 3 characters wide. The X register’s actual value contains the position of the middle character.</p>
<p>We draw on the screen exactly one character in every CPU cycle. The drawing position’s row and column is calculated from 
  the CPU cycle.</p>
<ul>
  <li>If the actual drawing position covers any of the three characters of the “pixel” - defined by X register - we draw <code class="language-plaintext highlighter-rouge">#</code>.</li>
  <li>If no covering, we draw <code class="language-plaintext highlighter-rouge">.</code>.</li>
</ul>
<p>In the end we should see some ASCII art letters printed on the screen. These letters are the solution for the puzzle.</p>
<h4 id="the-code-1">The code</h4>
<p>The description is actually more complex than the solution:</p>
<ul>
  <li>Concatenate every <code class="language-plaintext highlighter-rouge">#</code>s and <code class="language-plaintext highlighter-rouge">.</code>s together into a string.</li>
  <li>We need to watch out for the screen size, when we reach the end, just add a line break.</li>
</ul>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$cycle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$signalStrength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$crt</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
<span class="nv">$pixelPosition</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$cycle</span><span class="o">++</span><span class="p">;</span>
        <span class="nv">$crt</span> <span class="mf">.</span><span class="o">=</span> <span class="nf">getPixel</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span> <span class="nv">$pixelPosition</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">!=</span> <span class="s1">'noop'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$cycle</span><span class="o">++</span><span class="p">;</span>
            <span class="nv">$crt</span> <span class="mf">.</span><span class="o">=</span> <span class="nf">getPixel</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span> <span class="nv">$pixelPosition</span><span class="p">);</span>

            <span class="p">[,</span> <span class="nv">$value</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
            <span class="nv">$x</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">getPixel</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$x</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="nv">$pixelPosition</span><span class="p">):</span> <span class="kt">string</span>
<span class="p">{</span>
    <span class="nv">$pixel</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">===</span> <span class="nv">$pixelPosition</span> <span class="o">||</span> <span class="nv">$x</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">===</span> <span class="nv">$pixelPosition</span> <span class="o">||</span> <span class="nv">$x</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">===</span> <span class="nv">$pixelPosition</span><span class="p">)</span> <span class="o">?</span> <span class="s1">'#'</span> <span class="o">:</span> <span class="s1">'.'</span><span class="p">;</span>
    <span class="nv">$pixelPosition</span><span class="o">++</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$pixelPosition</span> <span class="o">===</span> <span class="mi">40</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$pixel</span> <span class="mf">.</span><span class="o">=</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
        <span class="nv">$pixelPosition</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$pixel</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$crt</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[After the rope adventure, it's nice to do some easy task. We will be TV technicians!]]></summary></entry><entry><title type="html">Advent of Code - Day 9</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-9" rel="alternate" type="text/html" title="Advent of Code - Day 9" /><published>2022-12-09T13:45:00+00:00</published><updated>2023-01-31T11:35:11+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-9</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-9"><![CDATA[<h3 id="the-input-data">The input data</h3>
  <p>A very basic data file:</p>
  <ul>
    <li>each row contains a character and a number separated by space</li>
    <li>the characters represent directions (up, right, down, left): <code class="language-plaintext highlighter-rouge">U</code>, <code class="language-plaintext highlighter-rouge">R</code>, <code class="language-plaintext highlighter-rouge">D</code>, <code class="language-plaintext highlighter-rouge">L</code></li>
    <li>the numbers represent the distance/step</li>
  </ul>
  <p>Task: we pull a rope in the given direction for the given distance, and we need to figure out,</p>
  <h3 id="part-one">Part one</h3>
  <p>I will be honest: it was tough. I went down to a super primitive level, and wrote a low-performing code just to do what
    needs to be done and get the right result. Currently, I am not even sure, whether my code is actually working well or just
    accidentally gives the right result.</p>
  <p>Should I share the code? Well, it’s definitely the worst practice.</p>
  <h3 id="part-two">Part two</h3>
  <p>I’m not proud of myself. This is the day I have to give up. I could pass part one, but this one requires skills that I 
    don’t have yet. I failed. I tried, but couldn’t figure out the algorithm. I tried to reuse the functions from the part one,
    but it was a complete failure as well. I’m too tired, sad and disappointed now to try again. I give up…</p>
  <p><a href="https://www.reddit.com/r/adventofcode/comments/zgq3nr/2022_day_9_rope_pull/" rel="noopener" target="_blank">This is how it should look like visualized.</a></p>
  <p>When I was thinking about the solution, I thought if I treat every knot as a rope-head for the next knot, it will work. But I
    couldn’t even reproduce the example outputs of the <a href="https://adventofcode.com/2022/day/9#part2" rel="noopener" target="_blank">task</a>.</p>
  <p>Maybe later I will re-try and update this article… But not today.</p>
  <h3 id="the-next-day">The next day</h3>
  <p>I was very upset that I couldn’t figure out the solution, so I spent my whole Saturday (10th of December) to find a solution.
    I analyzed the example in the puzzle description and watched that reddit video of the working solution a million times to
    understand the logic behind it. And then I just found it.</p>
  <p>The solution I made for the part one was a total dead end, no wonder why lead me to nowhere. Yes, it accidentally gave the 
    right result, but it was a disaster.</p>
  <p>The new, working code covers both part one and two, you need only change the value of the <code class="language-plaintext highlighter-rouge">ROPE_LENGTH</code> constant. I also 
    added a print function to be able to visualize the result. For the puzzle example, it will look something like this:</p>
  <figure class="a-illustration">
    <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/backend/advent-of-code-day-9/example.png" width="707" />
    <figcaption class="a-illustration__caption">Output sample of the rope pull puzzle.</figcaption>
  </figure>
  <h3 id="the-code">The Code</h3>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="k">const</span> <span class="no">ROPE_LENGTH</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="nv">$knotPositions</span> <span class="o">=</span> <span class="nb">array_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="no">ROPE_LENGTH</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]);</span>
<span class="nv">$moves</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nv">$headX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$headY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$visitedByTail</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'0,0'</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
<span class="p">];</span>

<span class="nv">$minY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$maxY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$row</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$direction</span><span class="p">,</span> <span class="nv">$steps</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>

        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$steps</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="nv">$direction</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">case</span> <span class="s1">'U'</span><span class="o">:</span>
                    <span class="nv">$headY</span><span class="o">++</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="s1">'R'</span><span class="o">:</span>
                    <span class="nv">$headX</span><span class="o">++</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="s1">'D'</span><span class="o">:</span>
                    <span class="nv">$headY</span><span class="o">--</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="s1">'L'</span><span class="o">:</span>
                    <span class="nv">$headX</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$knotPositions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$headX</span><span class="p">,</span> <span class="nv">$headY</span><span class="p">];</span>
            <span class="nv">$minY</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$minY</span><span class="p">,</span> <span class="nv">$headY</span><span class="p">);</span>
            <span class="nv">$maxY</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$maxY</span><span class="p">,</span> <span class="nv">$headY</span><span class="p">);</span>

            <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;</span> <span class="no">ROPE_LENGTH</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">moveKnot</span><span class="p">(</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$knotPositions</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="nv">$coordinate</span> <span class="o">=</span> <span class="nv">$knotPositions</span><span class="p">[</span><span class="no">ROPE_LENGTH</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="mf">.</span><span class="s1">','</span><span class="mf">.</span><span class="nv">$knotPositions</span><span class="p">[</span><span class="no">ROPE_LENGTH</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$visitedByTail</span><span class="p">[</span><span class="nv">$coordinate</span><span class="p">]))</span> <span class="p">{</span>
                <span class="nv">$visitedByTail</span><span class="p">[</span><span class="nv">$coordinate</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$visitedByTail</span><span class="p">[</span><span class="nv">$coordinate</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>

            <span class="nf">deleteLines</span><span class="p">(</span><span class="nv">$minY</span><span class="p">,</span> <span class="nv">$maxY</span><span class="p">);</span>
            <span class="nf">printStep</span><span class="p">(</span>
                <span class="n">moveIndex</span><span class="o">:</span> <span class="nv">$row</span><span class="p">,</span>
                <span class="n">stepIndex</span><span class="o">:</span> <span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                <span class="n">direction</span><span class="o">:</span> <span class="nv">$direction</span><span class="p">,</span>
                <span class="n">knotPositions</span><span class="o">:</span> <span class="nv">$knotPositions</span><span class="p">,</span>
                <span class="n">visitedByTail</span><span class="o">:</span> <span class="nv">$visitedByTail</span><span class="p">,</span>
                <span class="n">minY</span><span class="o">:</span> <span class="nv">$minY</span><span class="p">,</span>
                <span class="n">maxY</span><span class="o">:</span> <span class="nv">$maxY</span>
            <span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$row</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">function</span> <span class="n">moveKnot</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$knotIndex</span><span class="p">,</span> <span class="kt">array</span> <span class="o">&amp;</span><span class="nv">$knotPositions</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nv">$currentTailX</span><span class="p">,</span> <span class="nv">$currentTailY</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$knotIndex</span><span class="p">];</span>
    <span class="p">[</span><span class="nv">$previousTailX</span><span class="p">,</span> <span class="nv">$previousTailY</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$knotIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>

    <span class="nv">$diffX</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$previousTailX</span> <span class="o">-</span> <span class="nv">$currentTailX</span><span class="p">);</span>
    <span class="nv">$diffY</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$previousTailY</span> <span class="o">-</span> <span class="nv">$currentTailY</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$diffX</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nv">$diffY</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nv">$currentTailX</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$diffX</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$diffY</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
        <span class="o">?</span> <span class="mi">0</span>
        <span class="o">:</span> <span class="p">(</span><span class="nv">$previousTailX</span> <span class="o">-</span> <span class="nv">$currentTailX</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>

    <span class="nv">$currentTailY</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$diffX</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nv">$diffY</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
        <span class="o">?</span> <span class="mi">0</span>
        <span class="o">:</span> <span class="p">(</span><span class="nv">$previousTailY</span> <span class="o">-</span> <span class="nv">$currentTailY</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>

    <span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$knotIndex</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$currentTailX</span><span class="p">,</span> <span class="nv">$currentTailY</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">deleteLines</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$minY</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$maxY</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$maxY</span> <span class="o">+</span><span class="mi">6</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span> <span class="nv">$y</span> <span class="o">&gt;=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$minY</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">)</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="nv">$y</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">"</span><span class="se">\r\x1b</span><span class="s2">[K"</span><span class="p">;</span> <span class="c1">// remove this line</span>
        <span class="k">echo</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[1A</span><span class="se">\033</span><span class="s2">[K"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">printStep</span><span class="p">(</span>
    <span class="kt">int</span> <span class="nv">$moveIndex</span><span class="p">,</span>
    <span class="kt">int</span> <span class="nv">$stepIndex</span><span class="p">,</span>
    <span class="kt">string</span> <span class="nv">$direction</span><span class="p">,</span>
    <span class="kt">array</span> <span class="nv">$knotPositions</span><span class="p">,</span>
    <span class="kt">array</span> <span class="nv">$visitedByTail</span><span class="p">,</span>
    <span class="kt">int</span> <span class="nv">$minY</span><span class="p">,</span>
    <span class="kt">int</span> <span class="nv">$maxY</span>
<span class="p">):</span> <span class="kt">void</span> <span class="p">{</span>
    <span class="nv">$matrix</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="c1">// Prepare matrix</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$maxY</span> <span class="o">+</span><span class="mi">5</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span> <span class="nv">$y</span> <span class="o">&gt;=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$minY</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">);</span> <span class="nv">$y</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">180</span><span class="p">;</span> <span class="nv">$x</span> <span class="o">&lt;=</span> <span class="mi">40</span><span class="p">;</span> <span class="nv">$x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">' '</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'─'</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'|'</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$visitedByTail</span> <span class="k">as</span> <span class="nv">$coordinate</span> <span class="o">=&gt;</span> <span class="nv">$times</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="nv">$x</span><span class="p">,</span> <span class="nv">$y</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">','</span><span class="p">,</span> <span class="nv">$coordinate</span><span class="p">);</span>
        <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'.'</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Place markers</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="no">ROPE_LENGTH</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$sign</span> <span class="o">=</span> <span class="nv">$i</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">'H'</span> <span class="o">:</span> <span class="nv">$i</span><span class="p">;</span>
        <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">1</span><span class="p">]][</span><span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nv">$sign</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">echo</span> <span class="s2">"Move #</span><span class="nv">$moveIndex</span><span class="s2"> | Step #</span><span class="nv">$stepIndex</span><span class="s2"> into </span><span class="nv">$direction</span><span class="s2">"</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$matrix</span> <span class="k">as</span> <span class="nv">$index</span> <span class="o">=&gt;</span> <span class="nv">$row</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nb">str_pad</span><span class="p">(</span><span class="nv">$index</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="no">STR_PAD_LEFT</span><span class="p">)</span><span class="mf">.</span><span class="s1">'. '</span><span class="mf">.</span><span class="nb">implode</span><span class="p">(</span><span class="nv">$row</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">echo</span> <span class="s1">'      '</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">180</span><span class="p">;</span> <span class="nv">$x</span> <span class="o">&lt;=</span> <span class="mi">40</span><span class="p">;</span> <span class="nv">$x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="s1">'|'</span> <span class="o">:</span> <span class="s2">"'"</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>

    <span class="nb">usleep</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$visitedByTail</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[The day I failed.]]></summary></entry><entry><title type="html">Advent of Code - Day 8</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-8" rel="alternate" type="text/html" title="Advent of Code - Day 8" /><published>2022-12-08T10:45:00+00:00</published><updated>2023-01-31T11:35:11+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-8</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-8"><![CDATA[<p><a href="https://adventofcode.com/2022/day/8" rel="noopener" target="_blank">Today’s puzzle</a> in short: we have a 
    99 x 99 matrix filled with numbers. We need to check neighbor elements (top, right, bottom, left) and find the
    right value according to the task’s criteria</p>
  <h3 id="the-input-data">The input data</h3>
  <p>It’s a simple file filled with numbers:</p>
  <ul>
    <li>99 rows</li>
    <li>99 decimals in a row (0 through 9)</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>The matrix is a forest. Each number represents the height of a tree:</p>
  <ul>
    <li>0 is a very short tree</li>
    <li>9 is a very tall tree</li>
  </ul>
  <p>Our task is to return values defined by the tasks.</p>
  <h3 id="common-code">Common code</h3>
  <p>Like yesterday, we have some common code that is the same in both tasks. Namely, to read the input file and create the
    matrix. So let’s do it:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$forest</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$forest</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="nv">$rows</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$forest</span><span class="p">);</span>
<span class="nv">$columns</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$forest</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Although we know the input contains 99 rows and columns, we prepare for changes.</p>
<h3 id="part-one">Part one</h3>
<p>We need to find, how many trees are visible from outside the forest:</p>
<ul>
  <li>trees on the edges are visible by default</li>
  <li>an inner tree is visible only when there are smaller trees in any of the four directions</li>
</ul>
<p>For this task we have a big help: the trees on the edges are automatically visible, so we can do a fast calculation
  (2 times the rows and 2 times the columns, minus four for the four corners which we counted twice), and save time and energy 
  on the <code class="language-plaintext highlighter-rouge">for</code> loops. Then just iterate through the “inner” matrix and do the math:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$allVisibleTrees</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nv">$rows</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nv">$columns</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rows</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;</span> <span class="nv">$columns</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nf">isInnerTreeVisible</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$forest</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$allVisibleTrees</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">isInnerTreeVisible</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$row</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$column</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$matrix</span><span class="p">):</span> <span class="kt">bool</span>
<span class="p">{</span>
    <span class="nv">$rowNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">);</span>
    <span class="nv">$columnNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nv">$actualHeight</span> <span class="o">=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$column</span><span class="p">];</span>
    <span class="nv">$topHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$rightHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$bottomHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$leftHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// top</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$topHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$topHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// right</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$columnNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$rightHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$rightHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// bottom</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rowNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$bottomHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$bottomHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// left</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$leftHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$leftHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$topHighest</span>
        <span class="o">||</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$rightHighest</span>
        <span class="o">||</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$bottomHighest</span><span class="p">;</span>
        <span class="o">||</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$leftHighest</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$allVisibleTrees</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Well, it’s not pretty, and deal with four <code class="language-plaintext highlighter-rouge">for</code> loops in a function that is called within a <code class="language-plaintext highlighter-rouge">for</code> loop which is itself in
  another <code class="language-plaintext highlighter-rouge">for</code> loop is anything but fast. But it’s not a business code, just a local script, so I can bravely focus on the
  goal.</p>
<h3 id="part-two">Part two</h3>
<p>Now, we need to invert the logic and check for each tree, how far can you see from the top of the given tree:</p>
<ul>
  <li>If the next tree in any direction is the same height or higher than the current tree, we stop counting the distance, that is the furthest
    tree.</li>
  <li>Trees on the edges have at least one direction where there are no more trees, so those distances will be zero.</li>
  <li>We have to calculate the “scenic score” of every tree: multiply the view distance of each direction.</li>
</ul>
<p>Again, we can save a lot of time and energy by skipping the trees on the edges, because their scenic score will be zero
  by the rules.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$highestScenicScore</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rows</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;</span> <span class="nv">$columns</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$highestScenicScore</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$highestScenicScore</span><span class="p">,</span> <span class="nf">getTreeScenicScore</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$forest</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">getTreeScenicScore</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$row</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$column</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$matrix</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="nv">$rowNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">);</span>
    <span class="nv">$columnNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

    <span class="nv">$actualHeight</span> <span class="o">=</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$column</span><span class="p">];</span>

    <span class="nv">$scoreTop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$scoreRight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$scoreBottom</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$scoreLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// top</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreTop</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// right</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$columnNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreRight</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// bottom</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rowNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreBottom</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// left</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreLeft</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$scoreTop</span> <span class="o">*</span> <span class="nv">$scoreRight</span> <span class="o">*</span> <span class="nv">$scoreBottom</span> <span class="o">*</span> <span class="nv">$scoreLeft</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$highestScenicScore</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[It is winter, we have to do some lumber job. But first we need to find the right trees.]]></summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-05-13T08:29:27+02:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Worst Practice</title><subtitle></subtitle><author><name>Gábor Iván</name></author><entry><title type="html">DIY Dependency Injection Container, Part 2</title><link href="http://0.0.0.0:4000/backend/diy-dependency-injection-container-2" rel="alternate" type="text/html" title="DIY Dependency Injection Container, Part 2" /><published>2020-05-12T10:37:00+02:00</published><updated>2020-05-12T10:51:03+02:00</updated><id>http://0.0.0.0:4000/backend/diy-dependency-injection-container-2</id><content type="html" xml:base="http://0.0.0.0:4000/backend/diy-dependency-injection-container-2">&lt;p&gt;In the &lt;a rel=&quot;prev&quot; href=&quot;/backend/diy-dependency-injection-container&quot; title=&quot;DIY Dependency Injection Container, Part 1&quot;&gt;previous part&lt;/a&gt;, we talked about software engineering principles,
        about the dependency injection and its benefits, and we started to create our own implementation. We’ve finished with the
        Interface so far. In this article we will configuration the configuration data.&lt;/p&gt;
        &lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt;
        &lt;p&gt;If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
        &lt;a href=&quot;https://github.com/Gixx/worstpractice-dependency-injection&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
        &lt;h3 id=&quot;choose-the-right-weapon&quot;&gt;Choose the right weapon&lt;/h3&gt;
        &lt;p&gt;You have probably met with the world wide popular &lt;acronym title=&quot;YAML Ain't Markup Language&quot;&gt;YAML&lt;/acronym&gt; file format. If not,
        then I tell you that the YAML is a human friendly data serialization standard for all programming languages. It can look
        something like this:&lt;/p&gt;
        &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\Namespace\To\Messaging\Queue&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%config.host%'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%config.user%'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%config.password%'&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;queue.builder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\Namespace\To\Messaging\Queue\Builder&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;some.spooky.service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\Namespace\To\Spooky\Service&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@queue.builder'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;parameter'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]]&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;In general, that would be good for us. But unfortunately it ain’t. Because the PHP has no native support for it. Now I 
        see five options to choose from:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;Use the Symfony package, that supports the latest YAML 1.2 standard.&lt;/li&gt;
        &lt;li&gt;Use the &lt;acronym title=&quot;PHP Extension Community Library&quot;&gt;PECL&lt;/acronym&gt; extension, that supports only the YAML 1.1 standard.&lt;/li&gt;
        &lt;li&gt;Use another third-party PHP library.&lt;/li&gt;
        &lt;li&gt;Write our own YAML parser.&lt;/li&gt;
        &lt;li&gt;Give a damn and use associative arrays.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;Well, we already discussed in the previous part, that we don’t want to use any third-party libraries, so option 1 and 3 fell off. 
        Maybe we can’t add PECL extensions to our current setup, so option 2 also fell off. Write an own parser? Waste time to 
        create a complex a codebase that covers the full YAML standard and we maybe don’t even need the half of the YAML’s knowledge?
        And when we think about it, in the end, deep inside all the parsers the whole thing will end up in an average associative 
        array or Iterable class. Then why should we waste our time on this?&lt;/p&gt;
        &lt;h4 id=&quot;pros-of-the-array-based-configuration&quot;&gt;Pros of the array-based configuration&lt;/h4&gt;
        &lt;ul&gt;
        &lt;li&gt;No need to parse: better performance, lower memory consumption. Theoretically.&lt;/li&gt;
        &lt;li&gt;It’s raw PHP, you don’t have to learn another syntax.&lt;/li&gt;
        &lt;li&gt;You can add closures, which I really hate, but many developers love closures, so it’s a benefit.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h4 id=&quot;cons-of-the-array-based-configuration&quot;&gt;Cons of the array-based configuration&lt;/h4&gt;
        &lt;ul&gt;
        &lt;li&gt;The return types probably won’t be recognized by the IDE.&lt;/li&gt;
        &lt;li&gt;Difficult to overview the structure.&lt;/li&gt;
        &lt;li&gt;For multiple configurations we have to take care of their proper merge.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h3 id=&quot;define-the-required-structure&quot;&gt;Define the required structure&lt;/h3&gt;
        &lt;p&gt;In the previous section the YAML code is a perfect example to draw inspiration from it. It describes a clean 
        structure with several behaviours that we will try more or less copy. The YAML is good for many things and not only 
        for dependency injections, which in the most common use-case (Symfony of course) defined under the &lt;code class=&quot;highlighter-rouge&quot;&gt;services&lt;/code&gt; block. 
        But since our configuration will be a PHP array, and we want it to use only for the DI, we skip this level:&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// services&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h4 id=&quot;service-identifier&quot;&gt;Service identifier&lt;/h4&gt;
        &lt;p&gt;A service identifier is a string of characters. Oh GOD, you didn’t belive it, did you? It can be a fantasy name as well 
        as a real class name including the &lt;code class=&quot;highlighter-rouge&quot;&gt;::class&lt;/code&gt; constant:&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'fantasy service name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Namespace&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;To&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;MyClass&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Another\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;The identifiers are the first level keys in the configuration array.&lt;/p&gt;
        &lt;h4 id=&quot;class-reference&quot;&gt;Class reference&lt;/h4&gt;
        &lt;p&gt;A second level key, with single string value. It is a class name or class constant string that points to an instantiatable 
        class. If the service identifier already points to such class, then this sub-key is optional.&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;\Namespace\To\MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// no need the 'class` key here&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Some\ServiceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Some\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Namespace&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;To&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AbstractService&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Another\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;This class reference can’t point to another service identifier, because that would be some kind of inheritance, and we
        will handle it in a separate key to make the DIC more fool-proof. So the following code should raise an error:&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// WRONG !!!&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'some.service'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Some\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Some\ServiceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'some.service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h4 id=&quot;class-constructor-arguments&quot;&gt;Class constructor arguments&lt;/h4&gt;
        &lt;p&gt;Of course the dependency injection makes no sense, when all our services are simple objects without any initial data.
        Yes, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;setters&lt;/code&gt; instead of constructor arguments, but I think it should be a matter of our own taste. 
        Both the constructor arguments and the setter methods have tops and flops, I won’t discriminate one for the other. I 
        used to keep myself to a simple rule: under a sane amount of parameters I prefer to use constructor arguments.&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Some\ServiceInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Some\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'arguments'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'some parameter'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;       
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;That’s all nice, but we want to &lt;strong&gt;inject&lt;/strong&gt; classes too. How to separate scalar values from service references? Let’s
        suppose we have the following class:&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Namespace\To\My\Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Namespace\To\Some\Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakesNoSense&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cd&quot;&gt;/** @var string */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$serviceIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cd&quot;&gt;/** @var SomeService */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$serviceIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serviceIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$serviceIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;…and we have the corresponding config:&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'some.service'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Namespace\To\Some\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Namespace\To\My\Service\MakesNoSense&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'arguments'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'some.service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'some.service'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;… then how we should write our DIC to handle this case?&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;We can use Reflection class to find out the parameter types, but that would go too far, and would make the code 
        unnecessarily complex. And maybe slow too.&lt;/li&gt;
        &lt;li&gt;We could use some special character (like &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;) to mark class references, as they do in the Symfony YAML configs:
        &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;makes.no.sence.service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\Namespace\To\Service\MakesNoSense&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;some.service'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@some.service'&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
        &lt;p&gt;… but this would require an extra &lt;code class=&quot;highlighter-rouge&quot;&gt;substr&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;strpos&lt;/code&gt; check.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;Or we can use a straightforward trick to mark which parameter is scalar and which is not.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Let’s think about the third option. What do we have in PHP that can differentiate two identical values in an array?&lt;/p&gt;
        &lt;h5 id=&quot;indexes&quot;&gt;INDEXES!&lt;/h5&gt;
        &lt;p&gt;What’s more: &lt;strong&gt;associative indexes&lt;/strong&gt;. And since class names are more-or-less self descriptive parameter values, 
        I would say, let’s use an explicit string index (key) for the scalar parameters only. So our previous config will look 
        like this:&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'some.service'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Namespace\To\Some\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Namespace\To\My\Service\MakesNoSense&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'arguments'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'Service identifier parameter'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'some.service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'some.service'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Amazing! Then in the DIC we only have to check whether the argument definition’s current index is numeric or not, 
        and we will immediately know if we need to keep resolve the dependency for the parameter or just pass it as is.&lt;/p&gt;
        &lt;h4 id=&quot;post-init-calls&quot;&gt;Post-init calls&lt;/h4&gt;
        &lt;p&gt;Sometimes, to fully prepare a service, we need to call a method or to do an additional setup that we can’t necessarily
        do upon initializing the service. A typical example was the MySQL’s &lt;code class=&quot;highlighter-rouge&quot;&gt;charset&lt;/code&gt; option which was ignored prior to PHP 5.3.6
        so we had to set it explicitly:&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PDO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mysql:host=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;dbname=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;charset=utf8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PHP_VERSION_ID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PHP_VERSION_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50306&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;set names utf8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;And since we plan to use PHP 7.4, this example doesn’t valid. Honestly I can’t bring any live example right now. But this
        doesn’t mean there aren’t any. So let’s support it:&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'form.service'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Namespace\To\Form\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'argument'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'login.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'method'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'calls'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;           
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Form\Element\TextInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Form\Element\PasswordInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'submit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Form\Element\SubmitButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addValidator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\Namespace\To\Form\Validator\CredentialValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;So in this example we define the config for a HTML Form service. There are constructor scalar parameters, and instead of
        creating the form by injecting all the necessary elements, we instead add them with public methods. This is just a very
        simple example, but it shows pretty well, how the &lt;code class=&quot;highlighter-rouge&quot;&gt;calls&lt;/code&gt; sub-key is built up:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Every element of the &lt;code class=&quot;highlighter-rouge&quot;&gt;calls&lt;/code&gt; sub-key is an array that defines one single method call.&lt;/li&gt;
        &lt;li&gt;The first item of each array is the method name. It must exists as a public method within the class.&lt;/li&gt;
        &lt;li&gt;The second item is an array again. It’s the argument list of the method and it’s optional in those cases when the 
        method doesn’t require any parameters. This list behaves the same way as the &lt;code class=&quot;highlighter-rouge&quot;&gt;argument&lt;/code&gt; list for the class.&lt;/li&gt;
        &lt;li&gt;One method can be called multiple times.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h4 id=&quot;singleton&quot;&gt;Singleton&lt;/h4&gt;
        &lt;p&gt;This one is a simple boolean key, called &lt;code class=&quot;highlighter-rouge&quot;&gt;shared&lt;/code&gt;. If it’s TRUE, it means that the instance will be shared along the 
        runtime whenever we need it. Otherwise a new instance will be returned by the DIC.&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'some.service'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Namespace\To\Some\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'shared'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Namespace\To\My\Service\MakesNoSense&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'shared'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;shared&lt;/code&gt; sub-key does not present, it will be considered as TRUE by default.&lt;/p&gt;
        &lt;h4 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h4&gt;
        &lt;p&gt;In some cases we want to inherit configuration to avoid unnecessary code repeats, and apply only the differences. We
        will be able to do this with the &lt;code class=&quot;highlighter-rouge&quot;&gt;inherits&lt;/code&gt; key. The value must be an existing &lt;code class=&quot;highlighter-rouge&quot;&gt;service identifier&lt;/code&gt;, other than the 
        current one. Both self- of invalid referencing should raise an error.&lt;/p&gt;
        &lt;p&gt;To make it less complex, let’s say, if any of the sub-key’s value is changed, the full sub-key should be presented. 
        Also, the &lt;code class=&quot;highlighter-rouge&quot;&gt;shared&lt;/code&gt; key must present if differs form the ancestor’s. So if for the ancestor the shared is FALSE, and 
        the descendant should be TRUE, then it must present explicitly, the default behaviour will not applied in this case.&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
        24
        25
        26
        27
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'form.service'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Namespace\To\Form\Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'argument'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/login.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'method'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'calls'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;           
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Form\Element\TextInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Form\Element\PasswordInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addElement'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'submit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Namespace\To\Form\Element\SubmitButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addValidator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\Namespace\To\Form\Validator\CredentialValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'shared'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'shared.form.service'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'inherits'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'form.service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'shared'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'new.form.service'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'inherits'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'form.service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'argument'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/customer/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'method'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;And that is all. We covered all the options we need from our DIC implementation to support. And it’s only a very small
        subset of what the YAML is capable of, yet enough for us.&lt;/p&gt;
        &lt;p&gt;In the next part we will create our DIC implementation.&lt;/p&gt;</content><author><name>Gábor Iván</name></author><category term="backend" /><category term="php74" /><category term="dic" /><category term="clean-code" /><category term="yaml" /><summary type="html">The second step on our journey to create a stand-alone Dependency Injection Container. Discuss about the configuration doesn't sound too interesting, but it can hold us some surprises.</summary></entry><entry><title type="html">DIY Dependency Injection Container, Part 1</title><link href="http://0.0.0.0:4000/backend/diy-dependency-injection-container" rel="alternate" type="text/html" title="DIY Dependency Injection Container, Part 1" /><published>2020-04-26T23:29:00+02:00</published><updated>2020-05-12T10:37:44+02:00</updated><id>http://0.0.0.0:4000/backend/diy-dependency-injection-container</id><content type="html" xml:base="http://0.0.0.0:4000/backend/diy-dependency-injection-container">&lt;p&gt;It’s very important to clarify: &lt;strong&gt;Do not reinvent the wheel&lt;/strong&gt;. There are numerous great, well maintained, continuously
        developed solutions on the market written by professional developers, who enjoy the support of their large community. 
        I am talking about the big fish like Symfony, Laravel, Zend etc. So if you need a component for your web application,
        it’s better to look around first.&lt;/p&gt;
        &lt;p&gt;This article became too long, so I decided to split up to three parts:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Introduction and the Interface&lt;/li&gt;
        &lt;li&gt;The configuration file&lt;/li&gt;
        &lt;li&gt;The Dependency Injection Container implementation&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt;
        &lt;p&gt;If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
        &lt;a href=&quot;https://github.com/Gixx/worstpractice-dependency-injection&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
        &lt;h3 id=&quot;your-path-is-your-decision&quot;&gt;Your path is your decision&lt;/h3&gt;
        &lt;p&gt;Of course nobody can force you to NOT Do It Yourself. It all depend on what your project requires. So let’s suppose, you
        are not allowed to use third party components for some very mysterious reasons. But you want to write a modern, clean, 
        object-oriented code and follow the &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://medium.com/successivetech/s-o-l-i-d-the-first-5-principles-of-object-oriented-design-with-php-b6d2742c90d7&quot;&gt;
        &lt;acronym title=&quot;Single-responsibility, Open-closed, Liskov substitution, Interface segregation, Dependency Inversion&quot;&gt;SOLID&lt;/acronym&gt;
        Principles&lt;/a&gt; as much as possible.&lt;/p&gt;
        &lt;p&gt;You look up the books of smart people about smart things. Best practices, software design patterns or just sit on the latest
        hype train. Whatever you do - unless you choose to do functional programming - sooner or later you will meet with the 
        &lt;code class=&quot;highlighter-rouge&quot;&gt;Dependency Injection&lt;/code&gt; technique. And you realize it’s pretty cool, and you need it.&lt;/p&gt;
        &lt;p&gt;But first let’s talk about something that is the core of most of the PHP websites in the world today. Even if you are a
        &lt;em&gt;&lt;q cite=&quot;https://starwars.fandom.com/wiki/Padawan&quot; title=&quot;Jedi student in the Star Wars Universe&quot;&gt;young padawan&lt;/q&gt;&lt;/em&gt; and
        you have never ever heard about it, and you never had to deal with it, it’s important.&lt;/p&gt;
        &lt;h4 id=&quot;autoloader&quot;&gt;Autoloader&lt;/h4&gt;
        &lt;p&gt;Not that far in past, only a decade and a half ago, every PHP project was loud about the autoloading of objects. 
        There was a kind of race between masterminds who can create the best, more performing, more fool-proof &lt;code class=&quot;highlighter-rouge&quot;&gt;__autoload&lt;/code&gt; function. 
        I talk about the era, when there were no &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://stackoverflow.com&quot;&gt;Stack Overflow&lt;/a&gt; 
        (2008), not even &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://symfony.com/&quot;&gt;Symfony Framework&lt;/a&gt; (2007) or 
        &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://framework.zend.com/&quot;&gt;Zend Framework&lt;/a&gt; (2006). I talk about the era, when 
        everybody was happy to start their green-field projects in the brand new, (and finally but only more-or-less)
        Object-Oriented, PHP 5 (2004).&lt;/p&gt;
        &lt;p&gt;Later, we got the &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.php-fig.org/psr/psr-0/&quot;&gt;PSR-0&lt;/a&gt; that was suppose to 
        show the way to a better future by giving us a recommendation for the autoloading. But time passes and the PSR-0 became 
        obsolete. Today its direct descendant, the &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4&lt;/a&gt; 
        is in charge.&lt;/p&gt;
        &lt;p&gt;And if we keep the recommendations of the PSR-4, and we use &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://getcomposer.org/doc/00-intro.md&quot;&gt;composer&lt;/a&gt; too, 
        we only need to give the path to our namespace, and the rest of the magic is done automatically. No more manual autoloading. 
        Here’s an example of the &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt; configuration:&lt;/p&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;autoload&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;psr-4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;WorstPractice\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./src/WorstPractice&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;…then all you need to do is to include the composer’s autoload file in the entry points of you web application:&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$myObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\WorstPractice\Component\MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Okay, now the classes can load, but what is this dependency thing?&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;I already assumed, that you want to write clean code and follow the &lt;strong&gt;S.O.L.I.D.&lt;/strong&gt; principles. And what is &lt;strong&gt;D&lt;/strong&gt; in this
        acronym?&lt;/p&gt;
        &lt;h4 id=&quot;d-is-for-dependency-inversion-principle&quot;&gt;D is for Dependency Inversion Principle&lt;/h4&gt;
        &lt;p&gt;The Dependency Inversion Principle in a nutshell:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on the abstraction.&lt;/li&gt;
        &lt;li&gt;Abstractions should not depend on details. Details should depend on abstractions.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;If you don’t understand, check &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;stackify.com: SOLID Design Principles Explained: Dependency Inversion Principle with Code Examples&quot; href=&quot;https://stackify.com/dependency-inversion-principle/&quot;&gt;this great tutorial&lt;/a&gt;
        with explanations and examples.&lt;/p&gt;
        &lt;h4 id=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/h4&gt;
        &lt;p&gt;Dependency Injection (DI) is a design pattern used to implement Inversion of Control (IoC). Although this shows us a 
        causal relationship, actually these terms are generally used interchangeably to describe the same design pattern.&lt;/p&gt;
        &lt;p&gt;I hope I could confuse you enough, so let’s just use &lt;strong&gt;DI&lt;/strong&gt; from now.&lt;/p&gt;
        &lt;h4 id=&quot;di-container&quot;&gt;DI Container&lt;/h4&gt;
        &lt;p&gt;The &lt;strong&gt;DI Container&lt;/strong&gt; is a framework/module/component/library for implementing automatic dependency injection. It manages 
        object creation, and also injects dependencies to the classes.&lt;/p&gt;
        &lt;h3 id=&quot;lets-get-is-started&quot;&gt;Let’s get is started&lt;/h3&gt;
        &lt;p&gt;Up till now you may already used software design patterns, such as &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://en.wikipedia.org/wiki/Facade_pattern#PHP&quot;&gt;Facade&lt;/a&gt;,
        &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern#PHP_implementation&quot;&gt;Singleton&lt;/a&gt; or
        &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)#PHP&quot;&gt;Factory&lt;/a&gt;, etc.&lt;/p&gt;
        &lt;p&gt;Well, in the world of dependency injection, we can easily get rid of them, making the code cleaner, and more readable for other
        human lifeforms. And last but not least it helps a lot to your &lt;acronym title=&quot;Integrated Development Environment&quot;&gt;IDE&lt;/acronym&gt; 
        to discover the call chains. One of the primary benefits of DI is the ability to swap implementations of the injected class. That
        makes extremely easy to unit test classes.&lt;/p&gt;
        &lt;p&gt;If you are familiar with the big framework’s DI Container solutions, you already know how it works: You create a spooky
        configuration where you define the relationship and dependencies between classes and control additional behaviour
        such as returning the same instance every time or create new one (Singleton, motherfucker!).&lt;/p&gt;
        &lt;h4 id=&quot;diy-di-container&quot;&gt;DIY DI Container&lt;/h4&gt;
        &lt;p&gt;If we don’t want to use third party libraries - and we already clarified this several times -, let’s create out own:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;One Interface, because of the &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://stackify.com/interface-segregation-principle/&quot;&gt;Interface Segregation Principle&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;A reasonably clean and understandable configuration file&lt;/li&gt;
        &lt;li&gt;One single class to rule them all&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h3 id=&quot;the-interface&quot;&gt;The Interface&lt;/h3&gt;
        &lt;p&gt;I wrote in the beginning of this article that you don’t need to reinvent the wheel. Or not completely. There are agreements
        on how a DI Container should behave. And there is a quasi standard for it. And a standard is not a library, a standard is a
        collection of rules and blueprints. You wouldn’t start to build your dream house without a blueprint, would you? I guess no.&lt;/p&gt;
        &lt;p&gt;So let’s grab this blueprint, and take a closer look.&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
        24
        25
        26
        27
        28
        29
        30
        31
        32
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Psr\Container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cd&quot;&gt;/**
        * Describes the interface of a container that exposes methods to read its entries.
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContainerInterface&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cd&quot;&gt;/**
        * Finds an entry of the container by its identifier and returns it.
        *
        * @param string $id Identifier of the entry to look for.
        *
        * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
        * @throws ContainerExceptionInterface Error while retrieving the entry.
        *
        * @return mixed Entry.
        */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cd&quot;&gt;/**
        * Returns true if the container can return an entry for the given identifier.
        * Returns false otherwise.
        *
        * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
        * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
        *
        * @param string $id Identifier of the entry to look for.
        *
        * @return bool
        */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Now we have a nice blueprint, but this blueprint unfortunately isn’t perfect. A good start, but there are some problems:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;It’s backward compatible with earlier PHP editions, which means no type hinting:
        &lt;ul&gt;
        &lt;li&gt;no parameter type hints, and we can’t add them for the implementation either.&lt;/li&gt;
        &lt;li&gt;no return types, but luckily we can override this.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;It suggests to create new Exceptions that implement these two &lt;code class=&quot;highlighter-rouge&quot;&gt;NotFoundExceptionInterface&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ContainerExceptionInterface&lt;/code&gt;.&lt;br /&gt;
        Honestly I always preferred the use the built-in ones. Those cover most of our needs.&lt;/li&gt;
        &lt;li&gt;There is no declaration of adding instances to the container, but sometimes you can’t set up everything in the configuration.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;We have two chances:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Psr\Container\ContainerInterface&lt;/code&gt; and extend it, but we will loose on the type hinting.&lt;/li&gt;
        &lt;li&gt;Create our own interface but whenever somebody requires the DI to be &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof Psr\Container\ContainerInterface&lt;/code&gt;, ours will fail.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;And because of implementation interchangeability - though reluctantly -, I still choose the first option. Let’s extend, and
        create the possibility to add instantiated objects to the container. Since this interface has a repository, we don’t&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;what’s more, we shouldn’t - copy it but import it. Run the following in the command line in your project’s document root:&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;composer require psr/container
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;…or add it manually to your &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt; file:&lt;/p&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;require&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;=7.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;psr/container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Additionally we set a requirement on the PHP version too. Now it’s time to create our interface: 
        &lt;code class=&quot;highlighter-rouge&quot;&gt;src/WorstPractice/Component/DependencyInjection/ContainerInterface.php&lt;/code&gt;&lt;/p&gt;
        &lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
        24
        25
        26
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
        &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;declare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strict_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;WorstPractice\Component\DependencyInjection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Psr\Container\ContainerInterface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PsrContainerInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cd&quot;&gt;/**
        * Interface ContainerInterface
        * @package WorstPractice\Component\DependencyInjection
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContainerInterface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PsrContainerInterface&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cd&quot;&gt;/**
        * Register the service object instance.
        *
        * @param string $identifier
        * @param object $serviceInstance
        * @param bool   $isShared
        * @throws RuntimeException
        */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$serviceInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$isShared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;As you can see, I really mean to use the strict types. I think that is the most important feature improvement in PHP lately.
        However, a DI Container is typically NOT a service that can be typed pretty well, unless we call the &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; a precise
        type hint.&lt;/p&gt;
        &lt;p&gt;So what does this Interface do? It extends the &lt;code class=&quot;highlighter-rouge&quot;&gt;Psr\Container\ContainerInterface&lt;/code&gt; to keep its benefits. Then we declared
        our extravagant method: &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;. It has three parameters, two is mandatory, the third is optional.&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$identifier&lt;/code&gt;: String. It’s the instance’s class name, or just an alias of your choice. It’s important that the value 
        to be unique, or match to a configuration definition, that has not been initialized yet.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$instance&lt;/code&gt;: Object. It’s an object that have been initialized already but not destructed yet.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$isShared&lt;/code&gt;: Boolean. It will tell the DI container how this instance should be handled upon getting it: return a clone (new 
        instance every time) or the same instance (be like a singleton, but without the hateful &lt;code class=&quot;highlighter-rouge&quot;&gt;::getInstance();&lt;/code&gt;)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;The method in normal case should not return anything. Why it should? Do we wait any kind of response? The only response 
        should be an exception, that is thrown when we try to add an instance with an alias that is already instantiated.
        This show how important is to use this method wisely. It’s not a common case when we need this, and that is why it’s not part
        of the PSR Interface. 
        However other implementations, like the &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/symfony/dependency-injection/blob/master/ContainerInterface.php&quot;&gt;Symfony DI&lt;/a&gt;
        (just to pick one) also feels it important to have this &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; method. So ours won’t be that renitent.&lt;/p&gt;
        &lt;p&gt;In the &lt;a rel=&quot;next&quot; href=&quot;/backend/diy-dependency-injection-container-2&quot; title=&quot;DIY Dependency Injection Container, Part 2&quot;&gt;next part&lt;/a&gt; we will plan the configuration file.&lt;/p&gt;</content><author><name>Gábor Iván</name></author><category term="backend" /><category term="php74" /><category term="dic" /><category term="clean-code" /><category term="solid-principles" /><summary type="html">Like many of my fate companions, I do home office too. And by staying at home, I can save 2-3 hours of travelling every day. So I decided to practice a little bit.</summary></entry><entry><title type="html">Why I dropped the `Mobile-first` approach</title><link href="http://0.0.0.0:4000/frontend/why-i-dropped-the-mobile-first-approach" rel="alternate" type="text/html" title="Why I dropped the `Mobile-first` approach" /><published>2020-03-11T15:05:00+01:00</published><updated>2020-03-11T15:34:44+01:00</updated><id>http://0.0.0.0:4000/frontend/why-i-dropped-the-mobile-first-approach</id><content type="html" xml:base="http://0.0.0.0:4000/frontend/why-i-dropped-the-mobile-first-approach">&lt;h3 id=&quot;the-wrong-decision&quot;&gt;The (wrong) decision&lt;/h3&gt;
        &lt;p&gt;It was late 2019. I was working on this blog in my free time since months, and I still couldn’t see the end. I was struggling with the
        design - as always - and my creativity went into the &lt;code class=&quot;highlighter-rouge&quot;&gt;not good enough&lt;/code&gt; infinite loop, and started to reject any ideas came up.
        Meanwhile the backend part - if we can  talk about backend for a static website - went pretty well. Luckily I could heavily build on
        my experiences when I created my family blog, the &lt;a href=&quot;https://thomas.von.fuerstenfeld.blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Thomas von Fürstenfeld&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;It was almost Christmas season, when I finally had a design idea flashed in my mind. Since I felt I’m running out of time, I tried to
        sketch it up as simple as possible and drop all the unnecessary things. What remain was the color scheme and the header. That’s enough
        for the start.&lt;/p&gt;
        &lt;p&gt;And this was the exact moment when I had to decide what is more important for me:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Start the blog in the very beginning of 2020, even if the price is I have to drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;Mobile-first&lt;/code&gt; approach, or&lt;/li&gt;
        &lt;li&gt;Do it properly, nice and clean, and maybe I will be able to publish it only in the summer maybe?&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Since I already had the domain bought in February 2019, I didn’t want to waste any time more. I really felt that if I don’t publish
        this blog in the first days of the New Year, I will get into the &lt;code class=&quot;highlighter-rouge&quot;&gt;not good enough&lt;/code&gt; rejecting loop again… So I chose to give a damn
        on the handheld versions for a while, just do it, publish it. Anyway, developers develop on desktops, don’t they?&lt;/p&gt;
        &lt;h3 id=&quot;the-help-of-the-years-in-the-business&quot;&gt;The help of the years in the business&lt;/h3&gt;
        &lt;p&gt;So my own tech blog started, and I also wrote my first articles. I shared the links to a small group of developers, to check, read, and
        give some feedback about their impressions, etc. Among the many many positive feedback, there was one returning topic:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Where is the mobile version?&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;I realized, my assumption - that the web developers usually sits in front of a desktop computer and browse the Internet on their 24
        inch monitors - was totally wrong. I can’t avoid to create a version for the tablets and the mobile devices too.&lt;/p&gt;
        &lt;p&gt;Luckily, without really focus on the semantic aspects, somehow I was able to create a nice, clean and tidy &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; structure in the
        first wave, and with the guiding help of the &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://css-tricks.com/abem-useful-adaptation-bem/&quot;&gt;ABEM&lt;/a&gt;
        &lt;code class=&quot;highlighter-rouge&quot;&gt;CSS&lt;/code&gt; class naming convention, the style definitions were also became pretty flexible. This happens when you stare the monitor
        long enough: you get experiences which with time become skills.&lt;/p&gt;
        &lt;h3 id=&quot;surprise-motherer&quot;&gt;Surprise, Mother#@!$er!&lt;/h3&gt;
        &lt;p&gt;First I tried to figure out, what I should change to make this website look relatively good on the smaller screens. And here
        came the surprise: only a few parts required different styles. And some of these changes can be
        applied directly on the “global” styles. Great, isn’t it? I was happy I don’t have to refactor the whole frontend.&lt;/p&gt;
        &lt;p&gt;So in the end, in one week of free time work, I was able to create a decent mobile and tablet version for this website. Unfortunately
        I had to give up the “Monitor with terrible code” (hidden) feature, because the dynamically positioning an element, which has the
        &lt;code class=&quot;highlighter-rouge&quot;&gt;perspective&lt;/code&gt; style transformation applied on it, is very difficult, and it exceeds my current capabilities.&lt;/p&gt;
        &lt;p&gt;So I modified the header, and I spliced off the &lt;code class=&quot;highlighter-rouge&quot;&gt;title with the woman&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;monitor&lt;/code&gt;. This way I could gently hide the monitor
        as soon as the header starts to shrink.&lt;/p&gt;
        &lt;p&gt;Also the smallest screens got a &lt;code class=&quot;highlighter-rouge&quot;&gt;title only&lt;/code&gt; header to maximize the useful area of the page. In fact this graphical change caused
        the biggest headache because the actual version of the design was never saved in an editable source (whatta loooser!), and I had to
        remember all those tiny adjustments to add them again. The rest of the job on the CSS side (overwrite margin, padding, font-size)
        were just a matter of manual measuring.&lt;/p&gt;
        &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
        &lt;p&gt;When you have time, it’s worth to invest in planning, and thinking in the &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-first approach&lt;/code&gt;. Most of the people reads articles
        on their mobile phones or tablets. Those, who refuse to support these devices will loose potential customers. For me, it’s not a
        disaster, I don’t think there are many people visiting this new and unknown website. And since I have taken up the responsive(ish)
        design, my future readers will know about my design failure only from this article.&lt;/p&gt;</content><author><name>Gábor Iván</name></author><category term="frontend" /><category term="responsive" /><category term="mobile" /><category term="design" /><summary type="html">...and how I regret it. At least a little bit.</summary></entry><entry><title type="html">Deal with ‘public’ and ‘private’ access modifiers in JS</title><link href="http://0.0.0.0:4000/frontend/deal-with-public-and-private-access-modifiers-in-js" rel="alternate" type="text/html" title="Deal with 'public' and 'private' access modifiers in JS" /><published>2020-02-21T08:35:00+01:00</published><updated>2020-03-02T13:33:03+01:00</updated><id>http://0.0.0.0:4000/frontend/deal-with-public-and-private-access-modifiers-in-js</id><content type="html" xml:base="http://0.0.0.0:4000/frontend/deal-with-public-and-private-access-modifiers-in-js">&lt;h3 id=&quot;my-concept&quot;&gt;My concept&lt;/h3&gt;
        &lt;p&gt;You’d better know, I am basically a backend developer. Or, as I used to say with a little bit of humor and a piece of well-deserved self-critics:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;I am a Full-STUCK Señor PHP Developer&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Most of my time in the office I deal with corporate PHP codes, and try to give my best in it, and I also try to improve my skills. I write object-oriented
        code 99% during the work by using the most hyped and recommended patterns, such as Dependency Injection, Adapter, Factory, MVC, etc. So I use OO day-by-day,
        and I learned to think in the object-styled encapsulation during my years in the industry. In fact I already see the world in Objects…!
        That’s totally crazy, isn’t it?&lt;/p&gt;
        &lt;p&gt;And when I deal with JavaScript for myself, like on this blog, where I can give myself free hand, I try to somehow adopt this ‘knowledge’ too. But we
        all know that, in the native way it is not that simple. It needs a different kind of thinking, which I find a bit weird and triple-twisted. There are
        objects of a kind, and since ES6 there are classes too, but not in the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;ical way (Ha-Ha-Ha). Scope, inheritance, access modifiers and in general
        everything is just different. Well, JavaScript is a different animal for sure… that’s what they used to say.&lt;/p&gt;
        &lt;p&gt;I know, there are many many wonderful frameworks and libraries to develop JavaScript. I could do React, Svelte, Vue and so on. But I don’t. Not right now.
        I want to do something simple, something on my own. I like to reinvent the wheel, and even if it will be a shitty one, it will be mine. And I don’t want
        to go deep in the soul of the JavaScript development now, and define terms, understand the whys, find the good way I ought to follow.&lt;/p&gt;
        &lt;p&gt;The first step for a dummy / lame / rookie / amateur like me is to try to create something for my own. Make it work. Then, when I have some experience,
        I can learn the proper ‘How’. You can’t qualify yourself to the 100m sprint on the Olympic games until you can’t even walk, can you? And how do you learn
        to walk? Try it, do it, fail and retry.&lt;/p&gt;
        &lt;p&gt;So I decided to use my understanding of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, and with the available tools of the JavaScript’s arsenal, I create something, in which I can feel
        myself comfortable when I code. Of course to achieve this, I had to give up some of OO things temporarily, and stick to a very basic concept:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;encapsulate properties and methods together&lt;/li&gt;
        &lt;li&gt;support &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; access in some way&lt;/li&gt;
        &lt;li&gt;no need for inheritance right now&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;I tried several different ways before I choose the following two cases. Both have pros and cons. To be comparable I’ve made the same &lt;code class=&quot;highlighter-rouge&quot;&gt;Yet-another&lt;/code&gt;
        UUID generator class.&lt;/p&gt;
        &lt;h4 id=&quot;way-1-clean-but-vulnerable&quot;&gt;Way 1: clean but vulnerable.&lt;/h4&gt;
        &lt;p&gt;This can be called a more ‘standard’ solution.&lt;/p&gt;
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
        24
        25
        26
        27
        28
        29
        30
        31
        32
        33
        34
        35
        36
        37
        38
        39
        40
        41
        42
        43
        44
        45
        46
        47
        48
        49
        50
        51
        52
        53
        54
        55
        56
        57
        58
        59
        60
        61
        62
        63
        64
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**
        * @typedef {Object} MyClass1
        * @property {function(): string} generateUUID
        * @property {string} nilUUID
        */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
        * @constructor
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** @type {array} */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AVAILABLE_CHARACTERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** @type {array} */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;xxxxxxxx-xxxx-!xxx-?xxx-xxxxxxxxxxxx&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** @type {string} */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
        * @returns {string}
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getNilUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;00000000-0000-0000-0000-000000000000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** @type {string} */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getNilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
        * Generate a valid UUID
        * @see https://en.wikipedia.org/wiki/Universally_unique_identifier
        *
        * @return {string}
        */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isNilUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isNilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;uuidVariant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[^\-\!\?]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AVAILABLE_CHARACTERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ! is the uuid version&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ? is the high bits of clock sequence according to rfc4122&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AVAILABLE_CHARACTERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uuidVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;MyClass1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myObj1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Our goal is to create an object where there is a publicly available property (&lt;code class=&quot;highlighter-rouge&quot;&gt;nilUUID&lt;/code&gt;) and a publicly available method (&lt;code class=&quot;highlighter-rouge&quot;&gt;generateUUID()&lt;/code&gt;).&lt;/p&gt;
        &lt;p&gt;We construct a new instance with the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword. If we leave the keyword and then try to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;myObj1.generateUUID();&lt;/code&gt;, we will get a
        &lt;code class=&quot;highlighter-rouge&quot;&gt;Uncaught TypeError: Cannot read property 'generateUUID' of undefined&lt;/code&gt; error.&lt;/p&gt;
        &lt;p&gt;All the &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; methods and properties will be hidden from “outside”.
        So the &lt;code class=&quot;highlighter-rouge&quot;&gt;myObj1.getNilUUID();&lt;/code&gt; will result a &lt;code class=&quot;highlighter-rouge&quot;&gt;Uncaught TypeError: myObj1.getNilUUID is not a function&lt;/code&gt; error. We can call them to be &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;.&lt;/p&gt;
        &lt;p&gt;Every property and method having the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; keyword will be reachable from outside. They are definitely &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;. But they are heavily vulnerable which
        I find really disturbing. But that’s the JS way. Try the &lt;code class=&quot;highlighter-rouge&quot;&gt;document.getElementById = 'sucker';&lt;/code&gt; in the console on any website and see what happens. It’s
        also possible to inject new properties and methods into our instance which is also a bit… yuck…&lt;/p&gt;
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Get and set public property&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// '00000000-0000-0000-0000-000000000000'&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// '00000000-0000-0000-0000-000000000000'&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello World!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'Hello World!'&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'Hello World!'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// BUT!&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;I am so sorry&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//  Uncaught TypeError: myObj1.generateUUID is not a function&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'I am so sorry'&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h5 id=&quot;pros&quot;&gt;Pros:&lt;/h5&gt;
        &lt;ul&gt;
        &lt;li&gt;It has a cleaner code.&lt;/li&gt;
        &lt;li&gt;It’s easier to understand.&lt;/li&gt;
        &lt;li&gt;Enforces the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword for instantiation.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h5 id=&quot;cons&quot;&gt;Cons:&lt;/h5&gt;
        &lt;ul&gt;
        &lt;li&gt;It is vulnerable: every public method and property can be re-defined.&lt;/li&gt;
        &lt;li&gt;It has no support for &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; keywords.&lt;/li&gt;
        &lt;li&gt;No type check is possible before assigning new value to the public properties.&lt;/li&gt;
        &lt;li&gt;It’s possible to add/attach additional properties and methods to the instance.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h5 id=&quot;demo&quot;&gt;Demo:&lt;/h5&gt;
        &lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://codepen.io/navig80/pen/qBdRNeb?editors=1111&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;
        &lt;h4 id=&quot;way-2-twisted-thinking-to-protect-the-code&quot;&gt;Way 2: twisted thinking to protect the code&lt;/h4&gt;
        &lt;p&gt;This one is a nasty motherfucker. I found the cons very annoying in the first example, so I tried to figure out, how can I eliminate them.&lt;/p&gt;
        &lt;p&gt;In this case we start the same way as previously, but then instead of making publicly available properties and methods, we simply
        &lt;strong&gt;return&lt;/strong&gt; with an object.&lt;/p&gt;
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
        24
        25
        26
        27
        28
        29
        30
        31
        32
        33
        34
        35
        36
        37
        38
        39
        40
        41
        42
        43
        44
        45
        46
        47
        48
        49
        50
        51
        52
        53
        54
        55
        56
        57
        58
        59
        60
        61
        62
        63
        64
        65
        66
        67
        68
        69
        70
        71
        72
        73
        74
        75
        76
        77
        78
        79
        80
        81
        82
        83
        84
        85
        86
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**
        * @returns {string|Readonly&amp;lt;{readonly, nilUUID: Object.nilUUID, generateUUID: (function(*=): string)}&amp;gt;}
        * @constructor
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** @type {array} */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AVAILABLE_CHARACTERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** @type {array} */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;xxxxxxxx-xxxx-!xxx-?xxx-xxxxxxxxxxxx&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** @type {string} */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
        * @returns {string}
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getNilUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;00000000-0000-0000-0000-000000000000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
        * Collection of public properties.
        *
        * @type {Object}
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getNilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
        * Collection of public methods including setters and getters for public properties.
        *
        * @type { {readonly nilUUID: Object.nilUUID, generateUUID: (function(*=): string)} }
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;nilUUID must store string value, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; given.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
        * Generate and return a valid UUID
        * @see https://en.wikipedia.org/wiki/Universally_unique_identifier
        *
        * @returns {string}
        */&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isNilUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isNilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;uuidVariant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[^\-\!\?]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AVAILABLE_CHARACTERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ! is the uuid version&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuidVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ? is the high bits of clock sequence according to rfc4122&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AVAILABLE_CHARACTERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uuidVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;MyClass2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myObj2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyClass2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Our goal is the same: create an object where there is a publicly available property (&lt;code class=&quot;highlighter-rouge&quot;&gt;nilUUID&lt;/code&gt;) and a publicly available method (&lt;code class=&quot;highlighter-rouge&quot;&gt;generateUUID()&lt;/code&gt;).&lt;/p&gt;
        &lt;p&gt;We construct a new instance with the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword. But unfortunately it’s not mandatory. However, I’d like to use it to keep the illusion.&lt;/p&gt;
        &lt;p&gt;As previously all the &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; methods and properties will be hidden from “outside”. And here’s the twisty thing: we define two objects in the
        private part. One for the “&lt;em&gt;public properties&lt;/em&gt;” and one for the “&lt;em&gt;public methods&lt;/em&gt;”. Within each object we can reach methods and properties by the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;
        keyword, as we do it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;generateUUID()&lt;/code&gt; method. But for cross-referencing between the &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt; we can’t use the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;.&lt;/p&gt;
        &lt;p&gt;So why we separate the “&lt;em&gt;public&lt;/em&gt;” properties and methods? Because in the end we will freeze the returning &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt; object, which means we can’t change
        this object any more. Luckily this does not stand for the contents of Arrays and Objects. In a frozen object we can’t change scalars, but we can
        add/change elements in an array/object. That’s why we collect all the “&lt;em&gt;public&lt;/em&gt;” properties separately in an object. And since we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;
        and &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; keywords, we can create the illusion of working directly with the public property:&lt;/p&gt;
        &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Get and set public property&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// '00000000-0000-0000-0000-000000000000'&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// '00000000-0000-0000-0000-000000000000'&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello World!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nilUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'Hello World!'&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'Hello World!'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// AND!&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;I am so sorry&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'Hello World!'&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'function()...'&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h5 id=&quot;pros-1&quot;&gt;Pros&lt;/h5&gt;
        &lt;ul&gt;
        &lt;li&gt;The public code is in safe. No way to overwrite them.&lt;/li&gt;
        &lt;li&gt;It has support for &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; keywords.&lt;/li&gt;
        &lt;li&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; method we can do type check before assignment.&lt;/li&gt;
        &lt;li&gt;Not possible to add/attach additional properties and methods.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h5 id=&quot;cons-1&quot;&gt;Cons&lt;/h5&gt;
        &lt;ul&gt;
        &lt;li&gt;This is far away from readability.&lt;/li&gt;
        &lt;li&gt;It’s difficult to understand.&lt;/li&gt;
        &lt;li&gt;Every public, read-write property requires a &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; method.&lt;/li&gt;
        &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword is not mandatory.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h5 id=&quot;demo-1&quot;&gt;Demo:&lt;/h5&gt;
        &lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://codepen.io/navig80/pen/yLNgVye?editors=1111&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;
        &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
        &lt;p&gt;As you can see, in order to eliminate all the negatives from the first solution, I had to sacrifice all the positives from it. But I think it’s worth it,
        because in the end we want to use the code and not read it. And we can still use the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword if we want to.&lt;/p&gt;
        &lt;p&gt;Readability is not a big price to make our object defended from harmful hands. What do you think? Am I right? Am I wrong? Is this really a
        worst practice?&lt;/p&gt;</content><author><name>Gábor Iván</name></author><category term="frontend" /><category term="js" /><category term="oop" /><summary type="html">I asked my Pro Frontend friends and colleagues to tell me their honest opinions about my codes. Well, I got it. This is the absolute worst practice I'm afraid.</summary></entry><entry><title type="html">Create a simple Hamburger menu with CSS only</title><link href="http://0.0.0.0:4000/frontend/create-a-simple-hamburber-menu-with-css" rel="alternate" type="text/html" title="Create a simple Hamburger menu with CSS only" /><published>2020-01-20T21:40:00+01:00</published><updated>2020-03-06T11:44:41+01:00</updated><id>http://0.0.0.0:4000/frontend/create-a-simple-hamburber-menu-with-css</id><content type="html" xml:base="http://0.0.0.0:4000/frontend/create-a-simple-hamburber-menu-with-css">&lt;h3 id=&quot;confession&quot;&gt;Confession&lt;/h3&gt;
        &lt;p&gt;The basic idea was not mine. Unfortunately I don’t even remember where I read about if for the first time, so I am unable to place
        credits, and I also unable to tell which solution was the one that give the base for my code. There are tons of tutorials in this
        topic believe me. And now here’s mine.&lt;/p&gt;
        &lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt;
        &lt;p&gt;If you don’t want to waste your time reading this tutorial, and you only need a working code sample, please check the source code on
        &lt;a href=&quot;https://github.com/Gixx/worstpractice-css-hamburger-menu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
        &lt;h3 id=&quot;build-my-burger-up&quot;&gt;Build my Burger up!&lt;/h3&gt;
        &lt;p&gt;The goal is to create a slide-in menu with semi-transparent, clickable backdrop without any JavaScript, image or font resources.
        Only HTML and CSS. It sounds easy, and after we have done it for the first time, we will see that, it IS really easy to understand
        and adopt this technique to other use cases.&lt;/p&gt;
        &lt;h4 id=&quot;naming-conventions&quot;&gt;Naming conventions&lt;/h4&gt;
        &lt;p&gt;There are many popular standards and recommendations on the market which should be considered before starting the development.
        I prefer the &lt;a href=&quot;https://css-tricks.com/abem-useful-adaptation-bem/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ABEM&lt;/a&gt;, but please feel free to use
        any other you like. The code samples will be straightforward and easy to replace the class names.&lt;/p&gt;
        &lt;h4 id=&quot;1-wrapper&quot;&gt;1. Wrapper&lt;/h4&gt;
        &lt;p&gt;I tried some “wrapper-less” solutions during the development process, but none of them could satisfy my criteria. We &lt;strong&gt;NEED&lt;/strong&gt; a wrapper.
        Anyways I like boxing and encapsulating.&lt;/p&gt;
        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-menu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h4 id=&quot;2-hamburger&quot;&gt;2. Hamburger&lt;/h4&gt;
        &lt;p&gt;I’m starving for a (good) hamburger, and I am not (yet enough) afraid of the junk food giants. But forget about the food for a minute,
        because what we are talking about now is that three little &lt;del&gt;piggies&lt;/del&gt; horizontal bars on the top left corner on this site (and on many
        others). This symbol became a standard in the last decade, so again:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;No need to reinvent the wheel.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;There are (at least) three ways to create this icon:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;Use an image. By itself, or as a background, doesn’t matter. A bit old thinking, but definitely the easiest.&lt;/li&gt;
        &lt;li&gt;Use an Icon Font (like the &lt;a href=&quot;https://material.io/resources/icons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Material Icons&lt;/a&gt;). Elegant and popular solution.&lt;/li&gt;
        &lt;li&gt;Use meaningless markup and style them with CSS.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;I used the third option, because I promised a “CSS-only Hamburger Menu”, and not a “CSS-only Hamburger Menu with Image, Font and Cheese”.
        So let’s create those meaningless markups:&lt;/p&gt;
        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-menu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-menu__burger&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h4 id=&quot;3-toggle-state&quot;&gt;3. Toggle state&lt;/h4&gt;
        &lt;p&gt;Then, we have to be able to define two states: &lt;code class=&quot;highlighter-rouge&quot;&gt;Open&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Closed&lt;/code&gt;. Without JavaScript our toolkit is very limited when we
        are talking about ‘state’. No doubt, the best tool for this job is the &lt;code class=&quot;highlighter-rouge&quot;&gt;checkbox&lt;/code&gt;. This HTML element natively provides us what we
        need, and we don’t have to deal with any JavaScript to change its state. And most importantly: we can differentiate these states
        on CSS level.&lt;/p&gt;
        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-menu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        ...
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-menu__toggle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h4 id=&quot;4-menu-body&quot;&gt;4. Menu body&lt;/h4&gt;
        &lt;p&gt;And of course we need the menu body itself and some content to make it useful:&lt;/p&gt;
        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-menu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        ...
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-menu__content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Categories&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Cars&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Girls&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Money&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h4 id=&quot;5-backdrop&quot;&gt;5. Backdrop&lt;/h4&gt;
        &lt;p&gt;Unfortunately the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;::backdrop&lt;/code&gt; CSS pseudo-element&lt;/a&gt;
        is not supported in every modern browser… ☞ Safari! Hello?? …so we have do a little bit of workaround.&lt;/p&gt;
        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-menu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        ...
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-menu__backdrop&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Now, that we have the menu skeleton, it’s time to add the style that makes all the magic.&lt;/p&gt;
        &lt;h3 id=&quot;pimp-my-burger-up&quot;&gt;Pimp my Burger up!&lt;/h3&gt;
        &lt;p&gt;To be able to do the CSS job in the right way, I like to visualize the layers and boxes in my head. We need to know which element will
        be over the other. Until the W3C is not ready with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Mind Reader API&lt;/code&gt;, I use this simple diagram:&lt;/p&gt;
        &lt;figure class=&quot;a-illustration&quot;&gt;
        &lt;img class=&quot;a-illustration__image&quot; src=&quot;/assets/img/post-illustration-placeholder.png&quot; data-src=&quot;/assets/img/blog/2020/frontend/create-a-simple-hamburber-menu-with-css/layers.jpg&quot; width=&quot;800&quot; /&gt;
        &lt;figcaption class=&quot;a-illustration__caption&quot;&gt;Box layers&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;The actual page content will be between the &lt;code class=&quot;highlighter-rouge&quot;&gt;BODY&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;.m-menu&lt;/code&gt; wrapper.&lt;/p&gt;
        &lt;h4 id=&quot;recommendation&quot;&gt;Recommendation&lt;/h4&gt;
        &lt;p&gt;There are some default styles I used to set up every time, to be able to calculate better with box sizes. If you don’t want to use any of
        the popular CSS “Frameworks”, I highly recommend you to use these setting as well. I believe they will make your life much easier.&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
        24
        25
        26
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;*,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;62.5%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;font-variant-ligatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no-common-ligatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;font-feature-settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;kern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;liga&quot;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;clig&quot;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;scroll-behavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smooth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;overflow-x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h5 id=&quot;explanation&quot;&gt;Explanation&lt;/h5&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;box-sizing: border-box;&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;
        Applied on every element and on the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; pseudo-element. Helps calculating with the box sizes
        and positions.
        &lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;cursor: default;&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;
        It's my personal preference, but I don't like the default cursor over the text. Sometimes it's really hard to find, where you left it.
        &lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;font-size: 62.5%;&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;
        Applied on the HTML element. If your browser supports the unspoken rules, then this should set the base size to 10 pixels. And
        later on you can simply use the &lt;a href=&quot;https://www.w3.org/TR/css-values-3/#rem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;rem&lt;/code&gt; unit&lt;/a&gt; instead
        of &lt;code&gt;px&lt;/code&gt;. Why? Because if the user decides to change the browser's default font sizing, the design will automatically scale
        properly and the design will not break apart.
        &lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;orverflow-x: hidden;&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;
        We stretch the HTML, the BODY and also our menu wrapper to the maximum width of the browsing area. In general it's fine, but on
        Windows the scrollbars are those old-fashioned ones that consumes a narrow area (around 20 pixels) from this browsing area instead
        of being an overlay like on Mac OSX and on some Linux Distros (e.g.: Ubuntu). So when we have a long content, the vertical scrollbar
        appears, takes 20 pixels from the browsing area, and since our HTML is said to be &lt;code&gt;100vw&lt;/code&gt;, the whole thing together will be
        &lt;code&gt;100vw + 20px&lt;/code&gt;, which is wider than it can display, so the horizontal scrollbar will appear too. That is what we try to avoid.
        Of course you have to keep this in mind, and plan your design well to let enough space for the scrollbar.
        &lt;/dd&gt;
        &lt;/dl&gt;
        &lt;h4 id=&quot;1-the-wrapper&quot;&gt;1. The wrapper&lt;/h4&gt;
        &lt;p&gt;We put the wrapper into the top left corner and stretch it over the whole browser window and also stuck it into that position whatever happens.&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.m-menu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;pointer-events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;See that we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;vw&lt;/code&gt; (&lt;em&gt;viewport width&lt;/em&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;vh&lt;/code&gt; (&lt;em&gt;viewport height&lt;/em&gt;) instead of a percentage value. Why? In nutshell, a very non
        precisely answer is, we use it because the percentage will be calculated from the parent element, while the viewport is calculated
        from the browser window area size. And together with the &lt;code class=&quot;highlighter-rouge&quot;&gt;position: fixed&lt;/code&gt; it will be always in the same viewport position even if we
        scroll the content “below”. Yes, they are &lt;strong&gt;below&lt;/strong&gt;, because this wrapper should be &lt;strong&gt;always on top&lt;/strong&gt;. For this make sure that the
        &lt;code class=&quot;highlighter-rouge&quot;&gt;z-index&lt;/code&gt;’s value is high enough.&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;But if it’s on the top it will block the underneath content!&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;No, and here’s the little magic, I was talking about. The &lt;code class=&quot;highlighter-rouge&quot;&gt;pointer-events: none;&lt;/code&gt; will make sure that this element will let every
        pointer (mouse) events through to the elements underneath.&lt;/p&gt;
        &lt;h4 id=&quot;2-the-backdrop&quot;&gt;2. The backdrop&lt;/h4&gt;
        &lt;p&gt;The first layer inside the wrapper - counting from bottom to top - is the backdrop. What the backdrop is about? According to the definition, it…&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;is a box the size of the viewport which is rendered immediately beneath any element being presented in full-screen mode. This includes both
        elements which have been placed in full-screen mode using the Fullscreen API and &lt;dialog&gt; elements.&lt;/dialog&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Cool. Unfortunately this definition belongs to the &lt;code class=&quot;highlighter-rouge&quot;&gt;::backdrop&lt;/code&gt; CSS pseudo-element, which is not supported, so we have to make it work with a bit
        of thinking.&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.m-menu__backdrop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500ms&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;pointer-events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Yet another full-streched element. However here we used percentage instead of viewport units. Remember what I wrote about the difference between these
        units? We defined the &lt;strong&gt;must have&lt;/strong&gt; size of the whole menu for the wrapper. Each children will reflect to this, so the percentage is just fine.&lt;/p&gt;
        &lt;p&gt;We defined here some contradictory things, like setting semi-transparent &lt;code class=&quot;highlighter-rouge&quot;&gt;background-color&lt;/code&gt; when also set the
        opacity to zero. Why? We define everything that it should have when it will be fully visible, but the initial state is to not show it. Other styles
        like &lt;code class=&quot;highlighter-rouge&quot;&gt;display: none&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility: hidden&lt;/code&gt;, or positioning out of the scope are not suitable, because for the fade-in effect those are simply not
        good. And we want fancy eye-candy for our menu, don’t we?&lt;/p&gt;
        &lt;p&gt;See that we also ignore the click event on it. That is by purpose, our workaround solution doesn’t need to be clicked.&lt;/p&gt;
        &lt;p&gt;For now let it rest a bit, and continue with the rest of the menu.&lt;/p&gt;
        &lt;h4 id=&quot;3-the-burger&quot;&gt;3. The burger&lt;/h4&gt;
        &lt;p&gt;The next layer is the Hamburger &lt;em&gt;icon&lt;/em&gt; which technically is only a visual thing.
        Within the wrapper we can bravely position the elements with the &lt;code class=&quot;highlighter-rouge&quot;&gt;absolute&lt;/code&gt; value too.&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.m-menu__burger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.6rem&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.4rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;This will position the &lt;em&gt;hamburger icon&lt;/em&gt; box &lt;code class=&quot;highlighter-rouge&quot;&gt;11px&lt;/code&gt; from the top left corner. This is only the container for the bars which are created from one single
        &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; element the good old &lt;code class=&quot;highlighter-rouge&quot;&gt;::before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;::after&lt;/code&gt; pseudo-elements.&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.m-menu__burger&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;.m-menu__burger&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;.m-menu__burger&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3.2rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.4rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.2rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.3rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;.m-menu__burger&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-0.8rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;.m-menu__burger&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.8rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h5 id=&quot;explanation-1&quot;&gt;Explanation&lt;/h5&gt;
        &lt;p&gt;So basically we set to hamburger container to &lt;code class=&quot;highlighter-rouge&quot;&gt;40px ✕ 40px&lt;/code&gt; with thick padding (two times &lt;code class=&quot;highlighter-rouge&quot;&gt;4px&lt;/code&gt; on the sides and two times &lt;code class=&quot;highlighter-rouge&quot;&gt;6px&lt;/code&gt; on top and bottom),
        that will reduce the inner area &lt;code class=&quot;highlighter-rouge&quot;&gt;32px ✕ 28px&lt;/code&gt;. This will be our sandbox. The &lt;code class=&quot;highlighter-rouge&quot;&gt;32px&lt;/code&gt; width is exactly the with of the horizontal lines (the &lt;em&gt;layers&lt;/em&gt;
        of the hamburger), and the &lt;code class=&quot;highlighter-rouge&quot;&gt;28px&lt;/code&gt; is also perfect, because it’s an easy to count value when we divide it with &lt;strong&gt;7&lt;/strong&gt;.&lt;/p&gt;
        &lt;p&gt;Why seven? Because it’s easy to count with: three of them are the bars themselves - so the height of one bar is &lt;code class=&quot;highlighter-rouge&quot;&gt;4px&lt;/code&gt; -, and four are the gaps
        around them (also &lt;code class=&quot;highlighter-rouge&quot;&gt;4px&lt;/code&gt;). Since the pseudo-elements belong to the “&lt;em&gt;parent&lt;/em&gt;” and they move together, we have to calculate a little bit weird way:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;position the &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; to the middle: gap + &lt;code class=&quot;highlighter-rouge&quot;&gt;::before&lt;/code&gt; + gap, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;3 ✕ 4px&lt;/code&gt;, so set the &lt;code class=&quot;highlighter-rouge&quot;&gt;margin-top&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;12px&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;position the &lt;code class=&quot;highlighter-rouge&quot;&gt;::before&lt;/code&gt; above the span: position of the &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; as root - gap - height of the &lt;code class=&quot;highlighter-rouge&quot;&gt;::before&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;0 - 4px - 4px&lt;/code&gt;, so set the &lt;code class=&quot;highlighter-rouge&quot;&gt;margin-top&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;-8px&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;position the &lt;code class=&quot;highlighter-rouge&quot;&gt;::after&lt;/code&gt; under the span: position of the &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; as root + the height of the &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; + gap, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;0 + 4px + px&lt;/code&gt;, so set the &lt;code class=&quot;highlighter-rouge&quot;&gt;margin-top&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;8px&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;The measuring looks something like this on the picture:&lt;/p&gt;
        &lt;figure class=&quot;a-illustration&quot;&gt;
        &lt;img class=&quot;a-illustration__image&quot; src=&quot;/assets/img/post-illustration-placeholder.png&quot; data-src=&quot;/assets/img/blog/2020/frontend/create-a-simple-hamburber-menu-with-css/measuring.jpg&quot; width=&quot;800&quot; /&gt;
        &lt;figcaption class=&quot;a-illustration__caption&quot;&gt;Measuring the hamburger menu icon&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;h4 id=&quot;4-the-toggle&quot;&gt;4. The toggle&lt;/h4&gt;
        &lt;p&gt;The next layer is the toggle, the heart of the menu controlling. Remember, it’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;checkbox&lt;/code&gt; element, that should be clickable, but not really visible.
        So we do the following:&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.m-menu__toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;pointer-events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;See that the size and position in the initial state is the same as the hamburger’s, and positioned right above it. Yes, the trick is you can change the
        size of a checkbox. If you make it visible by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;opacity&lt;/code&gt; to 1, you can see how weird it looks like. In fact in every browser it will look a
        bit different. But we don’t want to so it, we need it only to be functional. Luckily it will be, even after change it’s default size.
        And of course we have to make the hamburger clickable, so we set the &lt;code class=&quot;highlighter-rouge&quot;&gt;pointer-events: all&lt;/code&gt;.&lt;/p&gt;
        &lt;h4 id=&quot;5-the-menu&quot;&gt;5. The menu&lt;/h4&gt;
        &lt;p&gt;The topmost layer is the menu content. It’s up to you how you design it, I prefer to make it similar to the one that the
        &lt;a href=&quot;https://getmdl.io/components/index.html#layout-section&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Material Design Lite&lt;/a&gt; uses. For this tutorial I focus on the menu
        “&lt;em&gt;frame&lt;/em&gt;” only.&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.m-menu__content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2rem&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;transform-origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translateX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-31.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cubic-bezier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;pointer-events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;h5 id=&quot;explanation-2&quot;&gt;Explanation&lt;/h5&gt;
        &lt;p&gt;We defined a fixed &lt;code class=&quot;highlighter-rouge&quot;&gt;300px&lt;/code&gt; width and stretched it vertically. By setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow: auto&lt;/code&gt;, we make sure to support the menus with many entries and
        also make it work on small screens, like smart phones. We also enabled all &lt;code class=&quot;highlighter-rouge&quot;&gt;pointer-events&lt;/code&gt;, because we want to make the menu items to be clickable.
        Remember you have to do this only within the wrapper.&lt;/p&gt;
        &lt;p&gt;We also added a little drop shadow just to visually highlight the menu. You can also see that we moved out the menu from the scope to the left with
        the size of &lt;code class=&quot;highlighter-rouge&quot;&gt;315px&lt;/code&gt;. How we get this number? It’s the width of the menu (&lt;code class=&quot;highlighter-rouge&quot;&gt;300px&lt;/code&gt;), the spread of the shadow (&lt;code class=&quot;highlighter-rouge&quot;&gt;10px&lt;/code&gt;) and a little bit of safety margin
        (&lt;code class=&quot;highlighter-rouge&quot;&gt;5px&lt;/code&gt;).&lt;/p&gt;
        &lt;p&gt;And don’t think that I am a Math genius, the &lt;code class=&quot;highlighter-rouge&quot;&gt;cubic-bezier&lt;/code&gt; transition was fine-tuned with the &lt;a href=&quot;https://www.edreamz.com/blog/fine-tuning-css-transitions-directly-in-chrome&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Chrome’s Dev Tools&lt;/a&gt;.&lt;/p&gt;
        &lt;h4 id=&quot;6-changing-state&quot;&gt;6. Changing state&lt;/h4&gt;
        &lt;p&gt;Now we have the menu’s initial style ready. But how will it work? Let’s define the workflow:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;Initial / Closed state: the hamburger icon is clickable, the rest of the page is not blocked by the wrapper&lt;/li&gt;
        &lt;li&gt;Click on the hamburger&lt;/li&gt;
        &lt;li&gt;The menu slides in and the backdrop fades in. ☞ Open state.&lt;/li&gt;
        &lt;li&gt;Open state: the menu is visible, the menu items are individually clickable. The backdrop blocks the website “&lt;em&gt;under&lt;/em&gt;” it, and the full backdrop is clickable.&lt;/li&gt;
        &lt;li&gt;Click on the menu items will load the targeted address, click on the backdrop will slide out the menu and fades out the backdrop. ☞ Closed state.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;This behavior can be defined in three little rules which will be applied only when the checkbox is checked. For this we have to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;:checked&lt;/code&gt;
        pseudo-class selector which is widely supported.&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.m-menu__toggle&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:checked&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;When the unvisible checkbox is clicked, it will get the &lt;code class=&quot;highlighter-rouge&quot;&gt;checked&lt;/code&gt; property set by the browser, and with the &lt;code class=&quot;highlighter-rouge&quot;&gt;:checked&lt;/code&gt; pseudo-class selector we can
        apply additional styles. Here we make it stretched to &lt;code class=&quot;highlighter-rouge&quot;&gt;100%&lt;/code&gt; in both directions. Why we use percent instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;vw&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vh&lt;/code&gt; units? Because of the
        same reason we used it for the backdrop.&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.m-menu__toggle&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:checked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.m-menu__content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Here when the checkbox is checked the &lt;code class=&quot;highlighter-rouge&quot;&gt;.m-menu__content&lt;/code&gt; will drop its transform style, which was &lt;code class=&quot;highlighter-rouge&quot;&gt;translateX(-31.5rem);&lt;/code&gt;. In this case the &lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt; is
        equal with setting it to &lt;code class=&quot;highlighter-rouge&quot;&gt;translateX(0);&lt;/code&gt; but in a shorter way. The transition will add some dynamics into the slide-in.&lt;/p&gt;
        &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.m-menu__toggle&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:checked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.m-menu__backdrop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Setting the backdrops’s &lt;code class=&quot;highlighter-rouge&quot;&gt;opacity&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; will make it appear with a transition effect that we defined in the backdrop’s initial state. And since we
        did it there, it will also “&lt;em&gt;played&lt;/em&gt;” backwards when we get back to that state.&lt;/p&gt;
        &lt;h3 id=&quot;live-demo&quot;&gt;Live Demo&lt;/h3&gt;
        &lt;p&gt;I drop together a little demo, check it out on &lt;a href=&quot;https://codepen.io/navig80/pen/VwYVBmo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
        &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
        &lt;p&gt;Creating something spectacular is not that difficult if we use our imagination and practice a little bit. Even this tutorial is very very easy, and I still could
        optimize it’s structure a little bit while I was writing this article. It’s all about learn, practice and learn again. And don’t be afraid to leave the comfort
        zone of the various frameworks.&lt;/p&gt;
        &lt;p&gt;Is this a good practice or a worst practice? Please tell me.&lt;/p&gt;</content><author><name>Gábor Iván</name></author><category term="frontend" /><category term="css" /><category term="html" /><category term="smart" /><summary type="html">Let's start with a pretty easy and smart solution. No JavaScript, only CSS.</summary></entry><entry><title type="html">Setup WSL2 with Docker</title><link href="http://0.0.0.0:4000/wsl/setup-wsl2-with-docker" rel="alternate" type="text/html" title="Setup WSL2 with Docker" /><published>2020-01-10T10:00:00+01:00</published><updated>2020-03-06T11:44:41+01:00</updated><id>http://0.0.0.0:4000/wsl/setup-wsl2-with-docker</id><content type="html" xml:base="http://0.0.0.0:4000/wsl/setup-wsl2-with-docker">&lt;h3 id=&quot;prolog&quot;&gt;Prolog&lt;/h3&gt;
        &lt;p&gt;For this experiment I used my own desktop PC which was recently upgraded after 7 years. New motherboard, new CPU, new
        RAM, new VGA. The upgradable components are the benefits, when you have an old-fashioned workstation. And for the new
        hardware, I installed a brand new Windows 10 Professional. Please don’t start flame war about operating systems, I
        have my own reasons to choose this.&lt;/p&gt;
        &lt;p&gt;With the clean install I found it to be the perfect time to use all the knowledge I gathered during the years, and bring
        together a smooth, easy-to-use and maintainable workspace for web development, that sucks less to set up and feels better
        to use than ever before.&lt;/p&gt;
        &lt;h3 id=&quot;-todo-follow-the-trail&quot;&gt;// @TODO follow the trail&lt;/h3&gt;
        &lt;h4 id=&quot;before-you-start&quot;&gt;Before you start&lt;/h4&gt;
        &lt;p&gt;The following list will change soon, as Microsoft will ship all the new features in Q2 2020 (if they can keep the deadlines).
        That is why I set the expiration day of this article to the upcoming months. So this tutorial is for those who don’t want to
        wait and are not afraid of taking a little bit of risk.&lt;/p&gt;
        &lt;h4 id=&quot;the-list&quot;&gt;The list&lt;/h4&gt;
        &lt;p&gt;It might be too long to write a step-by-step tutorial, and we all know, that when we need something, we only need to search
        for it on the Internet, and there’s a high chance to find the right solution. No need to reinvent the wheel.&lt;/p&gt;
        &lt;p&gt;In fact, the following links cover most part of the setup process, so I just had to put them in the right order. But since some of them are
        not so recent, I unintentionally made &lt;a href=&quot;#additional-discoveries&quot;&gt;new discoveries&lt;/a&gt;. Don’t forget to read them before you
        take the actions described on the linked pages.&lt;/p&gt;
        &lt;p&gt;So here are the sources you will need to have a nice DIY-day:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-gb/software-download/windows10ISO&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Install Windows 10&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://winaero.com/blog/enable-openssh-client-windows-10/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Enable the built-in OpenSSH Client&lt;/a&gt; if it’s not present by default.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://insider.windows.com/en-us/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Join the Insider Program&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://www.windowscentral.com/how-switch-between-fast-and-slow-rings-windows-10-insider-preview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Change your Insider settings to the “Fast Ring”&lt;/a&gt;, to get the Windows &lt;strong&gt;build 18917&lt;/strong&gt; or higher.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://gitforwindows.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Install Git for Windows&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Install WSL1&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/wsl2-install&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Install WSL2&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/docker-for-windows/edge-release-notes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Install the Edge release of the Docker Desktop Community&lt;/a&gt;, version 2.1.7.0 or higher&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://devblogs.microsoft.com/commandline/share-environment-vars-between-wsl-and-windows/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Share ENV variables between WSL and Windows&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://blog.joaograssi.com/windows-subsystem-for-linux-with-oh-my-zsh-conemu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Set up a more productive shell&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://blog.anaisbetts.org/using-github-credentials-in-wsl2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fix the “git push to GitHub from WSL” issue&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;From this point you can start your work with docker, it’s easy and fun. If you use PHPStorm for your work, &lt;a href=&quot;#phpstorm&quot;&gt;I have some tips&lt;/a&gt;
        to make your life a little bit easier.&lt;/p&gt;
        &lt;h3 id=&quot;additional-discoveries&quot;&gt;&lt;a name=&quot;additional-discoveries&quot;&gt;&lt;/a&gt;Additional discoveries&lt;/h3&gt;
        &lt;h4 id=&quot;in-step-2-about-the-openssh&quot;&gt;In step #2: About the OpenSSH&lt;/h4&gt;
        &lt;p&gt;In my Windows 10 build the OpenSSH Client was enabled by default. It’s a luck, because I missed the release notes that
        Microsoft actually added it to the Windows at all. Otherwise I would install some third party solution. But the built-in
        is just as good as any other or even better.&lt;/p&gt;
        &lt;h4 id=&quot;in-step-8-issues-with-the-docker-desktop&quot;&gt;In step #8: Issues with the Docker Desktop&lt;/h4&gt;
        &lt;p&gt;After installing the Edge release, start the application (look for it in the system tray), right click on the icon and
        choose the settings. There &lt;strong&gt;you MUST uncheck&lt;/strong&gt; the &lt;em&gt;Start Docker Desktop when you log in&lt;/em&gt; option to avoid to start automatically
        earlier than the WSL2 engine. Because when it happens, none of your local drives will be mounted in any of the Docker containers
        and mounting manually always sucks.&lt;/p&gt;
        &lt;figure class=&quot;a-illustration&quot;&gt;
        &lt;img class=&quot;a-illustration__image&quot; src=&quot;/assets/img/post-illustration-placeholder.png&quot; data-src=&quot;/assets/img/blog/2020/wsl/setup-wsl2-with-docker/docker-desktop.png&quot; width=&quot;700&quot; /&gt;
        &lt;figcaption class=&quot;a-illustration__caption&quot;&gt;Settings of the Docker Desktop&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;Under the &lt;em&gt;Resources&lt;/em&gt; menu, enable the WSL integration by selecting the Linux distribution you have.&lt;/p&gt;
        &lt;figure class=&quot;a-illustration&quot;&gt;
        &lt;img class=&quot;a-illustration__image&quot; src=&quot;/assets/img/post-illustration-placeholder.png&quot; data-src=&quot;/assets/img/blog/2020/wsl/setup-wsl2-with-docker/docker-desktop-2.png&quot; width=&quot;700&quot; /&gt;
        &lt;figcaption class=&quot;a-illustration__caption&quot;&gt;Choose your WSL distribution&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;And in the future, first always start the WSL first, and then the Docker Desktop app.&lt;/p&gt;
        &lt;h4 id=&quot;in-step-10-skip-the-terminal-emulator-part&quot;&gt;In step #10: Skip the terminal emulator part&lt;/h4&gt;
        &lt;p&gt;Many tutorial pages devote a whole chapter to the terminal emulators, particularly to the ConEmu. No doubt, that is a marvellous application,
        but let’s stop a little bit and think. Do we really need it? What will we win with another terminal? Okay, the &lt;strong&gt;CMD.exe&lt;/strong&gt; is not enough, the
        &lt;strong&gt;PowerShell&lt;/strong&gt; has a different purpose, the Git for windows shipped the &lt;strong&gt;BASH.exe&lt;/strong&gt; which is a good start, but now we have the &lt;strong&gt;WSL.exe&lt;/strong&gt;.
        We need that, we work with that, we work in that.&lt;/p&gt;
        &lt;h3 id=&quot;fine-tuning-the-phpstorm-terminal&quot;&gt;&lt;a name=&quot;phpstorm&quot;&gt;&lt;/a&gt;Fine tuning the PHPStorm terminal&lt;/h3&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JetBrains&lt;/a&gt; is an amazing company, which develops some really fantastic and without-only tools
        for the developer community. I am a PHP developer, so I use the &lt;a href=&quot;https://www.jetbrains.com/phpstorm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHPStorm&lt;/a&gt;, but if
        you feel more comfortable on the frontend side, the &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WebStorm&lt;/a&gt; is also a perfect choice.
        I believe, the common root makes this tutorial valid for the WebStorm as well.&lt;/p&gt;
        &lt;p&gt;I don’t really like the endless path of the Documents folder in Windows, so I usually store my projects on my secondary hard drive: &lt;code&gt;D:\Project&lt;/code&gt;.
        For the sake of clarity I create an example project: &lt;code&gt;MyTestProject&lt;/code&gt;. The PHPStorm sets the built-in terminal’s path to the project root, so the
        Terminal will look something like this:&lt;/p&gt;
        &lt;figure class=&quot;a-illustration&quot;&gt;
        &lt;img class=&quot;a-illustration__image&quot; src=&quot;/assets/img/post-illustration-placeholder.png&quot; data-src=&quot;/assets/img/blog/2020/wsl/setup-wsl2-with-docker/phpstorm.png&quot; width=&quot;800&quot; /&gt;
        &lt;figcaption class=&quot;a-illustration__caption&quot;&gt;The default state of the Terminal tool in PHPStorm&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;The PHPStorm uses the &lt;code&gt;CMD.exe&lt;/code&gt; by default, but luckily we can change that at our own will.&lt;/p&gt;
        &lt;figure class=&quot;a-illustration&quot;&gt;
        &lt;img class=&quot;a-illustration__image&quot; src=&quot;/assets/img/post-illustration-placeholder.png&quot; data-src=&quot;/assets/img/blog/2020/wsl/setup-wsl2-with-docker/phpstorm-2.png&quot; width=&quot;800&quot; /&gt;
        &lt;figcaption class=&quot;a-illustration__caption&quot;&gt;Terminal settings in PHPStorm&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;If the we change the &lt;code&gt;Shell path&lt;/code&gt;’s value to &lt;code&gt;C:\Windows\System32\wsl.exe&lt;/code&gt;, we see our beautiful PowerlineShell prompt we had
        set up in the step #10. First you need to close any opened PHPStorm Terminal window to make the changes take affect.&lt;/p&gt;
        &lt;figure class=&quot;a-illustration&quot;&gt;
        &lt;img class=&quot;a-illustration__image&quot; src=&quot;/assets/img/post-illustration-placeholder.png&quot; data-src=&quot;/assets/img/blog/2020/wsl/setup-wsl2-with-docker/phpstorm-3.png&quot; width=&quot;800&quot; /&gt;
        &lt;figcaption class=&quot;a-illustration__caption&quot;&gt;The Terminal tool with the WSL prompt&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;It’s simple, isn’t it? Then why am I wasting your previous time on write about a straightforward process? The answer is:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Because in some cases - which I can’t identify - the Docker gives an extra twist to the simplicity.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Yes, we want to use Docker. So let’s create a simple Docker machine. Personally I like the &lt;code&gt;docker-compose up -d&lt;/code&gt; command more than the
        &lt;code&gt;docker run --one --billion --different --spooky --parameters&lt;/code&gt;. So let’s create a simple Docker composition for webpack :&lt;/p&gt;
        &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        9
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;my_webpack&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker.my_webpack&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;my_webpack'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./:/app'&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;…and a &lt;code&gt;DOCKERFILE&lt;/code&gt;, named &lt;code&gt;docker.my_webpack&lt;/code&gt;:&lt;/p&gt;
        &lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        8
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:13.4.0-alpine&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;webpack@4.41.2 &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;webpack-cli@3.3.10 &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add bash
        &lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; tail -f /dev/null&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;After finish the set up, the Terminal prompt may - but not necessarily - change from the project’s folder to WSL mounting point, and will look something like this:&lt;/p&gt;
        &lt;figure class=&quot;a-illustration&quot;&gt;
        &lt;img class=&quot;a-illustration__image&quot; src=&quot;/assets/img/post-illustration-placeholder.png&quot; data-src=&quot;/assets/img/blog/2020/wsl/setup-wsl2-with-docker/phpstorm-4.png&quot; width=&quot;800&quot; /&gt;
        &lt;figcaption class=&quot;a-illustration__caption&quot;&gt;The Terminal tool with wrong default path&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;I am not sure why it happens if it happens at all, and not sure why it doesn’t happen for others with the same setup. But it’s a fact, it happened to me.
        And one thing is sure: this is definitely not good. So how can we fix it? We need to use the environment variable in the PHPStorm we have seen
        in step #9, and modify the &lt;code&gt;.zshrc&lt;/code&gt; file in the WSL interface.&lt;/p&gt;
        &lt;h4 id=&quot;add-custom-environment-variable-to-phpstorms-terminal&quot;&gt;Add custom ENVIRONMENT variable to PHPStorm’s Terminal&lt;/h4&gt;
        &lt;p&gt;Open up the Terminal’s settings window in PHPStorm again, and in the &lt;code&gt;Environment variables&lt;/code&gt; field add the following:&lt;/p&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;PROJECT=MyTestProject;PATH=%PATH%\;D:\Projects;WSLENV=PROJECT/u
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Let me explain what we added:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;PROJECT=MyTestProject&lt;/code&gt; - we define a new environment variable, PROJECT and its value is the folder name of our project&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;PATH=%PATH%\;D:\Projects&lt;/code&gt; - we add the project’s parent folder to the PATH&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;WSLENV=PROJECT/u&lt;/code&gt; - we pass the PROJECT variable to the WSLENV. The &lt;code&gt;\u&lt;/code&gt; flag indicates the value should only be included when invoking WSL from Win32.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;As you see, the PATH variable is not included in the WSLENV, however if we don’t present it here, the WSL won’t start.&lt;/p&gt;
        &lt;p&gt;So, in theory when the PHPStorm opens its Terminal emulator and calls the &lt;code&gt;wsl.exe&lt;/code&gt;, it should pass all these variables to it.&lt;/p&gt;
        &lt;h4 id=&quot;change-the-zshell-init-script&quot;&gt;Change the ZShell init script&lt;/h4&gt;
        &lt;p&gt;Let’s get into the &lt;code&gt;WSL&lt;/code&gt; command line and edit the &lt;code&gt;.zshrc&lt;/code&gt; file in the “&lt;em&gt;home&lt;/em&gt;” folder:&lt;/p&gt;
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;vim ~/.zshrc
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;Add the following lines to the end of the file:&lt;/p&gt;
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
        2
        3
        4
        5
        6
        7
        &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# correct the initial path&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /mnt/d/Projects
        &lt;span class=&quot;c&quot;&gt;# correct the project path&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; PROJECT &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PROJECT&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;p&gt;First we enforce the &lt;code&gt;WSL&lt;/code&gt; to go into our general project root folder’s mounted equivalent: &lt;code&gt;/mnt/d/Projects&lt;/code&gt;. I think it’s
        not a bad idea to start our work in WSL always in the same folder to not mess up the whole system.&lt;/p&gt;
        &lt;p&gt;Second, we look for the &lt;code&gt;PROJECT&lt;/code&gt; environment variable. Remember, we’ve just passed it through the WSLENV. If this variable exists, it
        tries to use it as a folder name, and additionally to the previous, it tries to enter into it. If we set it up correctly, this should work.&lt;/p&gt;
        &lt;h3 id=&quot;thats-all-for-now&quot;&gt;That’s all for now&lt;/h3&gt;
        &lt;p&gt;Am I right? Am I not? Please feel free to share your opinions.&lt;/p&gt;</content><author><name>Gábor Iván</name></author><category term="wsl" /><category term="docker" /><category term="wsl2" /><category term="poweline-shell" /><category term="phpstorm" /><category term="windows" /><summary type="html">I collected all the steps I had to make to build a full-value (web)development environment on Windows 10.</summary></entry><entry><title type="html">What am I doing???</title><link href="http://0.0.0.0:4000/general/what-am-i-doing" rel="alternate" type="text/html" title="What am I doing???" /><published>2020-01-08T15:23:00+01:00</published><updated>2020-03-02T13:33:03+01:00</updated><id>http://0.0.0.0:4000/general/what-am-i-doing</id><content type="html" xml:base="http://0.0.0.0:4000/general/what-am-i-doing">&lt;h3 id=&quot;i-cannot-explain-the-why&quot;&gt;I cannot explain the why&lt;/h3&gt;
        &lt;p&gt;For a long time now I always felt I want to shout out to the world all the crazy ideas I have in my mind.
        But also I am full of fear. With lots of fears, because writing articles and publish them to the public is a
        huge responsibility. And writing a blog is a double-edged weapon.&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;What if I write something rubbish, because the English is not my mother tongue?&lt;/li&gt;
        &lt;li&gt;What if I write something absolutely wrong, because I was too lazy to read a book in the given topic?&lt;/li&gt;
        &lt;li&gt;What if I write something totally bullshit, that ruins my prestige to a level, where nobody will ever count with me again?&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h3 id=&quot;what-will-i-present-here&quot;&gt;What will I present here?&lt;/h3&gt;
        &lt;p&gt;Tips and tricks. Ideas and workarounds. Smart and stupid solutions. Tutorials for the dummy me, to have them later
        when I need them. And of course, it would be amazing if someone else other than me would also find these articles useful.&lt;/p&gt;
        &lt;p&gt;To fulfill this goal, I will try my best to entertain You. I will try to explain every detail of my ideas, and present not only
        code samples but also links to the working source codes.&lt;/p&gt;
        &lt;p&gt;I had some private projects in the past that were really good to train myself, but they mostly remained unfinished.
        My plan is to atomize these projects as much as possible, and create standalone modules or libraries, then publish
        them here one-by-one.&lt;/p&gt;
        &lt;p&gt;I don’t say, that I am a top programmer with super-human knowledge in every programming language and technology. I know
        what I know, but I don’t know what I know wrong. The I am sure of one thing: I’d like to share my experiences. And I
        hope You welcome them. And You - dear visitor - can correct me, and judge me any time.&lt;/p&gt;</content><author><name>Gábor Iván</name></author><category term="general" /><category term="personal" /><summary type="html">It is like a professional suicide. I decided to share my thoughts in various IT-related topics. Maybe a good idea, maybe not. The people of the Internet will judge me.</summary></entry></feed>
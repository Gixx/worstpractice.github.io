<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-12-09T12:13:07+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Worst Practice</title><subtitle></subtitle><author><name>Gábor Iván</name></author><entry><title type="html">Advent of Code - Day 9</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-9" rel="alternate" type="text/html" title="Advent of Code - Day 9" /><published>2022-12-09T13:45:00+00:00</published><updated>2022-12-09T12:13:07+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-9</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-9"><![CDATA[<h3 id="the-input-data">The input data</h3>
      <p>A very basic data file:</p>
      <ul>
        <li>each row contains a character and a number separated by space</li>
        <li>the characters represent directions (up, right, down, left): <code class="language-plaintext highlighter-rouge">U</code>, <code class="language-plaintext highlighter-rouge">R</code>, <code class="language-plaintext highlighter-rouge">D</code>, <code class="language-plaintext highlighter-rouge">L</code></li>
        <li>the numbers represent the distance/step</li>
      </ul>
      <p>Task: we pull a rope in the given direction for the given distance, and we need to figure out,</p>
      <h3 id="part-one">Part one</h3>
      <p>I will be honest: it was tough. I went down to a super primitive level, and wrote a low-performing code just to do what
        needs to be done and get the right result. Currently, I am not even sure, whether my code is actually working well or just
        accidentally gives the right result.</p>
      <p>Should I share the code? Well, it’s definitely the worst practice:</p>
      <div class="language-php highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
</pre>
        </td>
        <td class="rouge-code">
          <pre><span class="cp">&lt;?php</span>

<span class="nv">$headX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$headY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$tailX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$tailY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$fields</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'0,0'</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
<span class="p">];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$direction</span><span class="p">,</span> <span class="nv">$step</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>

        <span class="p">[</span><span class="nv">$headX</span><span class="p">,</span> <span class="nv">$headY</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getNextHeadPosition</span><span class="p">(</span><span class="nv">$direction</span><span class="p">,</span> <span class="nv">$step</span><span class="p">,</span> <span class="nv">$headX</span><span class="p">,</span> <span class="nv">$headY</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$tailX</span><span class="p">,</span> <span class="nv">$tailY</span><span class="p">,</span> <span class="nv">$coordinates</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getNextTailPosition</span><span class="p">(</span><span class="nv">$direction</span><span class="p">,</span> <span class="nv">$headX</span><span class="p">,</span> <span class="nv">$headY</span><span class="p">,</span> <span class="nv">$tailX</span><span class="p">,</span> <span class="nv">$tailY</span><span class="p">);</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$coordinates</span> <span class="k">as</span> <span class="nv">$coordinate</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$fields</span><span class="p">[</span><span class="nv">$coordinate</span><span class="p">]))</span> <span class="p">{</span>
                <span class="nv">$fields</span><span class="p">[</span><span class="nv">$coordinate</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$fields</span><span class="p">[</span><span class="nv">$coordinate</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">getNextHeadPosition</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$direction</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$step</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$currentHeadX</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$currentHeadY</span><span class="p">):</span> <span class="kt">array</span>
<span class="p">{</span>
    <span class="nv">$newHeadX</span> <span class="o">=</span> <span class="nf">match</span> <span class="p">(</span><span class="nv">$direction</span><span class="p">)</span> <span class="p">{</span>
        <span class="s1">'L'</span> <span class="o">=&gt;</span> <span class="nv">$currentHeadX</span> <span class="o">-</span> <span class="nv">$step</span><span class="p">,</span>
        <span class="s1">'R'</span> <span class="o">=&gt;</span> <span class="nv">$currentHeadX</span> <span class="o">+</span> <span class="nv">$step</span><span class="p">,</span>
        <span class="k">default</span> <span class="o">=&gt;</span> <span class="nv">$currentHeadX</span>
    <span class="p">};</span>
    <span class="nv">$newHeadY</span> <span class="o">=</span> <span class="nf">match</span> <span class="p">(</span><span class="nv">$direction</span><span class="p">)</span> <span class="p">{</span>
        <span class="s1">'U'</span> <span class="o">=&gt;</span> <span class="nv">$currentHeadY</span> <span class="o">+</span> <span class="nv">$step</span><span class="p">,</span>
        <span class="s1">'D'</span> <span class="o">=&gt;</span> <span class="nv">$currentHeadY</span> <span class="o">-</span> <span class="nv">$step</span><span class="p">,</span>
        <span class="k">default</span> <span class="o">=&gt;</span> <span class="nv">$currentHeadY</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="p">[</span><span class="nv">$newHeadX</span><span class="p">,</span> <span class="nv">$newHeadY</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">getNextTailPosition</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$direction</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$currentHeadX</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$currentHeadY</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$currentTailX</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$currentTailY</span><span class="p">):</span> <span class="kt">array</span>
<span class="p">{</span>
    <span class="cd">/**
     * Corner touch positions:
     *
     *    ..T   ...   ...   T..
     *    .H.   .H.   .H.   .H.
     *    ...   ..T   T..   ...
     */</span>
    <span class="nv">$cornerTouch</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$currentHeadX</span> <span class="o">-</span> <span class="nv">$currentTailX</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$currentHeadY</span> <span class="o">-</span> <span class="nv">$currentTailY</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">;</span>

    <span class="cd">/**
     * Side touch positions:
     *
     *    .T.   ...   ...   ...
     *    .H.   .HT   .H.   TH.
     *    ...   ...   .T.   ...
     */</span>
    <span class="nv">$sideTouch</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$currentHeadX</span> <span class="o">-</span> <span class="nv">$currentTailX</span><span class="p">)</span> <span class="o">+</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$currentHeadY</span> <span class="o">-</span> <span class="nv">$currentTailY</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">;</span>

    <span class="c1">// Head covers Tail</span>
    <span class="nv">$covers</span> <span class="o">=</span> <span class="nv">$currentHeadX</span> <span class="o">===</span> <span class="nv">$currentTailX</span> <span class="o">&amp;&amp;</span> <span class="nv">$currentHeadY</span> <span class="o">===</span> <span class="nv">$currentTailY</span><span class="p">;</span>

    <span class="nv">$coordinates</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="c1">// Tail doesn't need to move</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$cornerTouch</span> <span class="o">||</span> <span class="nv">$sideTouch</span> <span class="o">||</span> <span class="nv">$covers</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span><span class="nv">$currentTailX</span><span class="p">,</span> <span class="nv">$currentTailY</span><span class="p">,</span> <span class="nv">$coordinates</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="nv">$x</span> <span class="o">=</span> <span class="nv">$currentTailX</span><span class="p">;</span>
    <span class="nv">$y</span> <span class="o">=</span> <span class="nv">$currentTailY</span><span class="p">;</span>

    <span class="c1">// Head moved left</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$direction</span> <span class="o">==</span> <span class="s1">'L'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$currentTailX</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;</span> <span class="nv">$currentHeadX</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// During horizontal moves the max absolute difference on the Y can be only one.</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$currentHeadY</span> <span class="o">!=</span> <span class="nv">$currentTailY</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$currentTailY</span> <span class="o">=</span> <span class="nv">$y</span> <span class="o">=</span> <span class="nv">$currentHeadY</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="o">--</span><span class="nv">$currentTailX</span><span class="p">;</span>
            <span class="o">--</span><span class="nv">$x</span><span class="p">;</span>

            <span class="nv">$coordinates</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$x</span><span class="mf">.</span><span class="s1">','</span><span class="mf">.</span><span class="nv">$y</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Head moved left</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$direction</span> <span class="o">==</span> <span class="s1">'R'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$currentTailX</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$currentHeadX</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// During horizontal moves the max absolute difference on the Y can be only one.</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$currentHeadY</span> <span class="o">!=</span> <span class="nv">$currentTailY</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$currentTailY</span> <span class="o">=</span> <span class="nv">$y</span> <span class="o">=</span> <span class="nv">$currentHeadY</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="o">++</span><span class="nv">$currentTailX</span><span class="p">;</span>
            <span class="o">++</span><span class="nv">$x</span><span class="p">;</span>

            <span class="nv">$coordinates</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$x</span><span class="mf">.</span><span class="s1">','</span><span class="mf">.</span><span class="nv">$y</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Head moved up</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$direction</span> <span class="o">==</span> <span class="s1">'U'</span> <span class="o">||</span> <span class="nv">$direction</span> <span class="o">==</span> <span class="s1">'D'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$currentTailY</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$currentHeadY</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// During vertical moves the max absolute difference on the X can be only one.</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$currentHeadX</span> <span class="o">!=</span> <span class="nv">$currentTailX</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$currentTailX</span> <span class="o">=</span> <span class="nv">$x</span> <span class="o">=</span> <span class="nv">$currentHeadX</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="o">++</span><span class="nv">$currentTailY</span><span class="p">;</span>
            <span class="o">++</span><span class="nv">$y</span><span class="p">;</span>

            <span class="nv">$coordinates</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$x</span><span class="mf">.</span><span class="s1">','</span><span class="mf">.</span><span class="nv">$y</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Head moved down</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$direction</span> <span class="o">==</span> <span class="s1">'D'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$currentTailY</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;</span> <span class="nv">$currentHeadY</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// During vertical moves the max absolute difference on the X can be only one.</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$currentHeadX</span> <span class="o">!=</span> <span class="nv">$currentTailX</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$currentTailX</span> <span class="o">=</span> <span class="nv">$x</span> <span class="o">=</span> <span class="nv">$currentHeadX</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="o">--</span><span class="nv">$currentTailY</span><span class="p">;</span>
            <span class="o">--</span><span class="nv">$y</span><span class="p">;</span>

            <span class="nv">$coordinates</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$x</span><span class="mf">.</span><span class="s1">','</span><span class="mf">.</span><span class="nv">$y</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">[</span><span class="nv">$currentTailX</span><span class="p">,</span> <span class="nv">$currentTailY</span><span class="p">,</span> <span class="nv">$coordinates</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$fields</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
        </td>
      </tr>
    </tbody>
  </table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>I’m not proud of myself. This is the day I have to give up. I could pass part one, but this one requires skills that I 
  don’t have yet. I failed. I tried, but couldn’t figure out the algorithm. I tried to reuse the functions from the part one,
  but it was a complete failure as well. I’m too tired, sad and disappointed now to try again. I give up…</p>
<p><a href="https://www.reddit.com/r/adventofcode/comments/zgq3nr/2022_day_9_rope_pull/" rel="noopener" target="_blank">This is how it should look like visualized.</a></p>
<p>When I was thinking about the solution, I thought if I treat every knot as a rope-head for the next knot, it will work. But I
  couldn’t even reproduce the example outputs of the <a href="https://adventofcode.com/2022/day/9#part2" rel="noopener" target="_blank">task</a>.</p>
<p>Maybe later I will re-try and update this article… But not today.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[The day I failed.]]></summary></entry><entry><title type="html">Advent of Code - Day 8</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-8" rel="alternate" type="text/html" title="Advent of Code - Day 8" /><published>2022-12-08T10:45:00+00:00</published><updated>2022-12-08T09:37:44+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-8</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-8"><![CDATA[<p><a href="https://adventofcode.com/2022/day/8" rel="noopener" target="_blank">Today’s puzzle</a> in short: we have a 
    99 x 99 matrix filled with numbers. We need to check neighbor elements (top, right, bottom, left) and find the
    right value according to the task’s criteria</p>
  <h3 id="the-input-data">The input data</h3>
  <p>It’s a simple file filled with numbers:</p>
  <ul>
    <li>99 rows</li>
    <li>99 decimals in a row (0 through 9)</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>The matrix is a forest. Each number represents the height of a tree:</p>
  <ul>
    <li>0 is a very short tree</li>
    <li>9 is a very tall tree</li>
  </ul>
  <p>Our task is to return values defined by the tasks.</p>
  <h3 id="common-code">Common code</h3>
  <p>Like yesterday, we have some common code that is the same in both tasks. Namely, to read the input file and create the
    matrix. So let’s do it:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$forest</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$forest</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="nv">$rows</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$forest</span><span class="p">);</span>
<span class="nv">$columns</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$forest</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Although we know the input contains 99 rows and columns, we prepare for changes.</p>
<h3 id="part-one">Part one</h3>
<p>We need to find, how many trees are visible from outside the forest:</p>
<ul>
  <li>trees on the edges are visible by default</li>
  <li>an inner tree is visible only when there are smaller trees in any of the four directions</li>
</ul>
<p>For this task we have a big help: the trees on the edges are automatically visible, so we can do a fast calculation
  (2 times the rows and 2 times the columns, minus four for the four corners which we counted twice), and save time and energy 
  on the <code class="language-plaintext highlighter-rouge">for</code> loops. Then just iterate through the “inner” matrix and do the math:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$allVisibleTrees</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nv">$rows</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nv">$columns</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rows</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;</span> <span class="nv">$columns</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nf">isInnerTreeVisible</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$forest</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$allVisibleTrees</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">isInnerTreeVisible</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$row</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$column</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$matrix</span><span class="p">):</span> <span class="kt">bool</span>
<span class="p">{</span>
    <span class="nv">$rowNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">);</span>
    <span class="nv">$columnNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nv">$actualHeight</span> <span class="o">=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$column</span><span class="p">];</span>
    <span class="nv">$topHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$rightHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$bottomHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$leftHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// top</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$topHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$topHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// right</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$columnNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$rightHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$rightHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// bottom</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rowNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$bottomHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$bottomHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// left</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$leftHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$leftHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$topHighest</span>
        <span class="o">||</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$rightHighest</span>
        <span class="o">||</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$bottomHighest</span><span class="p">;</span>
        <span class="o">||</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$leftHighest</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$allVisibleTrees</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Well, it’s not pretty, and deal with four <code class="language-plaintext highlighter-rouge">for</code> loops in a function that is called within a <code class="language-plaintext highlighter-rouge">for</code> loop which is itself in
  another <code class="language-plaintext highlighter-rouge">for</code> loop is anything but fast. But it’s not a business code, just a local script, so I can bravely focus on the
  goal.</p>
<h3 id="part-two">Part two</h3>
<p>Now, we need to invert the logic and check for each tree, how far can you see from the top of the given tree:</p>
<ul>
  <li>If the next tree in any direction is the same height or higher than the current tree, we stop counting the distance, that is the furthest
    tree.</li>
  <li>Trees on the edges have at least one direction where there are no more trees, so those distances will be zero.</li>
  <li>We have to calculate the “scenic score” of every tree: multiply the view distance of each direction.</li>
</ul>
<p>Again, we can save a lot of time and energy by skipping the trees on the edges, because their scenic score will be zero
  by the rules.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$highestScenicScore</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rows</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;</span> <span class="nv">$columns</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$highestScenicScore</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$highestScenicScore</span><span class="p">,</span> <span class="nf">getTreeScenicScore</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$forest</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">getTreeScenicScore</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$row</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$column</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$matrix</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="nv">$rowNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">);</span>
    <span class="nv">$columnNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

    <span class="nv">$actualHeight</span> <span class="o">=</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$column</span><span class="p">];</span>

    <span class="nv">$scoreTop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$scoreRight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$scoreBottom</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$scoreLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// top</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreTop</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// right</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$columnNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreRight</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// bottom</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rowNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreBottom</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// left</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreLeft</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$scoreTop</span> <span class="o">*</span> <span class="nv">$scoreRight</span> <span class="o">*</span> <span class="nv">$scoreBottom</span> <span class="o">*</span> <span class="nv">$scoreLeft</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$highestScenicScore</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[It is winter, we have to do some lumber job. But first we need to find the right trees.]]></summary></entry><entry><title type="html">Advent of Code - Day 7</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-7" rel="alternate" type="text/html" title="Advent of Code - Day 7" /><published>2022-12-07T13:30:00+00:00</published><updated>2022-12-08T08:53:14+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-7</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-7"><![CDATA[<p><a href="https://adventofcode.com/2022/day/7" rel="noopener" target="_blank">Today’s puzzle</a> in short: we have a
    filesystem that we need to build up from command history (input), then figure out sizes for different criteria.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>Okay, this one fired up the boosters for sure. The input file has filesystem commands and some responses for the commands:</p>
  <h4 id="the-commands">The commands</h4>
  <p>The commands are normal *nix system commands. The <code class="language-plaintext highlighter-rouge">$</code> represents the command prompt.</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">$ cd /</code> - enter the root directory.</li>
    <li><code class="language-plaintext highlighter-rouge">$ cd ..</code> - one level up in the folder structure.</li>
    <li><code class="language-plaintext highlighter-rouge">$ cd xy</code> - enter the <code class="language-plaintext highlighter-rouge">xy</code> directory.</li>
    <li><code class="language-plaintext highlighter-rouge">$ ls</code> - list directory content.</li>
  </ul>
  <h4 id="responses">Responses</h4>
  <p>Only the <code class="language-plaintext highlighter-rouge">ls</code> command produces any output in this input data:</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">dir abc</code> - there’s a subdirectory with the name of <code class="language-plaintext highlighter-rouge">abc</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">1234 file.txt</code> - there’s a file with the name of <code class="language-plaintext highlighter-rouge">file.txt</code> and the size of <code class="language-plaintext highlighter-rouge">1234</code> bytes. The filename extension is 
      optional.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>No special rules here. We need to reproduce the file system structure and then calculate different data out of it.</p>
  <h3 id="the-structure">The structure</h3>
  <p>For the first time we need to go into a more advanced mode and create some structure from the input data. Let’s start 
    with this one.</p>
  <p>We read the input data line-by-line and decide what its content is. For both part one and two, we need to deal with 
    directory sizes (that means the sizes all the files and subdirectories of the given directory), we can simplify our 
    structure and collect only the folders and the sizes of their content.</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$currentDirectory</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="nv">$rootDirectory</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ElfDirectory</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?ElfDirectory</span> <span class="nv">$parent</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="cd">/** @var array&lt;int, ElfDirectory&gt;  */</span>
    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$children</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="cd">/** @var array&lt;int, string&gt; */</span>
    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$files</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="nv">$totalSize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">==</span> <span class="s1">'$ ls'</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">==</span> <span class="s1">'$ cd ..'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$currentDirectory</span> <span class="o">=</span> <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="k">parent</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">==</span> <span class="s1">'$ cd /'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$newDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ElfDirectory</span><span class="p">();</span>
            <span class="nv">$newDirectory</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s1">'/'</span><span class="p">;</span>
            <span class="nv">$currentDirectory</span> <span class="o">=</span> <span class="nv">$rootDirectory</span> <span class="o">=</span> <span class="nv">$newDirectory</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$matches</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^\$ cd (?P&lt;dirName&gt;[a-z]+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$newDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ElfDirectory</span><span class="p">();</span>
            <span class="nv">$newDirectory</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'dirName'</span><span class="p">];</span>
            <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$newDirectory</span><span class="p">;</span>
            <span class="nv">$newDirectory</span><span class="o">-&gt;</span><span class="k">parent</span> <span class="o">=</span> <span class="nv">$currentDirectory</span><span class="p">;</span>
            <span class="nv">$currentDirectory</span> <span class="o">=</span> <span class="nv">$newDirectory</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$matches</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^(?P&lt;fileSize&gt;\d+)\s(?P&lt;fileName&gt;[a-z\.]+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="n">totalSize</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'fileSize'</span><span class="p">];</span>
            <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="n">files</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'fileName'</span><span class="p">]</span><span class="mf">.</span><span class="s1">' ('</span><span class="mf">.</span><span class="nv">$matches</span><span class="p">[</span><span class="s1">'fileSize'</span><span class="p">]</span><span class="mf">.</span><span class="s1">')'</span><span class="p">;</span>
            <span class="nv">$parent</span> <span class="o">=</span> <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="k">parent</span><span class="p">;</span>

            <span class="k">while</span> <span class="p">(</span><span class="nv">$parent</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$parent</span><span class="o">-&gt;</span><span class="n">totalSize</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'fileSize'</span><span class="p">];</span>
                <span class="nv">$parent</span> <span class="o">=</span> <span class="nv">$parent</span><span class="o">-&gt;</span><span class="k">parent</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you see we use a nice and simple PHP class for this task. When we go line-by-line through the file, we check with 
  exact comparison and with regular expression the actual line:</p>
<ul>
  <li>When it’s an <code class="language-plaintext highlighter-rouge">ls</code> command, it’s just a placeholder, we can ignore it.</li>
  <li>When it’s a <code class="language-plaintext highlighter-rouge">cd ..</code> command, it means the <code class="language-plaintext highlighter-rouge">$currentDirectory</code> pointer should point to its parent element.</li>
  <li>When it’s a <code class="language-plaintext highlighter-rouge">cd /</code> command, we need to initialize the root level directory. We save it into both the <code class="language-plaintext highlighter-rouge">$currentDirectory</code>
    and the <code class="language-plaintext highlighter-rouge">$rootDirectory</code></li>
  <li>When we enter into a subdirectory, we create a new <code class="language-plaintext highlighter-rouge">ElfDirectory</code> instance, add it to the <code class="language-plaintext highlighter-rouge">$currentDirectory</code>’s children 
    list, and set the <code class="language-plaintext highlighter-rouge">$currentDirectory</code> as the parent of this directory instance. Then we set this new instance as the 
    <code class="language-plaintext highlighter-rouge">$currentDirectory</code>.</li>
  <li>When it’s directory listing row, and it’s a file, we increment the <code class="language-plaintext highlighter-rouge">$currentDirectory</code> size counter with the actual file
    size. To make our future life easier, we also iterate through the parent element(s) and increment their size counters 
    as well.</li>
  <li>When it’s directory listing row, and it’s a directory, we ignore it, the <code class="language-plaintext highlighter-rouge">cd</code> command will do the registration.</li>
</ul>
<p>As you see we also store the file name with the file size in a string within the <code class="language-plaintext highlighter-rouge">ElfDirectory</code>. However, it’s not necessary
  I still added it, because we will have a bonus function in the end, which can visually display the folder structure in the 
  terminal.</p>
<h3 id="part-one">Part one</h3>
<p>In part one, we need to analyze the file system and count all the folder sizes that are below <strong>100000</strong> bytes. As in the
  puzzle description is written, with this method we most likely will have redundant counts:</p>
<ul>
  <li>If folder “B” size within folder “A” is 3000,</li>
  <li>…and folder “A” size is 5000,</li>
  <li>…then both folder “A” and folder “B” is below 100000, so we count 8000, although folder “A”’s size counter already contains
    the size of folder “B”.</li>
</ul>
<p>What can we say? <code class="language-plaintext highlighter-rouge">¯\_(ツ)_/¯</code>.</p>
<p>To find the answer for the question, we need to create a recursive function that can climb the tree and check every element 
  of it:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">const</span> <span class="no">DIRECTORY_CHECK_MAX_SIZE</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>

<span class="k">function</span> <span class="n">calculateTotalSumOf10kFolders</span><span class="p">(</span><span class="kt">ElfDirectory</span> <span class="nv">$directory</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="nv">$sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span>  <span class="o">&lt;=</span> <span class="no">DIRECTORY_CHECK_MAX_SIZE</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$sum</span> <span class="o">+=</span> <span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">children</span> <span class="k">as</span> <span class="nv">$subDirectory</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$sum</span> <span class="o">+=</span> <span class="nf">calculateTotalSumOf10kFolders</span><span class="p">(</span><span class="nv">$subDirectory</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$sum</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nf">calculateTotalSumOf10kFolders</span><span class="p">(</span><span class="nv">$rootDirectory</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>Here we need to find the smallest directory that is larger than a specific size. What is this specific size? So we know that
  the total disk space is 70000000 bytes, and the update requires 30000000 bytes of free space. We also know, how much our
  filesystem totally consumes (which is the <code class="language-plaintext highlighter-rouge">totalSize</code> of the root directory). From these, we can calculate how much space
  we need more to fulfill the free space requirement of the update. We need to find one folder that frees up enough space
  upon deletion.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">const</span> <span class="no">TOTAL_DISK_SPACE</span> <span class="o">=</span> <span class="mi">70000000</span><span class="p">;</span>
<span class="k">const</span> <span class="no">MINIMUM_UPDATE_SPACE_REQUIRED</span> <span class="o">=</span> <span class="mi">30000000</span><span class="p">;</span>

<span class="k">function</span> <span class="n">findSmallestDirectoryFreesUpEnoughSpace</span><span class="p">(</span><span class="kt">ElfDirectory</span> <span class="nv">$directory</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$actualMinimum</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$limit</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span> <span class="o">&gt;</span> <span class="nv">$limit</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$actualMinimum</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$actualMinimum</span><span class="p">,</span> <span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">children</span> <span class="k">as</span> <span class="nv">$subDirectory</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$actualMinimum</span> <span class="o">=</span> <span class="nf">findSmallestDirectoryFreesUpEnoughSpace</span><span class="p">(</span><span class="nv">$subDirectory</span><span class="p">,</span> <span class="nv">$actualMinimum</span><span class="p">,</span> <span class="nv">$limit</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$actualMinimum</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$actualFreeSpace</span> <span class="o">=</span> <span class="no">TOTAL_DISK_SPACE</span> <span class="o">-</span> <span class="nv">$rootDirectory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="p">;</span>
<span class="nv">$spaceNeeded</span> <span class="o">=</span> <span class="no">MINIMUM_UPDATE_SPACE_REQUIRED</span> <span class="o">-</span> <span class="nv">$actualFreeSpace</span><span class="p">;</span>
<span class="k">echo</span> <span class="nf">findSmallestDirectoryFreesUpEnoughSpace</span><span class="p">(</span><span class="nv">$rootDirectory</span><span class="p">,</span> <span class="nv">$rootDirectory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="p">,</span> <span class="nv">$spaceNeeded</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Of course, we don’t make extra checks whether there’s enough free space or not.</p>
<h3 id="bonus">Bonus</h3>
<p>I promised a bonus. It’s ugly as hell, and it can be optimized a lot, but for now it’s a good start. So the “not-so-proper”
  <code class="language-plaintext highlighter-rouge">tree</code> command:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">function</span> <span class="n">tree</span><span class="p">(</span><span class="kt">ElfDirectory</span> <span class="nv">$directory</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$level</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="k">echo</span> <span class="nb">str_repeat</span><span class="p">(</span><span class="s1">' | '</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$level</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
        <span class="mf">.</span><span class="p">(</span><span class="nv">$level</span> <span class="o">?</span> <span class="s1">' ├'</span> <span class="o">:</span><span class="s1">''</span><span class="p">)</span>
        <span class="mf">.</span><span class="s1">'['</span><span class="mf">.</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">name</span><span class="mf">.</span><span class="s1">'] ('</span><span class="mf">.</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="mf">.</span><span class="s1">')'</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">children</span> <span class="k">as</span> <span class="nv">$subDir</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">tree</span><span class="p">(</span><span class="nv">$subDir</span><span class="p">,</span> <span class="nv">$level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">files</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nb">str_repeat</span><span class="p">(</span><span class="s1">' | '</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$level</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
            <span class="mf">.</span><span class="p">(</span><span class="nv">$level</span> <span class="o">?</span> <span class="s1">' | '</span> <span class="o">:</span><span class="s1">''</span><span class="p">)</span><span class="mf">.</span><span class="s1">' └'</span><span class="mf">.</span><span class="nv">$file</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>It will look something like this:</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/backend/advent-of-code-day-7/visual.png" width="480" />
  <figcaption class="a-illustration__caption">Output sample of the tree function.</figcaption>
</figure>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[Dig deep in a folder structure, to find the one.]]></summary></entry><entry><title type="html">Advent of Code - Day 6</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-6" rel="alternate" type="text/html" title="Advent of Code - Day 6" /><published>2022-12-06T10:15:00+00:00</published><updated>2022-12-06T09:16:00+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-6</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-6"><![CDATA[<p><a href="https://adventofcode.com/2022/day/6" rel="noopener" target="_blank">Today’s puzzle</a> in short: we get a bunch 
    of random characters and need to find the first <code class="language-plaintext highlighter-rouge">n</code> distinct characters.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>Today there’s only one line in the input, but it’s a long one. No special rules for this, just a bunch of characters.</p>
  <p>Our task is to find the position of the first <code class="language-plaintext highlighter-rouge">n</code> distinct characters.</p>
  <h3 id="part-one-and-two">Part one and two</h3>
  <p>The two parts today are almost the same, the only difference is the value of the <code class="language-plaintext highlighter-rouge">n</code>:</p>
  <ul>
    <li>In part one, <code class="language-plaintext highlighter-rouge">n</code> is <em>4</em>.</li>
    <li>In part two, <code class="language-plaintext highlighter-rouge">n</code> is <em>14</em>.</li>
  </ul>
  <p>In the solution today I can simply read the whole input at once, since it contains only one line. Then we split this
    long string into array with the <code class="language-plaintext highlighter-rouge">str_split()</code> function, that I used before. Then just start counting. Make it simple:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$line</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">);</span>
<span class="nv">$code</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
<span class="nv">$buffer</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">const</span> <span class="no">MARKER_LENGTH</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$code</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="nv">$buffer</span><span class="p">))</span> <span class="p">{</span>
        <span class="p">[,</span> <span class="nv">$buffer</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="nv">$code</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">''</span><span class="p">,</span><span class="nv">$buffer</span><span class="p">));</span>
        <span class="nv">$buffer</span> <span class="o">=</span> <span class="nb">empty</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">)</span> <span class="o">?</span> <span class="p">[]</span> <span class="o">:</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$buffer</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$code</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">)</span> <span class="o">==</span> <span class="no">MARKER_LENGTH</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The only complexity in this story the buffer handling. I chose a very primitive and low performance, but yet effective 
  way:</p>
<ul>
  <li>check if the next character is in the buffer
    <ul>
      <li>if yes, then convert the buffer to string</li>
      <li>split by the next character and take the second part</li>
      <li>convert this to array again, or initialize an empty array if the second part is empty</li>
    </ul>
  </li>
  <li>add the new character to the buffer</li>
  <li>quit the loop when the buffer reached the <code class="language-plaintext highlighter-rouge">MARKER_LENGTH</code></li>
</ul>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[This time we need to analyze a spooky data stream.]]></summary></entry><entry><title type="html">Advent of Code - Day 5</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-5" rel="alternate" type="text/html" title="Advent of Code - Day 5" /><published>2022-12-05T16:30:00+00:00</published><updated>2022-12-05T15:26:45+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-5</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-5"><![CDATA[<p><a href="https://adventofcode.com/2022/day/5" rel="noopener" target="_blank">Today’s puzzle</a> in short: for the first 
    sight I thought it will be a custom sorting algorithm, but in the end it became just a simple item movement between arrays.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>For the first time, the input data contains additional information. We have to extract this information and create initial
    “warehouse” state in the PHP code. The input file must remain pilled with crane-movement orders.</p>
  <ul>
    <li>The first 10 lines must be deleted (can be added to the PHP code as comment)</li>
    <li>Each line has the same form of information: <code class="language-plaintext highlighter-rouge">move # from # to #</code>, where <code class="language-plaintext highlighter-rouge">#</code> is a decimal.*</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>The solution for the puzzle is to follow each order and move crates between the columns according to the command, where
    the numbers are defined as follows:</p>
  <ul>
    <li>The first number represents the amount of crates.</li>
    <li>The second number represents the source column.</li>
    <li>The third number represents the target column.</li>
  </ul>
  <p>Our task is to tell which item is on the top of each column.</p>
  <h3 id="part-one">Part one</h3>
  <p>Because of a misreading the elves predicted that the crane is the <code class="language-plaintext highlighter-rouge">CrateMover 9000</code> which can move only one item at a time.</p>
  <p>To solve this puzzle we need to think in arrays again and simple <code class="language-plaintext highlighter-rouge">pop</code> and <code class="language-plaintext highlighter-rouge">push</code> elements.</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$storage</span> <span class="o">=</span> <span class="p">[</span>
    <span class="kc">null</span><span class="p">,</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'QFMRLWCV'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'DQL'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'PSRGWCNB'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'LCDHBQG'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'VGLFZS'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'DGNP'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'DZPVECW'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'CPDMS'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'ZNWTVMPC'</span><span class="p">),</span>
<span class="p">];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$command</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/move (?P&lt;iteration&gt;\d+) from (?P&lt;from&gt;\d+) to (?P&lt;to&gt;\d+)/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$command</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$command</span><span class="p">[</span><span class="s1">'iteration'</span><span class="p">];</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'to'</span><span class="p">]][]</span> <span class="o">=</span> <span class="nb">array_pop</span><span class="p">(</span><span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'from'</span><span class="p">]]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$storage</span> <span class="k">as</span> <span class="nv">$column</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$column</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nb">end</span><span class="p">(</span><span class="nv">$column</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, first of all, I initialized the warehouse in a more readable way: string which is being split into array 
  of characters. Why should I give up something that works?</p>
<p>Then I used regular expression again to extract the numeric information out from the command. Then just simply do an 
  <code class="language-plaintext highlighter-rouge">array_pop()</code> and an <code class="language-plaintext highlighter-rouge">array_push</code> (with a simpler syntax) within a for loop.</p>
<p>In the end, we go through the final state of the <code class="language-plaintext highlighter-rouge">$storage</code> and print the last element of each item.</p>
<h3 id="part-two">Part two</h3>
<p>Now the elves figured out their mistake, and realized that the crane is actually a <code class="language-plaintext highlighter-rouge">CrateMover 9001</code>, which can move multiple 
  items at a time. This will change the results for sure.</p>
<p>Technically this means, either:</p>
<ul>
  <li>We keep the loop and the <code class="language-plaintext highlighter-rouge">array_pop</code>, but then we need to collect these popped items into a new array, and then reverse
    it before pushing to the target column.</li>
  <li>We find a way to pop as many items at once as we need, and pushing them one-by-one to the target column.</li>
</ul>
<p>The second option sounds better because:</p>
<ul>
  <li>We can eliminate an ugly loop.</li>
  <li>PHP has a built-in function to pop multiple elements</li>
  <li>The <code class="language-plaintext highlighter-rouge">array_push</code> can accept multiple elements</li>
  <li>We have the chance to use the <code class="language-plaintext highlighter-rouge">...</code> spread-operator which is always a nice thing.</li>
</ul>
<p>So the new code will look like this:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ... $storage</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$command</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/move (?P&lt;slice&gt;\d+) from (?P&lt;from&gt;\d+) to (?P&lt;to&gt;\d+)/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$command</span><span class="p">))</span> <span class="p">{</span>
            <span class="nb">array_push</span><span class="p">(</span><span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'to'</span><span class="p">]],</span> <span class="mf">...</span><span class="nb">array_splice</span><span class="p">(</span><span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'from'</span><span class="p">]],</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="nv">$command</span><span class="p">[</span><span class="s1">'slice'</span><span class="p">]));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$storage</span> <span class="k">as</span> <span class="nv">$column</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$column</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nb">end</span><span class="p">(</span><span class="nv">$column</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>We need to be careful with sticky keys on the keyboard, because I had an annoying debug session to figure out why I don’t 
  get the right result. The reason was, I used <code class="language-plaintext highlighter-rouge">array_slice()</code> and not <code class="language-plaintext highlighter-rouge">array_splice()</code>. Even with a typo the code was valid
  but it gave an absolute wrong answer for the task.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[Christmas town is a big factory with a big warehouse. And in this warehouse the elves need to organize crates with the world-famous `CrateMover 9001`]]></summary></entry><entry><title type="html">Advent of Code - Day 4</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-4" rel="alternate" type="text/html" title="Advent of Code - Day 4" /><published>2022-12-04T12:00:00+00:00</published><updated>2022-12-05T15:02:39+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-4</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-4"><![CDATA[<p><a href="https://adventofcode.com/2022/day/4" rel="noopener" target="_blank">Today’s puzzle</a> in short: There are a
    bunch of character strings. Each letter has a number, and we need to group these strings by different criteria and sum
    the common characters’ numbers.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>Each line in the input data represents two number sequences in the following way:</p>
  <ul>
    <li>Two ranges of numbers (decimals separated by <code class="language-plaintext highlighter-rouge">-</code>), then a comma, then another range.</li>
    <li>The ranges of course contain the start and end number.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>The puzzle is simple:</p>
  <ul>
    <li>The elves work in sections.</li>
    <li>Each section has an ID number.</li>
    <li>Each elf work in a range of sections.</li>
    <li>The elves work in pairs.</li>
  </ul>
  <p>Or task is to find overlapping (concurrency, redundancy) of the section ranges.</p>
  <h3 id="part-one">Part One</h3>
  <p>In the first part of the puzzle, we need to identify and count the fully overlapping ranges.</p>
  <p>With PHP, it’s an easy task. We have built-in function to create a range of numbers as arrays, then just simply compare
    these arrays.</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$fullyContained</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$pairRanges</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^(?P&lt;E1from&gt;\d+)\-(?P&lt;E1to&gt;\d+),(?P&lt;E2from&gt;\d+)\-(?P&lt;E2to&gt;\d+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$pairRanges</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$elf1Range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E1from'</span><span class="p">],</span> <span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E1to'</span><span class="p">]);</span>
            <span class="nv">$elf2Range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E2from'</span><span class="p">],</span> <span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E2to'</span><span class="p">]);</span>

            <span class="k">if</span> <span class="p">(</span>
                <span class="nb">count</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$elf1Range</span><span class="p">,</span> <span class="nv">$elf2Range</span><span class="p">))</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span>
                <span class="nb">count</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$elf2Range</span><span class="p">,</span> <span class="nv">$elf1Range</span><span class="p">))</span> <span class="o">===</span> <span class="mi">0</span>
            <span class="p">)</span> <span class="p">{</span>
                <span class="nv">$fullyContained</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">echo</span> <span class="nv">$fullyContained</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Just for fun, I used a regular expression to split the line of string into four numbers. I LOVE regular expressions by the way!</p>
<p>So when we create the ranges with the <code class="language-plaintext highlighter-rouge">range()</code> function, we need to check how different they are. The <code class="language-plaintext highlighter-rouge">array_diff()</code>
  function is just perfect for this. It checks the first argument array against the second array and returns any element
  that is present only in the first array, but not in the other. Therefore, to find out whether a range of numbers is fully
  contained in the other one, we should get back an empty array.</p>
<p>We need to do this check for the other range too, because we can’t be sure, that only the first range can be a subset.</p>
<h3 id="part-two">Part two</h3>
<p>This part is almost the same. Here we need to count also the partially overlapping ranges. How to do that? The same way, 
  the only difference is now don’t look for empty result, but a result that has fewer elements than the subject array.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$partiallyOrFullyContained</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$pairRanges</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^(?P&lt;E1from&gt;\d+)\-(?P&lt;E1to&gt;\d+),(?P&lt;E2from&gt;\d+)\-(?P&lt;E2to&gt;\d+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$pairRanges</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$elf1Range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E1from'</span><span class="p">],</span> <span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E1to'</span><span class="p">]);</span>
            <span class="nv">$elf2Range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E2from'</span><span class="p">],</span> <span class="nv">$pairRanges</span><span class="p">[</span><span class="s1">'E2to'</span><span class="p">]);</span>

            <span class="k">if</span> <span class="p">(</span>
                <span class="nb">count</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$elf1Range</span><span class="p">,</span> <span class="nv">$elf2Range</span><span class="p">))</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$elf1Range</span><span class="p">)</span> <span class="o">||</span>
                <span class="nb">count</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$elf2Range</span><span class="p">,</span> <span class="nv">$elf1Range</span><span class="p">))</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$elf2Range</span><span class="p">)</span>
            <span class="p">)</span> <span class="p">{</span>
                <span class="nv">$partiallyOrFullyContained</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">echo</span> <span class="nv">$partiallyOrFullyContained</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[Who like to clean the house when it was already cleaned up. Today we go the lazy way: we need to find out how to reduce redundant work.]]></summary></entry><entry><title type="html">Advent of Code - Day 3</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-3" rel="alternate" type="text/html" title="Advent of Code - Day 3" /><published>2022-12-03T10:00:00+00:00</published><updated>2022-12-05T10:28:51+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-3</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-3"><![CDATA[<p><a href="https://adventofcode.com/2022/day/3" rel="noopener" target="_blank">Today’s puzzle</a> in short: There are a
    bunch of character strings. Each letter has a number, and we need to group these strings by different criteria and sum
    the common characters’ numbers.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>The guys didn’t go crazy with this input for the first sight.</p>
  <ul>
    <li>Every line contains “random” characters from the English alphabet.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <ul>
    <li>Each character has a priority number:
      <ul>
        <li>the lowercase characters (from <code class="language-plaintext highlighter-rouge">a</code> to <code class="language-plaintext highlighter-rouge">z</code>) have priorities 1 through 26.</li>
        <li>the uppercase characters (from <code class="language-plaintext highlighter-rouge">A</code> to <code class="language-plaintext highlighter-rouge">Z</code>) have priorities 27 through 52.</li>
      </ul>
    </li>
    <li>We have to deal with groups of strings, and the character that is common in every string within a group gives the groups
      priority.</li>
    <li>We have to count all the groups’ priorities.</li>
  </ul>
  <h3 id="part-one">Part one</h3>
  <p>In the first task we have to split every line of string into two equal parts, and they will form a group.</p>
  <p>The first thing we need to realize here is the priority numbers are not the same way added to the characters as they
    present in the ASCII table. Because the character codes are the following:</p>
  <ul>
    <li>Characters from <code class="language-plaintext highlighter-rouge">A</code> trough <code class="language-plaintext highlighter-rouge">Z</code> are between <code class="language-plaintext highlighter-rouge">65</code> and <code class="language-plaintext highlighter-rouge">90</code>.</li>
    <li>Characters from <code class="language-plaintext highlighter-rouge">a</code> trough <code class="language-plaintext highlighter-rouge">z</code> are between <code class="language-plaintext highlighter-rouge">97</code> and <code class="language-plaintext highlighter-rouge">122</code>.</li>
  </ul>
  <p>In PHP, you can easily get this value from the character set’s mapping table with the 
    <a href="https://www.php.net/manual/en/function.ord.php" rel="noopener" target="_blank">ord()</a> function.</p>
  <p>The second thing is - like in most programming languages - the string are not really equal to an array of characters, so
    we need to convert each string to arrays of characters.</p>
  <p>So the code will be like this:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">const</span> <span class="no">PRIORITY_DIFF_LOWERCASE</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">97</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">const</span> <span class="no">PRIORITY_DIFF_UPPERCASE</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">65</span> <span class="o">+</span> <span class="mi">27</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$characters</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$compartment1</span><span class="p">,</span> <span class="nv">$compartment2</span><span class="p">]</span> <span class="o">=</span> <span class="nb">array_chunk</span><span class="p">(</span><span class="nv">$characters</span><span class="p">,</span> <span class="nb">floor</span><span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$characters</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
        <span class="nv">$commonItem</span> <span class="o">=</span> <span class="nb">current</span><span class="p">(</span><span class="nb">array_unique</span><span class="p">(</span><span class="nb">array_intersect</span><span class="p">(</span><span class="nv">$compartment1</span><span class="p">,</span> <span class="nv">$compartment2</span><span class="p">)));</span>
        <span class="nv">$priorityDiff</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="nv">$commonItem</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span>
            <span class="o">?</span> <span class="no">PRIORITY_DIFF_LOWERCASE</span>
            <span class="o">:</span> <span class="no">PRIORITY_DIFF_UPPERCASE</span><span class="p">;</span>

        <span class="nv">$sum</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$commonItem</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$priorityDiff</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">echo</span> <span class="nv">$sum</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see the big “trick” here is we use the character code as a starting pont and with a simple addition (subtraction),
  we get the right priority number without having to store them in an array. And as I mentioned earlier, the best way to 
  solve this puzzle to convert the strings into arrays of characters (doing it with the <code class="language-plaintext highlighter-rouge">str_split()</code>), and then with the
  <code class="language-plaintext highlighter-rouge">array_intersect()</code> we can easily get all the common elements of the arrays.</p>
<p>Since we know that the input data has been delivered with care, we don’t need to be super strict with checks:</p>
<ul>
  <li>We assume that each line has an even number of characters, so we can split with no issue.</li>
  <li>We assume that grouping will result one and only one common character, so we get the right result when we pick the 
    first item from the returning array of the <code class="language-plaintext highlighter-rouge">array_intersect()</code> function.</li>
  <li>We assume there are no tricks with “out of range” (like random UTF-8) characters.</li>
</ul>
<h3 id="part-two">Part two</h3>
<p>In this task the only thing changed is the way we make the groups. Instead of splitting each row, now we collect 3 rows
  into a group. Then the rest of the logic is more-or-less the same:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$backpacks</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">const</span> <span class="no">PRIORITY_DIFF_LOWERCASE</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">97</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">const</span> <span class="no">PRIORITY_DIFF_UPPERCASE</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">65</span> <span class="o">+</span> <span class="mi">27</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$backpacks</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$backpacks</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$commonItem</span> <span class="o">=</span> <span class="nb">current</span><span class="p">(</span><span class="nb">array_unique</span><span class="p">(</span><span class="nb">array_intersect</span><span class="p">(</span><span class="nv">$backpacks</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nv">$backpacks</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nv">$backpacks</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
        <span class="nv">$priorityDiff</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="nv">$commonItem</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span>
            <span class="o">?</span> <span class="no">PRIORITY_DIFF_LOWERCASE</span>
            <span class="o">:</span> <span class="no">PRIORITY_DIFF_UPPERCASE</span><span class="p">;</span>

        <span class="nv">$sum</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$commonItem</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$priorityDiff</span><span class="p">);</span>
        <span class="nv">$backpacks</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">echo</span> <span class="nv">$sum</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[A nice finger practice to count characters.]]></summary></entry><entry><title type="html">Advent of Code - Day 2</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-2" rel="alternate" type="text/html" title="Advent of Code - Day 2" /><published>2022-12-02T06:00:00+00:00</published><updated>2022-12-05T09:57:23+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-2</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-2"><![CDATA[<p><a href="https://adventofcode.com/2022/day/2" rel="noopener" target="_blank">Today’s puzzle</a> in short: It’s the good
    old <code class="language-plaintext highlighter-rouge">Stone - Paper - Scissors</code> game.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>The input data today is simple:</p>
  <ul>
    <li>Every row contains two characters separated by a space.</li>
    <li>The first character is either <code class="language-plaintext highlighter-rouge">A</code>, <code class="language-plaintext highlighter-rouge">B</code> or <code class="language-plaintext highlighter-rouge">C</code>.</li>
    <li>The second character is either <code class="language-plaintext highlighter-rouge">X</code>, <code class="language-plaintext highlighter-rouge">Y</code> or <code class="language-plaintext highlighter-rouge">Z</code>.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">A</code> represents player 1’s decision: the <code class="language-plaintext highlighter-rouge">Stone</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">B</code> represents player 1’s decision: the <code class="language-plaintext highlighter-rouge">Paper</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">C</code> represents player 1’s decision: the <code class="language-plaintext highlighter-rouge">Scissors</code>.</li>
    <li>The <code class="language-plaintext highlighter-rouge">Stone</code> is worth <code class="language-plaintext highlighter-rouge">1</code> point.</li>
    <li>The <code class="language-plaintext highlighter-rouge">Paper</code> is worth <code class="language-plaintext highlighter-rouge">2</code> points.</li>
    <li>The <code class="language-plaintext highlighter-rouge">Scissors</code> is worth <code class="language-plaintext highlighter-rouge">3</code> points.</li>
    <li>If player 1 wins, that’s <code class="language-plaintext highlighter-rouge">0</code> point.</li>
    <li>If it’s a draw, that’s <code class="language-plaintext highlighter-rouge">3</code> points.</li>
    <li>If player 2 wins, that’s <code class="language-plaintext highlighter-rouge">6</code> points.</li>
  </ul>
  <h3 id="part-one">Part one</h3>
  <p>The second character in this part also represents decisions:</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">X</code> represents player 2’s decision: the <code class="language-plaintext highlighter-rouge">Stone</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">Y</code> represents player 2’s decision: the <code class="language-plaintext highlighter-rouge">Paper</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">Z</code> represents player 2’s decision: the <code class="language-plaintext highlighter-rouge">Scissors</code>.</li>
  </ul>
  <p>Task: how much point will player 2 get after playing all rounds?</p>
  <h4 id="the-code">The code</h4>
  <p>Following the rule I set up yesterday, I think in the most simple solution. So we have two players, six letters with three 
    points assigned and also some points regarding the result of the duel. This will cause a bit of hell with the variables,
    so it’s better to define constants. Also need to make a 3x3 matrix for the game rules:</p>
  <ul>
    <li>Stone beats scissors</li>
    <li>Scissors beat paper</li>
    <li>Paper beats stone</li>
  </ul>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="k">const</span> <span class="no">ROCK_1</span> <span class="o">=</span> <span class="s1">'A'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">PAPER_1</span> <span class="o">=</span> <span class="s1">'B'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">SCISSORS_1</span> <span class="o">=</span> <span class="s1">'C'</span><span class="p">;</span>

<span class="k">const</span> <span class="no">ROCK_2</span> <span class="o">=</span> <span class="s1">'X'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">PAPER_2</span> <span class="o">=</span> <span class="s1">'Y'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">SCISSORS_2</span> <span class="o">=</span> <span class="s1">'Z'</span><span class="p">;</span>

<span class="k">const</span> <span class="no">P1_WINS</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">const</span> <span class="no">P2_WINS</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
<span class="k">const</span> <span class="no">DRAW</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>

<span class="nv">$decisionScore</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">ROCK_2</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
    <span class="no">PAPER_2</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
    <span class="no">SCISSORS_2</span> <span class="o">=&gt;</span> <span class="mi">3</span>
<span class="p">];</span>

<span class="nv">$winningMatrix</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">ROCK_1</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">ROCK_2</span> <span class="o">=&gt;</span> <span class="no">DRAW</span><span class="p">,</span>
        <span class="no">PAPER_2</span> <span class="o">=&gt;</span> <span class="no">P2_WINS</span><span class="p">,</span>
        <span class="no">SCISSORS_2</span> <span class="o">=&gt;</span> <span class="no">P1_WINS</span>
    <span class="p">],</span>
    <span class="no">PAPER_1</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">ROCK_2</span> <span class="o">=&gt;</span> <span class="no">P1_WINS</span><span class="p">,</span>
        <span class="no">PAPER_2</span> <span class="o">=&gt;</span> <span class="no">DRAW</span><span class="p">,</span>
        <span class="no">SCISSORS_2</span> <span class="o">=&gt;</span> <span class="no">P2_WINS</span>
    <span class="p">],</span>
    <span class="no">SCISSORS_1</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">ROCK_2</span> <span class="o">=&gt;</span> <span class="no">P2_WINS</span><span class="p">,</span>
        <span class="no">PAPER_2</span> <span class="o">=&gt;</span> <span class="no">P1_WINS</span><span class="p">,</span>
        <span class="no">SCISSORS_2</span> <span class="o">=&gt;</span> <span class="no">DRAW</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>You may have noticed, that the <code class="language-plaintext highlighter-rouge">$decisionScore</code> contains only the player 2’s decisions. It’s because we don’t care about player 1’s 
  score in the end.</p>
<p>Now let’s think about the logic. Go line-by-line, split up the string into the two players’ decisions, and simply add
  together the decision score and the score given by the winning matrix.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$player_2_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$player_1_decision</span><span class="p">,</span> <span class="nv">$player_2_decision</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$player_2_score</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$winningMatrix</span><span class="p">[</span><span class="nv">$player_1_decision</span><span class="p">][</span><span class="nv">$player_2_decision</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$decisionScore</span><span class="p">[</span><span class="nv">$player_2_decision</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$player_2_score</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>The second character in part two represents the strategy that player 2 should follow:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">X</code> to loose the round</li>
  <li><code class="language-plaintext highlighter-rouge">Y</code> to make draw</li>
  <li><code class="language-plaintext highlighter-rouge">Z</code> to win the round</li>
</ul>
<p>Task: how much point will player 2 get after playing all rounds?</p>
<h4 id="the-code-1">The code</h4>
<p>For this version we have to revert our thinking a bit. The winning matrix will become a decision matrix, and with given
  strategy we can easily identify the right decision. The constants will now look as follows:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">const</span> <span class="no">ROCK</span> <span class="o">=</span> <span class="s1">'A'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">PAPER</span> <span class="o">=</span> <span class="s1">'B'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">SCISSORS</span> <span class="o">=</span> <span class="s1">'C'</span><span class="p">;</span>

<span class="k">const</span> <span class="no">P1_SHOULD_WIN</span> <span class="o">=</span> <span class="s1">'X'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">END_DRAW</span> <span class="o">=</span> <span class="s1">'Y'</span><span class="p">;</span>
<span class="k">const</span> <span class="no">P2_SHOULD_WIN</span> <span class="o">=</span> <span class="s1">'Z'</span><span class="p">;</span>

<span class="nv">$decisionScore</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">ROCK</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
    <span class="no">PAPER</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
    <span class="no">SCISSORS</span> <span class="o">=&gt;</span> <span class="mi">3</span>
<span class="p">];</span>

<span class="nv">$duelResult</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">P1_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
    <span class="no">P2_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span>
    <span class="no">END_DRAW</span> <span class="o">=&gt;</span> <span class="mi">3</span>
<span class="p">];</span>

<span class="nv">$decisionMatrix</span> <span class="o">=</span> <span class="p">[</span>
    <span class="no">ROCK</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">P1_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">SCISSORS</span><span class="p">,</span>
        <span class="no">P2_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">PAPER</span><span class="p">,</span>
        <span class="no">END_DRAW</span> <span class="o">=&gt;</span> <span class="no">ROCK</span>
    <span class="p">],</span>
    <span class="no">PAPER</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">P1_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">ROCK</span><span class="p">,</span>
        <span class="no">P2_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">SCISSORS</span><span class="p">,</span>
        <span class="no">END_DRAW</span> <span class="o">=&gt;</span> <span class="no">PAPER</span>
    <span class="p">],</span>
    <span class="no">SCISSORS</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="no">P1_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">PAPER</span><span class="p">,</span>
        <span class="no">P2_SHOULD_WIN</span> <span class="o">=&gt;</span> <span class="no">ROCK</span><span class="p">,</span>
        <span class="no">END_DRAW</span> <span class="o">=&gt;</span> <span class="no">SCISSORS</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>We have one extra array compared to the previous version, and another became much simpler. The logic will be the following:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$player_2_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$player_1_decision</span><span class="p">,</span> <span class="nv">$player_2_strategy</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$player_2_decision</span> <span class="o">=</span> <span class="nv">$decisionMatrix</span><span class="p">[</span><span class="nv">$player_1_decision</span><span class="p">][</span><span class="nv">$player_2_strategy</span><span class="p">];</span>
        <span class="nv">$player_2_score</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$duelResult</span><span class="p">[</span><span class="nv">$player_2_strategy</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$decisionScore</span><span class="p">[</span><span class="nv">$player_2_decision</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$player_2_score</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[A classic game I used to play a lot with my son.]]></summary></entry><entry><title type="html">Advent of Code - Day 1</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-1" rel="alternate" type="text/html" title="Advent of Code - Day 1" /><published>2022-12-01T15:00:00+00:00</published><updated>2022-12-02T11:24:08+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-1</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-1"><![CDATA[<p><a href="https://adventofcode.com/2022/day/1" rel="noopener" target="_blank">Today’s puzzle</a> in short: It’s a 
    heart-warming story about elves and their journey. To be able to travel, they need food and calories. Every elf writes a 
    note about the amount of food (calories) they take in their bags.</p>
  <h3 id="technical-specification">Technical specification</h3>
  <p>First of all, we need to read between the lines, and pile off all the fairytale from the pure specification.</p>
  <p>We will get the input data:</p>
  <ul>
    <li>every line may contain a number</li>
    <li>every line ends with a new line character (obviously)</li>
    <li>the numbers a grouped</li>
    <li>every group separated with one empty line</li>
    <li>the last row is also an empty line</li>
  </ul>
  <h3 id="part-one">Part one</h3>
  <p>The task: summarize the numbers by the groups and return with the highest number. It’s that simple.</p>
  <h4 id="the-code">The code</h4>
  <p>The first step is to save the puzzle input into a file: <code class="language-plaintext highlighter-rouge">input.txt</code>. Then let’s think about the most simple solution:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$actualCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$maxCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$maxCalorie</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$actualCalorie</span><span class="p">,</span> <span class="nv">$maxCalorie</span><span class="p">);</span>
            <span class="nv">$actualCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$actualCalorie</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$line</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$maxCalorie</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<ul>
  <li>initialize the <code class="language-plaintext highlighter-rouge">$actualCalorie</code> and the <code class="language-plaintext highlighter-rouge">$maxCalorie</code> as zero</li>
  <li>read the file line-by-line:
    <ul>
      <li>if not empty line:
        <ul>
          <li>convert the data into a number</li>
          <li>add this number to a puffer variable <code class="language-plaintext highlighter-rouge">$actualCalorie</code></li>
        </ul>
      </li>
      <li>if the line is empty:
        <ul>
          <li>check if the <code class="language-plaintext highlighter-rouge">$actualCalorie</code> if higher than the <code class="language-plaintext highlighter-rouge">$maxCalorie</code></li>
          <li>reset <code class="language-plaintext highlighter-rouge">$actualCalorie</code></li>
          <li>skip to next line</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>print the <code class="language-plaintext highlighter-rouge">$maxCalorie</code></li>
</ul>
<h3 id="part-two">Part two</h3>
<p>The input is the same, but we need to get the sum of the top three groups.</p>
<h4 id="the-code-1">The code</h4>
<p>Instead of saving the <code class="language-plaintext highlighter-rouge">$maxCalorie</code> all the time, we need to save all the groups, sort the array in descending order, and 
  add together the first three element.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$actualCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$calories</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$calories</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$actualCalorie</span><span class="p">;</span>
            <span class="nv">$actualCalorie</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$actualCalorie</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$line</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="nb">rsort</span><span class="p">(</span><span class="nv">$calories</span><span class="p">);</span>

<span class="k">echo</span> <span class="p">(</span><span class="nv">$calories</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$calories</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$calories</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>I could go into a more secure and much prettier code, but I didn’t want to, because:</p>
<ul>
  <li>the result is the important, not the code</li>
  <li>the input is known, so I could skip some array index availability checks</li>
</ul>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[It&apos;s December again, the time of the Advent Calendars. Eric Wastl made the Advent of Code which is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language.]]></summary></entry><entry><title type="html">Tips &amp;amp; Tricks to make Jekyll do what you need</title><link href="http://0.0.0.0:4000/devenv/tips-and-tricks-for-jekyll" rel="alternate" type="text/html" title="Tips &amp;amp; Tricks to make Jekyll do what you need" /><published>2022-11-18T14:10:00+00:00</published><updated>2022-11-18T14:12:48+00:00</updated><id>http://0.0.0.0:4000/devenv/tips-and-tricks-for-jekyll</id><content type="html" xml:base="http://0.0.0.0:4000/devenv/tips-and-tricks-for-jekyll"><![CDATA[<h3 id="what-is-jekyll">What is Jekyll?</h3>
  <p>Short answer: <a href="https://jekyllrb.com/Jekyll" rel="noopener" target="_blank">Jekyll</a> is a static site generator.</p>
  <p>Long answer: Jekyll is a static site generator that uses layouts and <a href="https://daringfireball.net/projects/markdown/syntax" rel="noopener" target="_blank">Markdown</a>
    to generate a static website. It has its own templating engine, named <a href="https://jekyllrb.com/docs/step-by-step/02-liquid/" rel="noopener" target="_blank">Liquid</a>. 
    If you know the Symfony’s <a href="https://twig.symfony.com/" rel="noopener" target="_blank">Twig</a> template engine, 
    you will find the Liquid very familiar. At least syntax-wise.</p>
  <h3 id="why-jekyll">Why Jekyll?</h3>
  <p>When I started to deal with static site generators, I didn’t know much of them. I asked my friends what they recommend, but
    almost everybody told a different tool as to be the best. …including the <em>“Write your own in PHP, dude!”</em> option.</p>
  <p>So I tried some of them, and I chose Jekyll because its template engine’s syntax similarity to Twig’s, which I know well.</p>
  <h3 id="tops-and-flops">Tops and Flops</h3>
  <p>The bright side of the story is, the Liquid is easy to learn, easy to understand and easy to use. Unless you keep yourself
    on the path that the documentation shows you.</p>
  <p>The dark side of the story begins as soon as you want something different, or a bit more.</p>
  <p>The Liquid has three main components:</p>
  <ul>
    <li>objects</li>
    <li>tags</li>
    <li>filters</li>
  </ul>
  <p>Liquid tags are not the same as on <a href="https://www.twitter.com" rel="noopener" target="_blank">Twitter</a>. These 
    are more like statements, functions, procedures. For example, the <code class="language-plaintext highlighter-rouge">{%if ...%}...{% endif %}</code> is a 
    <em>control flow tag</em>.</p>
  <p>Just to confuse you, it has Twitter-like tags too. And categories. Great.</p>
  <p>So, from these three components you can create many beautiful things, but sometimes it’s very painful to customize them.</p>
  <h3 id="challenges">Challenges</h3>
  <p>During the development of this blog, I faced some issues, and I had to be very creative to solve them. My problem now is
    I can’t really remember the order of the issues came up, so I can’t tell now which issues in which order lead me to the 
    current state of the setup. But I try to grab some details.</p>
  <h4 id="slug-vs-label">Slug vs Label</h4>
  <p>I had a private, more personal blog that I wrote in Hungarian. There we have special letters above the default <em>latin-1</em>
    character set. In a very short time I figured out that Jekyll was written by English-speaking programmers. Because - according
    to my decade-long experience - many English-speaking programmers just simply give a damn on the rest of the world, that 
    would like to speak, read and write in other than English. Sorry guys, that’s the truth.</p>
  <p>And in Jekyll, what you give for example for a post’s category name, it will be used for the URL too. And if you have 
    special characters you are screwed. For example the <code class="language-plaintext highlighter-rouge">category: 'csőlátás'</code> will be transformed into <code class="language-plaintext highlighter-rouge">/cslts</code>. Not good.
    Also even in English you can shoot yourself on the leg, when you need a short slug for a longer label:</p>
  <div class="language-liquid highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
    </td>
    <td class="rouge-code">
      <pre>category: 'Development environment'
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>For this the slug will be either <code class="language-plaintext highlighter-rouge">/development/environment/...</code> or <code class="language-plaintext highlighter-rouge">/development%20environment/...</code>, however a simple
  <code class="language-plaintext highlighter-rouge">/devenv/...</code> would be enough for the URL. And the same goes for the tags.</p>
<p>Of course there are <em>I18n</em> plugins for Jekyll, but what I tried, didn’t work very well.</p>
<p>What could I do? I tricked the system, with the system’s tools:</p>
<ul>
  <li>Every custom data you create in the posts’ <a href="https://jekyllrb.com/docs/step-by-step/03-front-matter/" rel="noopener" target="_blank">front matter</a>
    will be collected in the <code class="language-plaintext highlighter-rouge">post</code> variable.</li>
  <li>You can create custom data by capturing a printouts.</li>
  <li>You can create arrays by splitting up strings. Liquid even has some array-related filters.</li>
  <li>You can iterate through these arrays.</li>
</ul>
<p>So, if you keep adding multiple built-in/custom data consequently for all the posts, and you keep them in sync, you can 
  create two arrays, and the item index will be the connection between them. Example:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre>---
category: 'devenv'
categoryLabel: 'Development Environment'
---

Page content
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>then you can use the following:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>&lt;a href="<span class="p">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">category</span><span class="w"> </span><span class="p">}}</span>"&gt;<span class="p">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">categoryLabel</span><span class="w"> </span><span class="p">}}</span>&lt;/a&gt;
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Okay, you can say, this is easy, we just go through the <code class="language-plaintext highlighter-rouge">site.posts</code> array and print these values. Okay, but how you do it
  when you have more than one category and/or tags? How you pair them?</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre>
  </td>
  <td class="rouge-code">
    <pre>---
category: 'devenv'
categoryLabel: 'Development Environment'
tags:   [docker, wsl2, powerline-shell, phpstorm, windows]
tagLabels: ['Docker', 'WSL2', 'Powerline Shell', 'PHPStorm', 'Windows']
---

Page content
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Of course, you can do it, but you have to write all the damn iteration every place, where you want to use them. Wouldn’t
  be easier to pre-collect all the categories and tags and their labels and just use them?</p>
<h3 id="variables">Variables</h3>
<p>I introduced a new include file, called <code class="language-plaintext highlighter-rouge">variables.html</code>:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>variables.html<span class="w"> </span><span class="p">-%}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="categories">Categories</h4>
<p>Inside that file I made all my dirty tricks: collect all the posts’ categories and labels, concatenate them into one 
  string, and then split them back to arrays:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">categorySlugs</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">category</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">categorySlugs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">categorySlugs</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

<span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">categoryLabels</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">categoryLabel</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">categoryLabels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">categoryLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h4 id="tags">Tags</h4>
<p>We do the same for the tags:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">tags</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">join</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

<span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">tagLabels</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">tagLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">join</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagLabels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Rules to keep:</p>
<ul>
  <li>Never sort these arrays, otherwise the slugs and labels will be mixed up</li>
  <li>Always make sure that one slug doesn’t have multiple labels and vice-versa.</li>
</ul>
<h5 id="usage">Usage</h5>
<p>As I wrote before to connect the slug with the labels, the lists must be synchronized, then we can use the loop index to
  get the right label for the slug:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre>&lt;ul&gt;
<span class="p">{%-</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">tagSlug</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">-%}</span>
  &lt;li&gt;&lt;a href="tags/<span class="p">{{</span><span class="w"> </span><span class="nv">tagSlug</span><span class="w"> </span><span class="p">}}</span>"&gt;<span class="p">{{</span><span class="w"> </span><span class="nv">tagLabels</span><span class="p">[</span><span class="nb">forloop.index0</span><span class="p">]</span><span class="w"> </span><span class="p">}}</span>&lt;/a&gt;&lt;/li&gt;
<span class="p">{%-</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">-%}</span>
&lt;/ul&gt;

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>To get the actual serial number (index) of the loop, we can ask it from the <code class="language-plaintext highlighter-rouge">forloop</code> variable. If we use the <code class="language-plaintext highlighter-rouge">forloop.index</code>, 
  the counter will start from <code class="language-plaintext highlighter-rouge">1</code>. If we use the <code class="language-plaintext highlighter-rouge">forloop.index0</code>, the counter will start from <code class="language-plaintext highlighter-rouge">0</code>, and since we want to use
  it on another list, we need this one.</p>
<h4 id="dates">Dates</h4>
<p>For the archive, we have to deal with dates. And here we also have the same problem: we want to use simple dates for the 
  URL, but we want a more talkative version for the labels.</p>
<p>First we need all the posts’ dates in the right order. Luckily the posts are ordered by date.</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>For the archive I wanted to list posts on a monthly basis, so the URL slug should be <code class="language-plaintext highlighter-rouge">YYYY-MM</code> format:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">dateSlugs</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%Y-%m'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">dateSlugs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">dateSlugs</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>And for the labels we want to print the name of the month and then the year. I could use the <code class="language-plaintext highlighter-rouge">date: %B</code> filter to print
  the name of the month, but again it’s English only (well, good enough for this blog), and the I18n plugin is not good for 
  me. So I decided to add translations.</p>
<p>In Jekyll, we can refer to additional <code class="language-plaintext highlighter-rouge">.yml</code> configuration, that is placed in the <code class="language-plaintext highlighter-rouge">_data</code> folder. So I created two files:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">_data/en.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">_data/hu.yml</code></li>
</ul>
<p>In the file, we can create sections, subsections, values, value collections etc. For example, the <code class="language-plaintext highlighter-rouge">_data/hu.yml</code> looks 
  the following:</p>
<div class="language-yaml highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="na">months</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">.</span>
  <span class="pi">-</span> <span class="s">január</span>
  <span class="pi">-</span> <span class="s">február</span>
  <span class="pi">-</span> <span class="s">március</span>
  <span class="pi">-</span> <span class="s">április</span>
  <span class="pi">-</span> <span class="s">május</span>
  <span class="pi">-</span> <span class="s">június</span>
  <span class="pi">-</span> <span class="s">július</span>
  <span class="pi">-</span> <span class="s">augusztus</span>
  <span class="pi">-</span> <span class="s">szeptember</span>
  <span class="pi">-</span> <span class="s">október</span>
  <span class="pi">-</span> <span class="s">november</span>
  <span class="pi">-</span> <span class="s">december</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>You can notice I list the months names in Hungarian, but the first is a nonsense. The reason is, from the date formatter
  we can get the number of the month, which is in the range of 1 and 12. But this config will be presented as an array, and
  the arrays starts with the zero index.</p>
<p>So, now we have the translations, we can refer them with <code class="language-plaintext highlighter-rouge">{{ site.data.hu.months[5] }}</code>, or if we 
  defined the <code class="language-plaintext highlighter-rouge">lang</code> variable in the config, we can do <code class="language-plaintext highlighter-rouge">{{ site.data[site.lang].months[5] }}</code> too. 
  After this, creating labels is a simple task:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">dateLabels</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">sortedDates</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">m</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%-m'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">minus</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">data</span><span class="p">[</span><span class="nv">site</span><span class="p">.</span><span class="nv">lang</span><span class="p">].</span><span class="nv">months</span><span class="p">[</span><span class="nv">m</span><span class="p">]</span><span class="w"> </span><span class="p">}}</span>, <span class="p">{{</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%Y'</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>;<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">dateLabels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">dateLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">';'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">uniq</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="list-the-top-3-most-used-tags-and-display-their-usage-number">List the top 3 most used tags and display their usage number</h3>
<p>Another interesting solution was born here. To know what is the internal content of the <code class="language-plaintext highlighter-rouge">site.tags</code>, we call the help of
  the <code class="language-plaintext highlighter-rouge">debug</code> filter:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">tags</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">debug</span><span class="w"> </span><span class="p">}}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>… which will print something like:</p>
<div class="language-plaintext highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>{"docker"=&gt;[#], "js"=&gt;[#, #, #, #], "clean-code"=&gt;[#, #, #], "react"=&gt;[#, #, #], "webpack"=&gt;[#, #, #], "jekyll"=&gt;[#]}
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So the <code class="language-plaintext highlighter-rouge">key</code> in this object holds the slug, and the <code class="language-plaintext highlighter-rouge">value</code> is an array with some unknown data. What is important for us, 
  it’s countable. The more a tag is used, the larger its value-array is. From these information, we need to make a sorted list.</p>
<p>How to sort? Make the count to be a string, concatenate to the slug, and sort as text:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">counts_with_tags_string</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.tags</span><span class="w"> </span><span class="p">-%}{{</span><span class="w"> </span><span class="nv">tag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">size</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">prepend</span><span class="p">:</span><span class="s2">"000000"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">slice</span><span class="p">:</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="w"> </span><span class="p">}}</span>:<span class="p">{{</span><span class="w"> </span><span class="nv">tag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nb">forloop.last</span><span class="w"> </span><span class="p">%}</span>,<span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}{%-</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Let’s go one-by-one.</p>
<ul>
  <li>The <code class="language-plaintext highlighter-rouge">{{ tag[1] | size | prepend:"000000" | slice:-6,6 }}</code> gets the tag value-array’s size.</li>
  <li>By prepending a bunch of zeros in front of the number, converts it to string. So if we used a tag for example <strong>123</strong>
    times, then it will be <strong>000000123</strong>.</li>
  <li>We need to make every tag counter to be exactly the same length to be sortable, so
    we keep only the last 6 characters: <code class="language-plaintext highlighter-rouge">slice:-6,6</code>.</li>
  <li>Then we print a colon (<code class="language-plaintext highlighter-rouge">:</code>).</li>
  <li>Then we print the tag slug (<code class="language-plaintext highlighter-rouge">tag[0]</code>).</li>
  <li>And finally, unless it’s the last item in the iteration, we print a comma (<code class="language-plaintext highlighter-rouge">,</code>) as well.</li>
</ul>
<p>We need to be careful, the <code class="language-plaintext highlighter-rouge">capture</code> tag capture the whitespaces as well, so always double-check the result.</p>
<p>From the example above, with this capture we get the following string:</p>
<div class="language-plaintext highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre>000001:docker,000004:js,000003:clean-code,000003:react,000003:webpack,000001:jekyll
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>To convert it back to array, and get the highest number first, we need to split this string by the comma, then sort and 
  reverse the result list:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">counts_with_tags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">counts_with_tags_string</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="s2">","</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">sort</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">reverse</span><span class="w"> </span><span class="p">-%}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Then we can use this list to match with our <code class="language-plaintext highlighter-rouge">tagSlugs</code> and <code class="language-plaintext highlighter-rouge">tagLabels</code> lists to print the top 3 most used tags:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre>
  </td>
  <td class="rouge-code">
    <pre>&lt;ul&gt;
<span class="p">{%-</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">count_with_tag</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">counts_with_tags</span><span class="w"> </span><span class="na">limit</span><span class="o">:</span><span class="mi">3</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">count_with_tag</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="s2">":"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">last</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">slugify</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagLabel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">count_with_tag</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="s2">":"</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">first</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">plus</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">tagSlug</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">-%}</span>
        <span class="p">{%-</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nv">tagSlug</span><span class="w"> </span><span class="p">-%}</span>
            <span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagLabel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagLabels</span><span class="p">[</span><span class="nb">forloop.index0</span><span class="p">]</span><span class="w"> </span><span class="p">-%}</span>
            <span class="p">{%-</span><span class="w"> </span><span class="nt">break</span><span class="w"> </span><span class="p">-%}</span>
        <span class="p">{%-</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">-%}</span>
    &lt;li&gt;&lt;a href="/tags/<span class="p">{{</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="p">}}</span>/"&gt;<span class="p">{{</span><span class="w"> </span><span class="nv">tagLabel</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip</span><span class="w"> </span><span class="p">}}</span> &lt;sup&gt;<span class="p">{{</span><span class="w"> </span><span class="nv">count</span><span class="w"> </span><span class="p">}}</span>&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
<span class="p">{%-</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">-%}</span>
&lt;/ul&gt;    

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>What is going on here:</p>
<ul>
  <li>We go through this list and get only the first 3 items (<code class="language-plaintext highlighter-rouge">limit:3</code>).</li>
  <li>Get the tag’s slug by splitting up the actual element by the colon (<code class="language-plaintext highlighter-rouge">:</code>) and take the last part (<code class="language-plaintext highlighter-rouge">| last</code>).</li>
  <li>For safety purpose we assign the tag slug to the <code class="language-plaintext highlighter-rouge">tagLabel</code> as well.</li>
  <li>Get the tag’s count by splitting up the actual element by the colon (<code class="language-plaintext highlighter-rouge">:</code>) and take the first part (<code class="language-plaintext highlighter-rouge">| first</code>). We add 
    zero (<code class="language-plaintext highlighter-rouge">| plus 0</code>) to convert it back to number. So the <strong>000123</strong> will be <strong>123</strong> again.</li>
  <li>We go through our <code class="language-plaintext highlighter-rouge">tagSlugs</code> list we created earlier and match against the tag slug we currently have. When we find it
    we overwrite the <code class="language-plaintext highlighter-rouge">tagLabel</code> and quit this loop.</li>
  <li>Print the link with the slug, the label and the count.</li>
</ul>
<h3 id="pragmatically-stop-the-build-process">Pragmatically stop the build process</h3>
<p>In some special cases the tag slugs and tag labels are getting out of sync because of human error. To avoid publishing
  a site with wrong tag links and let Google to index them, I had to find a way to stop the build process with error.
  The solution is quite simple: we rely on the Jekyll’s behaviour, that it evaluates the “conditions” only when the control
  gets there, not sooner, and not when not used. So simply add a screwed up Liquid code, like an <code class="language-plaintext highlighter-rouge">include</code> with invalid characters:</p>
<div class="language-liquid highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagSlugSize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagSlugs</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">size</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tagLabelSize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tagLabels</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">size</span><span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">tagSlugSize</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="nv">tagLabelSize</span><span class="w"> </span><span class="p">-%}</span>
    <span class="p">{%-</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>./stopBuild.html<span class="w"> </span><span class="p">-%}</span>
<span class="p">{%-</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">-%}</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>…will result and error but only when the <code class="language-plaintext highlighter-rouge">tagSlugs</code> and <code class="language-plaintext highlighter-rouge">tagLabels</code> lists’ sizes are different:</p>
<div class="language-bash highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre>
  </td>
  <td class="rouge-code">
    <pre>Liquid Exception: Invalid syntax <span class="k">for </span>include tag. File contains invalid characters or sequences: <span class="s2">".
/stopBuild.html"</span> Valid syntax: <span class="o">{</span>% include file.ext <span class="nv">param</span><span class="o">=</span><span class="s1">'value'</span> <span class="nv">param2</span><span class="o">=</span><span class="s1">'value'</span> %<span class="o">}</span> <span class="k">in</span> /app/src/_layouts/default.html

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="conclusion">Conclusion</h3>
<p>If we keep ourselves to the Jekyll documentation, it’s pretty nice and tidy I think. But as soon as we want something a
  bit more, we have to use our imagination and do some calculations. Jekyll is not supposed to use like this. But it works!
  Be brave, think, do experiments, browse <a href="https://www.stackoverflow.com" rel="noopener" target="_blank">Stackoverflow</a>
  for solutions and you will expand the limits…</p>
]]></content><author><name>Gábor Iván</name></author><category term="devenv" /><category term="jekyll" /><category term="liquid" /><summary type="html"><![CDATA[The most simple websites are those have only static files. For a blog like this is perfect. But making everything static by default is difficult. You need a generator. And when you work with Jekyll, sometimes you meet Mr. Hide as well.]]></summary></entry></feed>
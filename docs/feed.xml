<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-12-14T16:53:00+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Worst Practice</title><subtitle></subtitle><author><name>Gábor Iván</name></author><entry><title type="html">Advent of Code - Day 14</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-14" rel="alternate" type="text/html" title="Advent of Code - Day 14" /><published>2022-12-14T16:25:00+00:00</published><updated>2022-12-14T16:52:59+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-14</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-14"><![CDATA[<p><a href="https://adventofcode.com/2022/day/14" rel="noopener" target="_blank">Today’s puzzle</a> in short: If you ever played
        to the original <a href="https://en.wikipedia.org/wiki/Boulder_Dash" rel="noopener" target="_blank">Boulder Dash</a> game 
        in the ’80s, you know what this game is about.</p>
      <p>If you didn’t, well here’s a very nice example from the game, that also highlights the physics, that we need to re-create:</p>
      <iframe class="yt" width="560" height="315" src="https://www.youtube-nocookie.com/embed/Nj-ldSUTFCg?start=17" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
      <h3 id="the-input-data">The input data</h3>
      <p>This time the input data is pretty complex: simulates drawing horizontal and vertical lines.</p>
      <ul>
        <li>Each line contains chained coordinates:
          <ul>
            <li>X and Y coordinates are separated by comma,</li>
            <li>positions are separated by ` -&gt; `.</li>
          </ul>
        </li>
        <li>Between coordinates the ` -&gt; ` represents a vector (movement), so the coordinates on its sides are start and end points 
          of a continuous line (range).</li>
        <li>The coordinates are counted left to right, top to bottom.</li>
      </ul>
      <h4 id="game-rules">Game rules</h4>
      <p>The given 2 dimensional data set represents the 2D schema of a cave:</p>
      <ul>
        <li>Where we draw according to the coordinates and vectors, there are rocks.</li>
        <li>The remaining space is void air.</li>
        <li>There’s a leak on the roof at the coordinates 500,0.</li>
      </ul>
      <p>On the leak, sand flows inside the cave and fill it up:</p>
      <ul>
        <li>1 piece of sand falls at a time.</li>
        <li>It can fall 1 unit on our map at a time.</li>
        <li>If it hits a rock and there’s free space 1 unit down on left, it continues falling there.</li>
        <li>If it hits a rock and there’s free space 1 unit down on right, it continues falling there.</li>
        <li>If it hits a rock and there’s no free space 1 unit down on any of the sides, it takes a rest and the next piece of sand start the process again.</li>
      </ul>
      <h3 id="the-data-model">The Data model</h3>
      <p>The most difficult part of the code was actually parsing the input and create the matrix of the used spaces:</p>
      <div class="language-php highlighter-rouge">
        <div class="highlight">
          <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre>
        </td>
        <td class="rouge-code">
          <pre>
<span class="nv">$cave</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$coordinates</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' -&gt; '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$previousX</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="nv">$previousY</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$coordinates</span> <span class="k">as</span> <span class="nv">$coordinate</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">[</span><span class="nv">$x</span><span class="p">,</span> <span class="nv">$y</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">','</span><span class="p">,</span> <span class="nv">$coordinate</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$previousX</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nv">$previousY</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$cave</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'#'</span><span class="p">;</span>
                <span class="nv">$previousX</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
                <span class="nv">$previousY</span> <span class="o">=</span> <span class="nv">$y</span><span class="p">;</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$distanceX</span> <span class="o">=</span> <span class="nv">$previousX</span> <span class="o">-</span> <span class="nv">$x</span><span class="p">;</span>
            <span class="nv">$distanceY</span> <span class="o">=</span> <span class="nv">$previousY</span> <span class="o">-</span> <span class="nv">$y</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$distanceX</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$iteratorX</span> <span class="o">=</span> <span class="nv">$distanceX</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>

                <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">!=</span> <span class="nv">$previousX</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">+=</span> <span class="nv">$iteratorX</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$cave</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'#'</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$distanceY</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$iteratorY</span> <span class="o">=</span> <span class="nv">$distanceY</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>

                <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="nv">$y</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">!=</span> <span class="nv">$previousY</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">+=</span> <span class="nv">$iteratorY</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$cave</span><span class="p">[</span><span class="nv">$j</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'#'</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="nv">$previousX</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
            <span class="nv">$previousY</span> <span class="o">=</span> <span class="nv">$y</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
</pre>
        </td>
      </tr>
    </tbody>
  </table>
</code></pre>
</div>
</div>
<p>The only difficulty here is to calculate the ranges well and fill all the fields between the actual and previous coordinates.</p>
<h3 id="part-1">Part 1</h3>
<p>The map shows no ground for the cave, so the sand can fall into the eternity. We need to count the amount of sand remain on
  the rocks when the first piece falls to the nowhere.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$maxY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$cave</span> <span class="k">as</span> <span class="nv">$y</span> <span class="o">=&gt;</span> <span class="nv">$columns</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$maxY</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$maxY</span><span class="p">,</span> <span class="nv">$y</span><span class="p">);</span>
<span class="p">}</span>

<span class="nv">$restingSandCounter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$x</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>

<span class="k">do</span> <span class="p">{</span>
    <span class="nv">$tmp</span> <span class="o">=</span> <span class="nv">$cave</span><span class="p">;</span>
    <span class="nv">$tmp</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'o'</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$x</span><span class="p">]))</span> <span class="p">{</span>
        <span class="nv">$y</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
        <span class="nv">$y</span><span class="o">++</span><span class="p">;</span>
        <span class="nv">$x</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
        <span class="nv">$y</span><span class="o">++</span><span class="p">;</span>
        <span class="nv">$x</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nv">$cave</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"o"</span><span class="p">;</span>
        <span class="nv">$y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="nv">$x</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
        <span class="nv">$restingSandCounter</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="nv">$y</span> <span class="o">&lt;</span> <span class="nv">$maxY</span> <span class="o">+</span> <span class="mi">2</span><span class="p">));</span>

<span class="k">echo</span> <span class="nv">$restingSandCounter</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Here we need to check how far is the bottom of the last rock from the top. We set the position of the leak, then start the
  process. Any sand piece that passes that height will stop the process. In the simple <code class="language-plaintext highlighter-rouge">do ... while</code> loop we apply the 
  physics rules and as soon as a sand piece finds its place, we increment the counter that will give the solution for the puzzle.</p>
<p>In every loop we add the sand to our <code class="language-plaintext highlighter-rouge">$cave</code>, so the next piece of sand can count with it.</p>
<p>We maybe could use <code class="language-plaintext highlighter-rouge">ksort()</code> to sort the <code class="language-plaintext highlighter-rouge">$cave</code> array by keys order to get the highest key, but I didn’t want to ruin
  the structure we built, maybe in the next part we need it.</p>
<h3 id="part-2">Part 2</h3>
<p>Now we realize, there’s a ground in the cave, actually we stand on it. We need to count how much sand can fill the cave
  according to the rules until the leak gets blocked. The process is the same, only some initialization and loop check changed:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$cave</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">500</span> <span class="o">=&gt;</span> <span class="s1">'+'</span><span class="p">]];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now we have the same cave created, but now we need to add the ground to it. The game description says it can be infinite, 
  but that’s something that not easy to do with arrays, and also unnecessary. I guessed if the maximum height tripled in both
  directions is enough to not get into an infinite loop in the end:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$maxY</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
<span class="nv">$minX</span> <span class="o">=</span> <span class="mi">500</span> <span class="o">-</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nv">$maxY</span><span class="p">);</span>
<span class="nv">$maxX</span> <span class="o">=</span> <span class="mi">500</span> <span class="o">+</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nv">$maxY</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$minX</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$maxX</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$cave</span><span class="p">[</span><span class="nv">$maxY</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'#'</span><span class="p">;</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>I didn’t make any proper calculations on it, simply tried out:</p>
<ul>
  <li>multiplying with two ended in an infinite loop (or I was just impatient)</li>
  <li>multiplying with three worked.</li>
</ul>
<p>As the <code class="language-plaintext highlighter-rouge">$maxY</code> was the bottom of the last rock, we had to add 2 more units to the height:</p>
<ul>
  <li>One for an empty air (where we are too)</li>
  <li>One for the ground (that we stand on).</li>
</ul>
<p>The rest is almost the same, only the while expression changes:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">do</span> <span class="p">{</span>
    <span class="c1">/// ...</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="nv">$cave</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">500</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">"o"</span><span class="p">));</span>

<span class="k">echo</span> <span class="nv">$restingSandCounter</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="bonus">Bonus</h3>
<p>I’m a visual type guy. I can understand everything better, if I can see it. So for this puzzle too, I made a print function
  which I didn’t add to the code samples, since it won’t work on the full data set.</p>
<p>But it was good enough to print the initial state of our cave:</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/backend/advent-of-code-day-14/cave.png" width="344" />
  <figcaption class="a-illustration__caption">Output sample of the </figcaption>
</figure>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[A nice sand-fall game, with very simple logic.]]></summary></entry><entry><title type="html">Advent of Code - Day 13</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-13" rel="alternate" type="text/html" title="Advent of Code - Day 13" /><published>2022-12-13T11:40:00+00:00</published><updated>2022-12-14T14:54:48+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-13</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-13"><![CDATA[<p><a href="https://adventofcode.com/2022/day/13" rel="noopener" target="_blank">Today’s puzzle</a> in short: compare &amp; sort.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>In the input file today we get a spooky, datastructure-like strings:</p>
  <ul>
    <li>Each line starts with <code class="language-plaintext highlighter-rouge">[</code> and ends with <code class="language-plaintext highlighter-rouge">]</code>.</li>
    <li>Between the sides there can be number separated by comma and encapsulated within square brackets.</li>
    <li>The square brackets are in pairs so the number of <code class="language-plaintext highlighter-rouge">[</code> equals to the number of <code class="language-plaintext highlighter-rouge">]</code>.</li>
    <li>It’s possible to have empty square bracket pairs (<code class="language-plaintext highlighter-rouge">[]</code>).</li>
    <li>Every third line is an empty line.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>We need to compare values between lines to determine if the line above is smaller than the line below.</p>
  <h3 id="part-one">Part one</h3>
  <p>In part one, we have different game rules, so I present them here:</p>
  <ul>
    <li>We take every two rows as a group.</li>
    <li>Groups are counted from 1.</li>
    <li>Groups are separated by the empty line.</li>
    <li>We need to check every group if the first member is “smaller” than the second one. If the first member is smaller, we 
      increment a counter with the group’s index.</li>
  </ul>
  <p>Saying one of them is “smaller” depends on our algorithm. So let’s see it:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$pairs</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nv">$pairIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$rightOrderPairIndexSum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$pairs</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$line</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$pairs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$left</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'[]'</span><span class="p">,</span> <span class="s1">'[null]'</span><span class="p">,</span><span class="nv">$pairs</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
            <span class="nv">$right</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'[]'</span><span class="p">,</span> <span class="s1">'[null]'</span><span class="p">,</span><span class="nv">$pairs</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span>
            <span class="nv">$result</span> <span class="o">=</span> <span class="nf">comparePairs</span><span class="p">(</span> <span class="nv">$left</span><span class="p">,</span> <span class="nv">$right</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$rightOrderPairIndexSum</span> <span class="o">+=</span> <span class="nv">$pairIndex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nv">$pairs</span> <span class="o">=</span> <span class="p">[];</span>
            <span class="nv">$pairIndex</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">comparePairs</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$left</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$right</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$left</span> <span class="k">as</span> <span class="nv">$index</span> <span class="o">=&gt;</span> <span class="nv">$leftValue</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$leftValue</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$right</span><span class="p">[</span><span class="nv">$index</span><span class="p">]))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$rightValue</span> <span class="o">=</span> <span class="nv">$right</span><span class="p">[</span><span class="nv">$index</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$leftValue</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$rightValue</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$rightValue</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$rightValue</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$leftValue</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$rightValue</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$leftValue</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$leftValue</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$leftValue</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$rightValue</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">=</span> <span class="nf">comparePairs</span><span class="p">(</span><span class="nv">$leftValue</span><span class="p">,</span> <span class="nv">$rightValue</span><span class="p">))</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$leftValue</span> <span class="o">==</span> <span class="nv">$rightValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$leftValue</span> <span class="o">&lt;</span> <span class="nv">$rightValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$leftValue</span> <span class="o">&gt;</span> <span class="nv">$rightValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$left</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$right</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$rightOrderPairIndexSum</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The trick part was in this puzzle, that the line almost looks like a JSON string. The only issue is the empty square brackets.
  But since these are strings, we can fix it by replacing every <code class="language-plaintext highlighter-rouge">[]</code> with <code class="language-plaintext highlighter-rouge">[null]</code>, and there you go: We have a JSON!</p>
<p>From this point is just a simple recursive function and a loop. The function always gets two arrays to compare. Then it
  starts a loop on the first parameter (making it the <code class="language-plaintext highlighter-rouge">left</code>) to compare the values:</p>
<ul>
  <li>If left-side value is <code class="language-plaintext highlighter-rouge">null</code>, that means originally there was an <code class="language-plaintext highlighter-rouge">[]</code>. Left is smaller, return <code class="language-plaintext highlighter-rouge">-1</code>.</li>
  <li>If the right-side pair does not exist, then the left is bigger, return <code class="language-plaintext highlighter-rouge">1</code>.</li>
  <li>If any of the left or right values is an array, while the other is a literal, we convert the literal into an array.</li>
  <li>If both values are arrays, we recursively call the compare function with these values and if it returns with <code class="language-plaintext highlighter-rouge">0</code>, we 
    continue the compare, otherwise we return what it returns (either <code class="language-plaintext highlighter-rouge">1</code> or <code class="language-plaintext highlighter-rouge">-1</code>).</li>
  <li>If both values are literals, and they are equal to each other, we continue the compare.</li>
  <li>If left is smaller, return <code class="language-plaintext highlighter-rouge">-1</code>.</li>
  <li>If right is smaller, return <code class="language-plaintext highlighter-rouge">1</code>.</li>
  <li>If we reach the end of the loop, and we see the size of the parameter is smaller, than the second’s, it means, left is
    smaller, return <code class="language-plaintext highlighter-rouge">-1</code>.</li>
  <li>If we didn’t return so far, the values should be equal, return <code class="language-plaintext highlighter-rouge">0</code>.</li>
</ul>
<h3 id="part-two">Part two</h3>
<p>Now we have a quite different game rule, however the code will hardly change.</p>
<ul>
  <li>We have to add two extra lines to the input: these will be the distress signal codes.</li>
  <li>We have to ignore the empty lines.</li>
  <li>We need to sort every line with the two new lines included.</li>
  <li>We have to check where are the distress signal codes now and multiply their indexes.</li>
  <li>The line indexing starts from 1.</li>
</ul>
<p>Luckily I instinctively wrote the <code class="language-plaintext highlighter-rouge">comparePairs()</code> function returns <code class="language-plaintext highlighter-rouge">-1</code>, <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>. With 20+ years of experience, this
  just came naturally. And what a luck! Now we have to sort all the lines, the PHP’s <code class="language-plaintext highlighter-rouge">usort()</code> function requires exactly a
  custom function that returns <code class="language-plaintext highlighter-rouge">-1</code>, <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>. So this time we have to change only the surrounding codes:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cp">&lt;?php</span>

<span class="nv">$lines</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'[[2]]'</span><span class="p">,</span>
    <span class="s1">'[[6]]'</span>
<span class="p">];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$lines</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$line</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">compare</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$a</span><span class="p">,</span> <span class="kt">string</span> <span class="nv">$b</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="nv">$left</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'[]'</span><span class="p">,</span> <span class="s1">'[null]'</span><span class="p">,</span><span class="nv">$a</span><span class="p">));</span>
    <span class="nv">$right</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'[]'</span><span class="p">,</span> <span class="s1">'[null]'</span><span class="p">,</span><span class="nv">$b</span><span class="p">));</span>

    <span class="k">return</span> <span class="nf">comparePairs</span><span class="p">(</span><span class="nv">$left</span><span class="p">,</span> <span class="nv">$right</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">comparePairs</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$left</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$right</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nb">usort</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="s1">'compare'</span><span class="p">);</span>

<span class="nv">$key1</span> <span class="o">=</span> <span class="nb">array_search</span><span class="p">(</span><span class="s1">'[[2]]'</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$key2</span> <span class="o">=</span> <span class="nb">array_search</span><span class="p">(</span><span class="s1">'[[6]]'</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">echo</span> <span class="p">(</span><span class="nv">$key1</span> <span class="o">*</span>  <span class="nv">$key2</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, I didn’t change the input file, instead I initialized the “line collection” array with the two new lines.
  Then, when we read the input, we skip all the empty lines, and add the rest to this collection.</p>
<p>I created a wrapper function called <code class="language-plaintext highlighter-rouge">compare</code>, to prepare the left- and right-side values before call our original <code class="language-plaintext highlighter-rouge">comparePairs()</code>.
  Of course, I could - and maybe I should - write it as an anonymous function as the second parameter of the <code class="language-plaintext highlighter-rouge">usort()</code>, but
  I like naming things.</p>
<p>The <code class="language-plaintext highlighter-rouge">usort()</code> will do the heavy job of sorting, then the <code class="language-plaintext highlighter-rouge">array_search</code> will get the indexes, that we need to solve the 
  puzzle.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[One of the first algorithm in programming you have to learn is sorting.]]></summary></entry><entry><title type="html">Advent of Code - Day 12</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-12" rel="alternate" type="text/html" title="Advent of Code - Day 12" /><published>2022-12-12T13:45:00+00:00</published><updated>2022-12-13T15:42:38+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-12</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-12"><![CDATA[<p><a href="https://adventofcode.com/2022/day/12" rel="noopener" target="_blank">Today’s puzzle</a> in short: <span lang="jp" title="Climb mount Niitaka">新高山登れ</span></p>
  <h3 id="the-input-data">The input data</h3>
  <p>We get a file with a bunch of alphabetical characters:</p>
  <ul>
    <li>The input has 41 lines and 71 columns</li>
    <li>Every character represents the height of the surface:
      <ul>
        <li><code class="language-plaintext highlighter-rouge">a</code> is the lowest</li>
        <li><code class="language-plaintext highlighter-rouge">z</code> is the highest</li>
        <li><code class="language-plaintext highlighter-rouge">b</code> is 1 level higher than <code class="language-plaintext highlighter-rouge">a</code></li>
        <li><code class="language-plaintext highlighter-rouge">c</code> is 1 level higher than <code class="language-plaintext highlighter-rouge">b</code></li>
        <li>…</li>
        <li><code class="language-plaintext highlighter-rouge">z</code> is 1 level higher than <code class="language-plaintext highlighter-rouge">y</code></li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">S</code> represents the start point</li>
    <li><code class="language-plaintext highlighter-rouge">E</code> represents the end point</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>One step at a time to a neighboring field only when:</p>
  <ul>
    <li>the neighbor field is maximum one level higher</li>
    <li>… or equal to the current one</li>
    <li>or lower (with any level) then the current one</li>
  </ul>
  <p>Our task is get from <code class="language-plaintext highlighter-rouge">S</code> to <code class="language-plaintext highlighter-rouge">E</code> in the shortest possible way.</p>
  <h3 id="the-data-model">The data model</h3>
  <p>Since part one and two are almost the same (again), I start with the common part. First we need to define a class to represent a
    field on the height map and also store the neighbor fields:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="kd">class</span> <span class="nc">Position</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$top</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$right</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$bottom</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$left</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="nv">$isVisited</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?int</span> <span class="nv">$distance</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">public</span> <span class="n">int</span> <span class="nv">$row</span><span class="p">,</span> <span class="kt">public</span> <span class="n">int</span> <span class="nv">$col</span><span class="p">,</span> <span class="kt">public</span> <span class="n">int</span> <span class="nv">$height</span><span class="p">,</span> <span class="kt">public</span> <span class="n">bool</span> <span class="nv">$isEnd</span><span class="p">)</span>
    <span class="p">{}</span>

    <span class="cd">/**
     * @return array&lt;int, Position&gt;
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">getNeighbors</span><span class="p">():</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="nv">$neighbors</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">top</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$neighbors</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">top</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$neighbors</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bottom</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$neighbors</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bottom</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$neighbors</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$neighbors</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>So we can instantiate this class  with some basic information:</p>
<ul>
  <li>the vertical and horizontal position on the map,</li>
  <li>the height of the field,</li>
  <li>a flag whether it’s the target field or not.</li>
</ul>
<p>For the neighboring fields we created four nullable properties. Obviously the fields on the sides at least one neighbor is <code class="language-plaintext highlighter-rouge">NULL</code>.
  We also add a function to collect all non-NULL neighbors.</p>
<p>Now it’s time to create the height map from the input data:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="cd">/** @var array&lt;int, array&lt;int, Position&gt;&gt; $heightMap */</span>
<span class="nv">$heightMap</span> <span class="o">=</span> <span class="p">[];</span>
<span class="cd">/** @var array&lt;int,Position&gt; $startPositions */</span>
<span class="nv">$startPositions</span> <span class="o">=</span> <span class="p">[];</span>

<span class="c1">// Read file and fill the height map with positions</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$letters</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$cols</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$letters</span><span class="p">);</span>
        <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$letters</span> <span class="k">as</span> <span class="nv">$col</span> <span class="o">=&gt;</span> <span class="nv">$character</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$height</span> <span class="o">=</span> <span class="nf">match</span><span class="p">(</span><span class="nv">$character</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="s1">'S'</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
                <span class="s1">'E'</span> <span class="o">=&gt;</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'z'</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                <span class="k">default</span> <span class="o">=&gt;</span> <span class="nb">ord</span><span class="p">(</span><span class="nv">$character</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="p">};</span>
            <span class="nv">$position</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Position</span><span class="p">(</span>
                <span class="n">row</span><span class="o">:</span> <span class="nv">$row</span><span class="p">,</span>
                <span class="n">col</span><span class="o">:</span> <span class="nv">$col</span><span class="p">,</span>
                <span class="n">height</span><span class="o">:</span> <span class="nv">$height</span><span class="p">,</span>
                <span class="n">isEnd</span><span class="o">:</span> <span class="nv">$character</span> <span class="o">===</span> <span class="s1">'E'</span>
            <span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$character</span> <span class="o">===</span> <span class="s1">'S'</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$startPositions</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$position</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$col</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$position</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$row</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Although for part one there’s only one start position, I use an array to store it, because in part two there are multiple
  start positions, so my goal is to achieve both tasks with the less work.</p>
<p>The trick here is the same I used before: convert the characters into numbers. This way, I will get mutually exclusive correspondence:</p>
<ul>
  <li>for <code class="language-plaintext highlighter-rouge">a</code> we will get <code class="language-plaintext highlighter-rouge">1</code>,</li>
  <li>for <code class="language-plaintext highlighter-rouge">b</code> we will get <code class="language-plaintext highlighter-rouge">2</code>,</li>
  <li>…</li>
  <li>for <code class="language-plaintext highlighter-rouge">z</code> we will get <code class="language-plaintext highlighter-rouge">26</code>.</li>
</ul>
<p>There are the two special cases:</p>
<ul>
  <li>for <code class="language-plaintext highlighter-rouge">S</code> we set the height to <code class="language-plaintext highlighter-rouge">1</code> and add the current position to the <code class="language-plaintext highlighter-rouge">$startPositions</code>,</li>
  <li>for <code class="language-plaintext highlighter-rouge">E</code> we set the height to <code class="language-plaintext highlighter-rouge">26</code> and use this information on the <code class="language-plaintext highlighter-rouge">Position</code>’s constructor.</li>
</ul>
<p>The only reason is to store these <code class="language-plaintext highlighter-rouge">Position</code> instances in a multidimensional array is to keep the relative positions between
  the fields. Therefore, we have all to <code class="language-plaintext highlighter-rouge">Position</code>s, so we can link the neighbors by reference.</p>
<p>But we do it smart: we link the neighbor field only when it fulfills the <a href="#game-rules">Game rules</a>:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">foreach</span> <span class="p">(</span><span class="nv">$heightMap</span> <span class="k">as</span> <span class="nv">$row</span> <span class="o">=&gt;</span> <span class="nv">$cols</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$cols</span> <span class="k">as</span> <span class="nv">$col</span> <span class="o">=&gt;</span> <span class="nv">$position</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$col</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$top</span> <span class="o">=</span> <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$col</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nv">$top</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">top</span> <span class="o">=</span> <span class="nv">$top</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$cols</span><span class="p">[</span><span class="nv">$col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$right</span> <span class="o">=</span> <span class="nv">$cols</span><span class="p">[</span><span class="nv">$col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nv">$right</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="nv">$right</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$col</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$bottom</span> <span class="o">=</span> <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="nv">$col</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nv">$bottom</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">bottom</span> <span class="o">=</span> <span class="nv">$bottom</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$cols</span><span class="p">[</span><span class="nv">$col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$left</span> <span class="o">=</span> <span class="nv">$cols</span><span class="p">[</span><span class="nv">$col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="nv">$left</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="nv">$left</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now, we have the <code class="language-plaintext highlighter-rouge">Position</code>s properly initializes, it’s time to  find the path. For this I create a new class, called <code class="language-plaintext highlighter-rouge">Path</code>:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">class</span> <span class="nc">Path</span>
<span class="p">{</span>
    <span class="cd">/** @var array&lt;int array&lt;int, int&gt;&gt; */</span>
    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$distanceMap</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="cd">/** @var array&lt;int, Position&gt;  */</span>
    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$queue</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="kt">?Position</span> <span class="nv">$endPosition</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">public</span> <span class="nc">Position</span> <span class="nv">$startPosition</span><span class="p">,</span> <span class="kt">public</span> <span class="n">int</span> <span class="nv">$rows</span><span class="p">,</span> <span class="kt">public</span> <span class="n">int</span> <span class="nv">$cols</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$tmp</span> <span class="o">=</span> <span class="nb">array_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">cols</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceMap</span> <span class="o">=</span> <span class="nb">array_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">rows</span><span class="p">,</span> <span class="nv">$tmp</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">startPosition</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$startPosition</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">findPath</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">do</span> <span class="p">{</span>
            <span class="nv">$current</span> <span class="o">=</span> <span class="nb">array_shift</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">isEnd</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">endPosition</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            
            <span class="k">if</span> <span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">isVisited</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nv">$current</span><span class="o">-&gt;</span><span class="n">isVisited</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceMap</span><span class="p">[</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">row</span><span class="p">][</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">col</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceMap</span><span class="p">[</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">row</span><span class="p">][</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="n">distance</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$neighbors</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="nf">getNeighbors</span><span class="p">();</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$neighbors</span> <span class="k">as</span> <span class="nv">$position</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$position</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span><span class="p">,</span> <span class="nv">$neighbors</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queue</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">printDistanceMap</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$row</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">rows</span><span class="p">;</span> <span class="nv">$row</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
           <span class="k">for</span> <span class="p">(</span><span class="nv">$col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$col</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">cols</span><span class="p">;</span> <span class="nv">$col</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">echo</span> <span class="nb">str_pad</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">distanceMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$col</span><span class="p">],</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="no">STR_PAD_BOTH</span><span class="p">)</span><span class="mf">.</span><span class="s1">' |'</span><span class="p">;</span>
           <span class="p">}</span>
           <span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
           <span class="k">echo</span> <span class="nb">str_repeat</span><span class="p">(</span><span class="s1">'------+'</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">cols</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>To start, we need to initialize this class with the <code class="language-plaintext highlighter-rouge">$startPosition</code> and number of rows and columns of the height map.
  Inside this class we will create a new “map”, a multidimensional array to track the distance, we already climbed.</p>
<p>We will also need a queue know how many <code class="language-plaintext highlighter-rouge">Position</code>s more we need to climb. The path find process ends in two cases:</p>
<ul>
  <li>we reach the <em>End</em>,</li>
  <li>we run out of <code class="language-plaintext highlighter-rouge">Position</code>s in the queue.</li>
</ul>
<p>Upon instantiation, we add the <code class="language-plaintext highlighter-rouge">$startPosition</code> directly into the queue. Then we call the <code class="language-plaintext highlighter-rouge">findPath()</code> public method, that
  will start the search:</p>
<ul>
  <li>It takes the first element out from the queue.</li>
  <li>If the current <code class="language-plaintext highlighter-rouge">Position</code> is the <em>End</em>, we save the <code class="language-plaintext highlighter-rouge">Position</code> in to the <code class="language-plaintext highlighter-rouge">endPosition</code> property and stop the process.</li>
  <li>If the current <code class="language-plaintext highlighter-rouge">Position</code> is marked as already visited, we skip to the next <code class="language-plaintext highlighter-rouge">Position</code> in the queue. We can do that, because
    when we visited it earlier, that means we already added all its neighbors to the queue.</li>
  <li>Mark the current <code class="language-plaintext highlighter-rouge">Position</code> as visited.</li>
  <li>If the current <code class="language-plaintext highlighter-rouge">Position</code> is not yet recorded in the <code class="language-plaintext highlighter-rouge">distanceMap</code>, we save the <code class="language-plaintext highlighter-rouge">Position</code>’s distance into it.</li>
  <li>We get the current <code class="language-plaintext highlighter-rouge">Position</code>’s neighbors. And check one-by-one:
    <ul>
      <li>If the given neighbor has no distance set, we set the current <code class="language-plaintext highlighter-rouge">Position</code>’s distance, plus one.</li>
    </ul>
  </li>
  <li>Merge the neighbors into the queue. Most likely there will be a ton of redundancy in the queue, but the <code class="language-plaintext highlighter-rouge">isVisited</code> check
    will fasten up the process.</li>
</ul>
<p>I also added a <code class="language-plaintext highlighter-rouge">printDistanceMap</code> method to visualize, which <code class="language-plaintext highlighter-rouge">Position</code>s were checked during the process.</p>
<h3 id="part-one">Part one</h3>
<p>Now we have everything to complete the task. Here we have one fix starting point, so our script will look like the following:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$rows</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$heightMap</span><span class="p">);</span>
<span class="nv">$cols</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$heightMap</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

<span class="nv">$path</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Path</span><span class="p">(</span>
    <span class="n">startPosition</span><span class="o">:</span> <span class="nv">$startPositions</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
    <span class="n">rows</span><span class="o">:</span> <span class="nv">$rows</span><span class="p">,</span>
    <span class="n">cols</span><span class="o">:</span> <span class="nv">$cols</span>
<span class="p">);</span>
<span class="nv">$path</span><span class="o">-&gt;</span><span class="nf">findPath</span><span class="p">();</span>

<span class="k">echo</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="n">endPosition</span><span class="o">-&gt;</span><span class="n">distance</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>Here we have to take all the level 1 fields as start point, and find the shortest of them all. For this, we need to modify
  our part one code only a bit:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ...</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$letters</span> <span class="k">as</span> <span class="nv">$col</span> <span class="o">=&gt;</span> <span class="nv">$character</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ...</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$height</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$startPositions</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$position</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">// ...</span>
        <span class="p">}</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="c1">// ...</span>

<span class="nv">$minimalPath</span> <span class="o">=</span> <span class="kc">PHP_INT_MAX</span><span class="p">;</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$startPositions</span> <span class="k">as</span> <span class="nv">$start</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$path</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Path</span><span class="p">(</span>
        <span class="n">startPosition</span><span class="o">:</span> <span class="nv">$start</span><span class="p">,</span>
        <span class="n">rows</span><span class="o">:</span> <span class="nv">$rows</span><span class="p">,</span>
        <span class="n">cols</span><span class="o">:</span> <span class="nv">$cols</span>
    <span class="p">);</span>
    <span class="nv">$path</span><span class="o">-&gt;</span><span class="nf">findPath</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$path</span><span class="o">-&gt;</span><span class="n">endPosition</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$minimalPath</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$minimalPath</span><span class="p">,</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="n">endPosition</span><span class="o">-&gt;</span><span class="n">distance</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$row</span> <span class="o">&lt;</span> <span class="nv">$rows</span><span class="p">;</span> <span class="nv">$row</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$col</span> <span class="o">&lt;</span> <span class="nv">$cols</span><span class="p">;</span> <span class="nv">$col</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$col</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">isVisited</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
            <span class="nv">$heightMap</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$col</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">distance</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$minimalPath</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>One small thing to notice here: we should not forget to “reset” every <code class="language-plaintext highlighter-rouge">Position</code> in every loop.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[I would climb the mountain high, so high, to be able to touch the sky.]]></summary></entry><entry><title type="html">Advent of Code - Day 11</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-11" rel="alternate" type="text/html" title="Advent of Code - Day 11" /><published>2022-12-11T13:45:00+00:00</published><updated>2022-12-13T13:39:16+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-11</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-11"><![CDATA[<p><a href="https://adventofcode.com/2022/day/11" rel="noopener" target="_blank">Today’s puzzle</a> in short: monkeys have
    their own rule how to choose who to pass the stolen items. We need to figure this out.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>The input data is way too complex to start parsing it. Instead, I chose to build the right data models from them.</p>
  <h4 id="game-rules">Game rules</h4>
  <p>So every monkey can have any number of items. With different calculation each monkey can determine how worried are we about 
    the item he/she/it is investigating at the moment. According to this worry level he/she/it passes the item either “left” or “right”.</p>
  <p>The topmost two monkeys who investigate the most items will give the puzzle result.</p>
  <h3 id="the-data-model">The data model</h3>
  <p>As I wrote before, it’s better to build up the data model from code, rather than parsing the input file:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="kd">class</span> <span class="nc">Monkey</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">WORRY_DIVIDER</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">Monkey</span> <span class="nv">$targetTrue</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">Monkey</span> <span class="nv">$targetFalse</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="nv">$inspectionCounter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$items</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">public</span> <span class="k">array</span> <span class="nv">$nextRoundItems</span> <span class="o">=</span> <span class="p">[],</span>
        <span class="kt">public</span> <span class="n">string</span> <span class="nv">$operand</span> <span class="o">=</span> <span class="s1">'$old'</span><span class="p">,</span>
        <span class="kt">public</span> <span class="n">int</span> <span class="nv">$testWorryIndex</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">runTest</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">setupNextRound</span><span class="p">();</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">items</span> <span class="k">as</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">testWorry</span><span class="p">(</span><span class="nv">$item</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="n">getNewWorry</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$old</span><span class="p">):</span> <span class="kt">int</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="k">eval</span><span class="p">(</span><span class="s1">'return '</span><span class="mf">.</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">operand</span><span class="p">)</span><span class="mf">.</span><span class="s1">';'</span><span class="p">);</span>
    <span class="p">}</span>


    <span class="k">private</span> <span class="k">function</span> <span class="n">testWorry</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$worry</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$newWorry</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getNewWorry</span><span class="p">(</span><span class="nv">$worry</span><span class="p">);</span>
        <span class="nv">$testWorry</span> <span class="o">=</span> <span class="nb">floor</span><span class="p">(</span><span class="nv">$newWorry</span> <span class="o">/</span> <span class="k">self</span><span class="o">::</span><span class="no">WORRY_DIVIDER</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">inspectionCounter</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$testWorry</span> <span class="o">%</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">testWorryIndex</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">targetTrue</span><span class="o">-&gt;</span><span class="n">nextRoundItems</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$testWorry</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">targetFalse</span><span class="o">-&gt;</span><span class="n">nextRoundItems</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$testWorry</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="n">setupNextRound</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">items</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">nextRoundItems</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">nextRoundItems</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>I made a dirty trick here: I used the hatred <code class="language-plaintext highlighter-rouge">eval()</code> function. The only reason to do this to simplify the final code.
  This way I can create a common class for each monkey, and I need only to pass their “calculation logic” as a string.</p>
<p>As you can see, I don’t pass the investigated items directly to the next monkey’s hand, instead, I just put into their “pockets”,
  so won’t mess up the investigation cycle. Then in the beginning of the next cycle each Monkey get the items out from their 
  “pocket” and the whole thing starts all over.</p>
<p>Let’s initialize the <code class="language-plaintext highlighter-rouge">Monkey</code>s with the input data.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$monkeys</span> <span class="o">=</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">66</span><span class="p">,</span> <span class="mi">79</span><span class="p">],</span> <span class="s1">'$old * 11'</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">84</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">75</span><span class="p">],</span> <span class="s1">'$old * 17'</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">85</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">67</span><span class="p">],</span> <span class="s1">'$old + 8'</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">70</span><span class="p">],</span> <span class="s1">'$old + 3'</span><span class="p">,</span> <span class="mi">19</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">57</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">78</span><span class="p">],</span> <span class="s1">'$old + 4'</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">65</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">72</span><span class="p">],</span> <span class="s1">'$old + 7'</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">77</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">91</span><span class="p">],</span> <span class="s1">'$old * $old'</span><span class="p">,</span> <span class="mi">17</span><span class="p">),</span>
    <span class="k">new</span> <span class="nc">Monkey</span><span class="p">([</span><span class="mi">76</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">99</span><span class="p">],</span> <span class="s1">'$old + 6'</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
<span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Now we have the <code class="language-plaintext highlighter-rouge">Monkey</code> instances, but we still need to add their buddies as references:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$monkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>

<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetTrue</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="nv">$monkeys</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">targetFalse</span> <span class="o">=</span> <span class="nv">$monkeys</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The good thing is that this data model is 99% the same for <code class="language-plaintext highlighter-rouge">Part one</code> and <code class="language-plaintext highlighter-rouge">Part two</code>.</p>
<h3 id="part-one">Part one</h3>
<p>So we need to run this investigation 20 times, collect the results and choose the two highest.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">const</span> <span class="no">ITERATION</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="no">ITERATION</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$m</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="p">;</span> <span class="nv">$m</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$monkeys</span><span class="p">[</span><span class="nv">$m</span><span class="p">]</span><span class="o">-&gt;</span><span class="nf">runTest</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$inspections</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$monkeys</span> <span class="k">as</span> <span class="nv">$monkey</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$inspections</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$monkey</span><span class="o">-&gt;</span><span class="n">inspectionCounter</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">rsort</span><span class="p">(</span><span class="nv">$inspections</span><span class="p">);</span>

<span class="p">[</span><span class="nv">$first</span><span class="p">,</span> <span class="nv">$second</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$inspections</span><span class="p">;</span>

<span class="k">echo</span> <span class="s2">"Monkey business level is: "</span><span class="mf">.</span><span class="p">(</span><span class="nv">$first</span> <span class="o">*</span> <span class="nv">$second</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>This part is almost the same as the previous one, except:</p>
<ul>
  <li>The <code class="language-plaintext highlighter-rouge">WORRY_DIVIDER</code> is “<em>something, that we need to figure out</em>”</li>
  <li>The <code class="language-plaintext highlighter-rouge">ITERATION</code> is <strong>10000</strong></li>
</ul>
<p>This high number of iteration makes the worry levels so high, that makes calculation difficult, and in some programming 
  languages even impossible because of the legendary <strong>overflow</strong>.</p>
<p>First I missed the “<em>find another way to keep your worry levels manageable</em>” suggestion, and just simply removed the division
  by three according to the puzzle description. Then I didn’t understand why they don’t accept my result. The solution
  was the <em>Least common multiple</em>.</p>
<p>And if you check every number we use to check the new worry level is actually a prime number. So the common value for the
  <code class="language-plaintext highlighter-rouge">WORRY_DIVIDER</code> is just simply multiply them.</p>
<p>All the changes on the part one code:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="kd">class</span> <span class="nc">Monkey</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">WORRY_DIVIDER</span> <span class="o">=</span> <span class="p">(</span><span class="mi">7</span> <span class="o">*</span> <span class="mi">13</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">19</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">11</span> <span class="o">*</span> <span class="mi">17</span> <span class="o">*</span> <span class="mi">3</span><span class="p">);</span>
    
    <span class="c1">// ...</span>
    
    <span class="k">private</span> <span class="k">function</span> <span class="n">testWorry</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$worry</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="nv">$testWorry</span> <span class="o">=</span> <span class="nv">$newWorry</span> <span class="o">%</span> <span class="k">self</span><span class="o">::</span><span class="no">WORRY_DIVIDER</span><span class="p">;</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ...</span>

<span class="k">const</span> <span class="no">ITERATION</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>

<span class="c1">// ...</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[These monkeys always steal the man's valuables. We need to get back, just need to figure out where they land next.]]></summary></entry><entry><title type="html">Advent of Code - Day 10</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-10" rel="alternate" type="text/html" title="Advent of Code - Day 10" /><published>2022-12-10T13:00:00+00:00</published><updated>2022-12-13T13:10:41+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-10</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-10"><![CDATA[<p><a href="https://adventofcode.com/2022/day/10" rel="noopener" target="_blank">Today’s puzzle</a> in short: we have a screen 
    display and need to figure out what we draw on it.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>This time in the input file we get some nice programming commands:</p>
  <ul>
    <li>Each line contains exactly 1 command</li>
    <li>If the command is <code class="language-plaintext highlighter-rouge">noop</code>, it suppose to do nothing just takes one CPU cycle.</li>
    <li>It the command is <code class="language-plaintext highlighter-rouge">addx n</code>, it suppose to increment / decrement the <em>X</em> register by <code class="language-plaintext highlighter-rouge">n</code> (<code class="language-plaintext highlighter-rouge">n</code> can be negative). This 
      command takes two CPU cycle.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <ul>
    <li>The <code class="language-plaintext highlighter-rouge">addx n</code> command first takes two CPU cycle, and only after that changes the register.</li>
  </ul>
  <h3 id="part-one">Part one</h3>
  <p>Now we have to sum the X register’s value in the 20th cycle and in every 40 cycles after that. This (with an additional
    calculation) will give the <code class="language-plaintext highlighter-rouge">Signal Strength</code>’s value, what we need to give to pass the puzzle.</p>
  <h4 id="the-code">The code</h4>
  <p>The code is so simple, I don’t waste too many characters to describe, how it works. Check it yourself:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$cycle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$signalStrength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$cycle</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$cycle</span> <span class="o">===</span> <span class="mi">20</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$cycle</span> <span class="o">-</span> <span class="mi">20</span><span class="p">)</span> <span class="o">%</span> <span class="mi">40</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$signalStrength</span> <span class="o">+=</span> <span class="nv">$cycle</span> <span class="o">*</span> <span class="nv">$x</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">!=</span> <span class="s1">'noop'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$cycle</span><span class="o">++</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$cycle</span> <span class="o">===</span> <span class="mi">20</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$cycle</span> <span class="o">-</span> <span class="mi">20</span><span class="p">)</span> <span class="o">%</span> <span class="mi">40</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$signalStrength</span> <span class="o">+=</span> <span class="nv">$cycle</span> <span class="o">*</span> <span class="nv">$x</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="p">[,</span> <span class="nv">$value</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
            <span class="nv">$x</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$signalStrength</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>The part two is a bit more complex, but should not confuse anybody. Here we have a small <code class="language-plaintext highlighter-rouge">display screen</code> which is 40
  characters wide and 6 characters tall. Luckily our input data contains exactly 240 CPU cycle (42 <code class="language-plaintext highlighter-rouge">noop</code> and 99 <code class="language-plaintext highlighter-rouge">addx</code> command).</p>
<p>So the input data is enough to fully fill the whole display with something. But with what? We move a <code class="language-plaintext highlighter-rouge">pixel</code> on this screen, 
  and this pixel is 3 characters wide. The X register’s actual value contains the position of the middle character.</p>
<p>We draw on the screen exactly one character in every CPU cycle. The drawing position’s row and column is calculated from 
  the CPU cycle.</p>
<ul>
  <li>If the actual drawing position covers any of the three characters of the “pixel” - defined by X register - we draw <code class="language-plaintext highlighter-rouge">#</code>.</li>
  <li>If no covering, we draw <code class="language-plaintext highlighter-rouge">.</code>.</li>
</ul>
<p>In the end we should see some ASCII art letters printed on the screen. These letters are the solution for the puzzle.</p>
<h4 id="the-code-1">The code</h4>
<p>The description is actually more complex than the solution:</p>
<ul>
  <li>Concatenate every <code class="language-plaintext highlighter-rouge">#</code>s and <code class="language-plaintext highlighter-rouge">.</code>s together into a string.</li>
  <li>We need to watch out for the screen size, when we reach the end, just add a line break.</li>
</ul>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nv">$cycle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$signalStrength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$crt</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
<span class="nv">$pixelPosition</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$cycle</span><span class="o">++</span><span class="p">;</span>
        <span class="nv">$crt</span> <span class="mf">.</span><span class="o">=</span> <span class="nf">getPixel</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span> <span class="nv">$pixelPosition</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">!=</span> <span class="s1">'noop'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$cycle</span><span class="o">++</span><span class="p">;</span>
            <span class="nv">$crt</span> <span class="mf">.</span><span class="o">=</span> <span class="nf">getPixel</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span> <span class="nv">$pixelPosition</span><span class="p">);</span>

            <span class="p">[,</span> <span class="nv">$value</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>
            <span class="nv">$x</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">getPixel</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$x</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="nv">$pixelPosition</span><span class="p">):</span> <span class="kt">string</span>
<span class="p">{</span>
    <span class="nv">$pixel</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">===</span> <span class="nv">$pixelPosition</span> <span class="o">||</span> <span class="nv">$x</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">===</span> <span class="nv">$pixelPosition</span> <span class="o">||</span> <span class="nv">$x</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">===</span> <span class="nv">$pixelPosition</span><span class="p">)</span> <span class="o">?</span> <span class="s1">'#'</span> <span class="o">:</span> <span class="s1">'.'</span><span class="p">;</span>
    <span class="nv">$pixelPosition</span><span class="o">++</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$pixelPosition</span> <span class="o">===</span> <span class="mi">40</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$pixel</span> <span class="mf">.</span><span class="o">=</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
        <span class="nv">$pixelPosition</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$pixel</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$crt</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[After the rope adventure, it's nice to do some easy task. We will be TV technicians!]]></summary></entry><entry><title type="html">Advent of Code - Day 9</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-9" rel="alternate" type="text/html" title="Advent of Code - Day 9" /><published>2022-12-09T13:45:00+00:00</published><updated>2022-12-13T12:21:35+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-9</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-9"><![CDATA[<h3 id="the-input-data">The input data</h3>
  <p>A very basic data file:</p>
  <ul>
    <li>each row contains a character and a number separated by space</li>
    <li>the characters represent directions (up, right, down, left): <code class="language-plaintext highlighter-rouge">U</code>, <code class="language-plaintext highlighter-rouge">R</code>, <code class="language-plaintext highlighter-rouge">D</code>, <code class="language-plaintext highlighter-rouge">L</code></li>
    <li>the numbers represent the distance/step</li>
  </ul>
  <p>Task: we pull a rope in the given direction for the given distance, and we need to figure out,</p>
  <h3 id="part-one">Part one</h3>
  <p>I will be honest: it was tough. I went down to a super primitive level, and wrote a low-performing code just to do what
    needs to be done and get the right result. Currently, I am not even sure, whether my code is actually working well or just
    accidentally gives the right result.</p>
  <p>Should I share the code? Well, it’s definitely the worst practice.</p>
  <h3 id="part-two">Part two</h3>
  <p>I’m not proud of myself. This is the day I have to give up. I could pass part one, but this one requires skills that I 
    don’t have yet. I failed. I tried, but couldn’t figure out the algorithm. I tried to reuse the functions from the part one,
    but it was a complete failure as well. I’m too tired, sad and disappointed now to try again. I give up…</p>
  <p><a href="https://www.reddit.com/r/adventofcode/comments/zgq3nr/2022_day_9_rope_pull/" rel="noopener" target="_blank">This is how it should look like visualized.</a></p>
  <p>When I was thinking about the solution, I thought if I treat every knot as a rope-head for the next knot, it will work. But I
    couldn’t even reproduce the example outputs of the <a href="https://adventofcode.com/2022/day/9#part2" rel="noopener" target="_blank">task</a>.</p>
  <p>Maybe later I will re-try and update this article… But not today.</p>
  <h3 id="the-next-day">The next day</h3>
  <p>I was very upset that I couldn’t figure out the solution, so I spent my whole Saturday (10th of December) to find a solution.
    I analyzed the example in the puzzle description and watched that reddit video of the working solution a million times to
    understand the logic behind it. And then I just found it.</p>
  <p>The solution I made for the part one was a total dead end, no wonder why lead me to nowhere. Yes, it accidentally gave the 
    right result, but it was a disaster.</p>
  <p>The new, working code covers both part one and two, you need only change the value of the <code class="language-plaintext highlighter-rouge">ROPE_LENGTH</code> constant. I also 
    added a print function to be able to visualize the result. For the puzzle example, it will look something like this:</p>
  <figure class="a-illustration">
    <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/backend/advent-of-code-day-9/example.png" width="707" />
    <figcaption class="a-illustration__caption">Output sample of the rope pull puzzle.</figcaption>
  </figure>
  <h3 id="the-code">The Code</h3>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="k">const</span> <span class="no">ROPE_LENGTH</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="nv">$knotPositions</span> <span class="o">=</span> <span class="nb">array_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="no">ROPE_LENGTH</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]);</span>
<span class="nv">$moves</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nv">$headX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$headY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$visitedByTail</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'0,0'</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
<span class="p">];</span>

<span class="nv">$minY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$maxY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$row</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="p">[</span><span class="nv">$direction</span><span class="p">,</span> <span class="nv">$steps</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>

        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$steps</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="nv">$direction</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">case</span> <span class="s1">'U'</span><span class="o">:</span>
                    <span class="nv">$headY</span><span class="o">++</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="s1">'R'</span><span class="o">:</span>
                    <span class="nv">$headX</span><span class="o">++</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="s1">'D'</span><span class="o">:</span>
                    <span class="nv">$headY</span><span class="o">--</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="s1">'L'</span><span class="o">:</span>
                    <span class="nv">$headX</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$knotPositions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$headX</span><span class="p">,</span> <span class="nv">$headY</span><span class="p">];</span>
            <span class="nv">$minY</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$minY</span><span class="p">,</span> <span class="nv">$headY</span><span class="p">);</span>
            <span class="nv">$maxY</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$maxY</span><span class="p">,</span> <span class="nv">$headY</span><span class="p">);</span>

            <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;</span> <span class="no">ROPE_LENGTH</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">moveKnot</span><span class="p">(</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$knotPositions</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="nv">$coordinate</span> <span class="o">=</span> <span class="nv">$knotPositions</span><span class="p">[</span><span class="no">ROPE_LENGTH</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="mf">.</span><span class="s1">','</span><span class="mf">.</span><span class="nv">$knotPositions</span><span class="p">[</span><span class="no">ROPE_LENGTH</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$visitedByTail</span><span class="p">[</span><span class="nv">$coordinate</span><span class="p">]))</span> <span class="p">{</span>
                <span class="nv">$visitedByTail</span><span class="p">[</span><span class="nv">$coordinate</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$visitedByTail</span><span class="p">[</span><span class="nv">$coordinate</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>

            <span class="nf">deleteLines</span><span class="p">(</span><span class="nv">$minY</span><span class="p">,</span> <span class="nv">$maxY</span><span class="p">);</span>
            <span class="nf">printStep</span><span class="p">(</span>
                <span class="n">moveIndex</span><span class="o">:</span> <span class="nv">$row</span><span class="p">,</span>
                <span class="n">stepIndex</span><span class="o">:</span> <span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                <span class="n">direction</span><span class="o">:</span> <span class="nv">$direction</span><span class="p">,</span>
                <span class="n">knotPositions</span><span class="o">:</span> <span class="nv">$knotPositions</span><span class="p">,</span>
                <span class="n">visitedByTail</span><span class="o">:</span> <span class="nv">$visitedByTail</span><span class="p">,</span>
                <span class="n">minY</span><span class="o">:</span> <span class="nv">$minY</span><span class="p">,</span>
                <span class="n">maxY</span><span class="o">:</span> <span class="nv">$maxY</span>
            <span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$row</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">function</span> <span class="n">moveKnot</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$knotIndex</span><span class="p">,</span> <span class="kt">array</span> <span class="o">&amp;</span><span class="nv">$knotPositions</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nv">$currentTailX</span><span class="p">,</span> <span class="nv">$currentTailY</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$knotIndex</span><span class="p">];</span>
    <span class="p">[</span><span class="nv">$previousTailX</span><span class="p">,</span> <span class="nv">$previousTailY</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$knotIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>

    <span class="nv">$diffX</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$previousTailX</span> <span class="o">-</span> <span class="nv">$currentTailX</span><span class="p">);</span>
    <span class="nv">$diffY</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$previousTailY</span> <span class="o">-</span> <span class="nv">$currentTailY</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$diffX</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nv">$diffY</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nv">$currentTailX</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$diffX</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$diffY</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
        <span class="o">?</span> <span class="mi">0</span>
        <span class="o">:</span> <span class="p">(</span><span class="nv">$previousTailX</span> <span class="o">-</span> <span class="nv">$currentTailX</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>

    <span class="nv">$currentTailY</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$diffX</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nv">$diffY</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
        <span class="o">?</span> <span class="mi">0</span>
        <span class="o">:</span> <span class="p">(</span><span class="nv">$previousTailY</span> <span class="o">-</span> <span class="nv">$currentTailY</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>

    <span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$knotIndex</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$currentTailX</span><span class="p">,</span> <span class="nv">$currentTailY</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">deleteLines</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$minY</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$maxY</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$maxY</span> <span class="o">+</span><span class="mi">6</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span> <span class="nv">$y</span> <span class="o">&gt;=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$minY</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">)</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="nv">$y</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">"</span><span class="se">\r\x1b</span><span class="s2">[K"</span><span class="p">;</span> <span class="c1">// remove this line</span>
        <span class="k">echo</span> <span class="s2">"</span><span class="se">\033</span><span class="s2">[1A</span><span class="se">\033</span><span class="s2">[K"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">printStep</span><span class="p">(</span>
    <span class="kt">int</span> <span class="nv">$moveIndex</span><span class="p">,</span>
    <span class="kt">int</span> <span class="nv">$stepIndex</span><span class="p">,</span>
    <span class="kt">string</span> <span class="nv">$direction</span><span class="p">,</span>
    <span class="kt">array</span> <span class="nv">$knotPositions</span><span class="p">,</span>
    <span class="kt">array</span> <span class="nv">$visitedByTail</span><span class="p">,</span>
    <span class="kt">int</span> <span class="nv">$minY</span><span class="p">,</span>
    <span class="kt">int</span> <span class="nv">$maxY</span>
<span class="p">):</span> <span class="kt">void</span> <span class="p">{</span>
    <span class="nv">$matrix</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="c1">// Prepare matrix</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$maxY</span> <span class="o">+</span><span class="mi">5</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span> <span class="nv">$y</span> <span class="o">&gt;=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$minY</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">);</span> <span class="nv">$y</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">180</span><span class="p">;</span> <span class="nv">$x</span> <span class="o">&lt;=</span> <span class="mi">40</span><span class="p">;</span> <span class="nv">$x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">' '</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'─'</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'|'</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$visitedByTail</span> <span class="k">as</span> <span class="nv">$coordinate</span> <span class="o">=&gt;</span> <span class="nv">$times</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="nv">$x</span><span class="p">,</span> <span class="nv">$y</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">','</span><span class="p">,</span> <span class="nv">$coordinate</span><span class="p">);</span>
        <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'.'</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Place markers</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="no">ROPE_LENGTH</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$sign</span> <span class="o">=</span> <span class="nv">$i</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">'H'</span> <span class="o">:</span> <span class="nv">$i</span><span class="p">;</span>
        <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">1</span><span class="p">]][</span><span class="nv">$knotPositions</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nv">$sign</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">echo</span> <span class="s2">"Move #</span><span class="nv">$moveIndex</span><span class="s2"> | Step #</span><span class="nv">$stepIndex</span><span class="s2"> into </span><span class="nv">$direction</span><span class="s2">"</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$matrix</span> <span class="k">as</span> <span class="nv">$index</span> <span class="o">=&gt;</span> <span class="nv">$row</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nb">str_pad</span><span class="p">(</span><span class="nv">$index</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="no">STR_PAD_LEFT</span><span class="p">)</span><span class="mf">.</span><span class="s1">'. '</span><span class="mf">.</span><span class="nb">implode</span><span class="p">(</span><span class="nv">$row</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">echo</span> <span class="s1">'      '</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">180</span><span class="p">;</span> <span class="nv">$x</span> <span class="o">&lt;=</span> <span class="mi">40</span><span class="p">;</span> <span class="nv">$x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="s1">'|'</span> <span class="o">:</span> <span class="s2">"'"</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>

    <span class="nb">usleep</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$visitedByTail</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[The day I failed.]]></summary></entry><entry><title type="html">Advent of Code - Day 8</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-8" rel="alternate" type="text/html" title="Advent of Code - Day 8" /><published>2022-12-08T10:45:00+00:00</published><updated>2022-12-08T09:37:44+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-8</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-8"><![CDATA[<p><a href="https://adventofcode.com/2022/day/8" rel="noopener" target="_blank">Today’s puzzle</a> in short: we have a 
    99 x 99 matrix filled with numbers. We need to check neighbor elements (top, right, bottom, left) and find the
    right value according to the task’s criteria</p>
  <h3 id="the-input-data">The input data</h3>
  <p>It’s a simple file filled with numbers:</p>
  <ul>
    <li>99 rows</li>
    <li>99 decimals in a row (0 through 9)</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>The matrix is a forest. Each number represents the height of a tree:</p>
  <ul>
    <li>0 is a very short tree</li>
    <li>9 is a very tall tree</li>
  </ul>
  <p>Our task is to return values defined by the tasks.</p>
  <h3 id="common-code">Common code</h3>
  <p>Like yesterday, we have some common code that is the same in both tasks. Namely, to read the input file and create the
    matrix. So let’s do it:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$forest</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span> <span class="mf">.</span> <span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="nv">$forest</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="nv">$rows</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$forest</span><span class="p">);</span>
<span class="nv">$columns</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$forest</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Although we know the input contains 99 rows and columns, we prepare for changes.</p>
<h3 id="part-one">Part one</h3>
<p>We need to find, how many trees are visible from outside the forest:</p>
<ul>
  <li>trees on the edges are visible by default</li>
  <li>an inner tree is visible only when there are smaller trees in any of the four directions</li>
</ul>
<p>For this task we have a big help: the trees on the edges are automatically visible, so we can do a fast calculation
  (2 times the rows and 2 times the columns, minus four for the four corners which we counted twice), and save time and energy 
  on the <code class="language-plaintext highlighter-rouge">for</code> loops. Then just iterate through the “inner” matrix and do the math:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$allVisibleTrees</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nv">$rows</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nv">$columns</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rows</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;</span> <span class="nv">$columns</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nf">isInnerTreeVisible</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$forest</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$allVisibleTrees</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">isInnerTreeVisible</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$row</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$column</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$matrix</span><span class="p">):</span> <span class="kt">bool</span>
<span class="p">{</span>
    <span class="nv">$rowNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">);</span>
    <span class="nv">$columnNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nv">$actualHeight</span> <span class="o">=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$column</span><span class="p">];</span>
    <span class="nv">$topHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$rightHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$bottomHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$leftHighest</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// top</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$topHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$topHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// right</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$columnNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$rightHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$rightHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// bottom</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rowNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$bottomHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$bottomHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// left</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$leftHighest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$leftHighest</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$topHighest</span>
        <span class="o">||</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$rightHighest</span>
        <span class="o">||</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$bottomHighest</span><span class="p">;</span>
        <span class="o">||</span> <span class="nv">$actualHeight</span> <span class="o">&gt;</span> <span class="nv">$leftHighest</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$allVisibleTrees</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Well, it’s not pretty, and deal with four <code class="language-plaintext highlighter-rouge">for</code> loops in a function that is called within a <code class="language-plaintext highlighter-rouge">for</code> loop which is itself in
  another <code class="language-plaintext highlighter-rouge">for</code> loop is anything but fast. But it’s not a business code, just a local script, so I can bravely focus on the
  goal.</p>
<h3 id="part-two">Part two</h3>
<p>Now, we need to invert the logic and check for each tree, how far can you see from the top of the given tree:</p>
<ul>
  <li>If the next tree in any direction is the same height or higher than the current tree, we stop counting the distance, that is the furthest
    tree.</li>
  <li>Trees on the edges have at least one direction where there are no more trees, so those distances will be zero.</li>
  <li>We have to calculate the “scenic score” of every tree: multiply the view distance of each direction.</li>
</ul>
<p>Again, we can save a lot of time and energy by skipping the trees on the edges, because their scenic score will be zero
  by the rules.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="nv">$highestScenicScore</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rows</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;</span> <span class="nv">$columns</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$highestScenicScore</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$highestScenicScore</span><span class="p">,</span> <span class="nf">getTreeScenicScore</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$forest</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="n">getTreeScenicScore</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$row</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$column</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$matrix</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="nv">$rowNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">);</span>
    <span class="nv">$columnNumber</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

    <span class="nv">$actualHeight</span> <span class="o">=</span> <span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$column</span><span class="p">];</span>

    <span class="nv">$scoreTop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$scoreRight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$scoreBottom</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$scoreLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// top</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreTop</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// right</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$columnNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreRight</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// bottom</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$rowNumber</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreBottom</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="nv">$column</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// left</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$scoreLeft</span><span class="o">++</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$matrix</span><span class="p">[</span><span class="nv">$row</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$actualHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$scoreTop</span> <span class="o">*</span> <span class="nv">$scoreRight</span> <span class="o">*</span> <span class="nv">$scoreBottom</span> <span class="o">*</span> <span class="nv">$scoreLeft</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nv">$highestScenicScore</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[It is winter, we have to do some lumber job. But first we need to find the right trees.]]></summary></entry><entry><title type="html">Advent of Code - Day 7</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-7" rel="alternate" type="text/html" title="Advent of Code - Day 7" /><published>2022-12-07T13:30:00+00:00</published><updated>2022-12-08T08:53:14+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-7</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-7"><![CDATA[<p><a href="https://adventofcode.com/2022/day/7" rel="noopener" target="_blank">Today’s puzzle</a> in short: we have a
    filesystem that we need to build up from command history (input), then figure out sizes for different criteria.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>Okay, this one fired up the boosters for sure. The input file has filesystem commands and some responses for the commands:</p>
  <h4 id="the-commands">The commands</h4>
  <p>The commands are normal *nix system commands. The <code class="language-plaintext highlighter-rouge">$</code> represents the command prompt.</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">$ cd /</code> - enter the root directory.</li>
    <li><code class="language-plaintext highlighter-rouge">$ cd ..</code> - one level up in the folder structure.</li>
    <li><code class="language-plaintext highlighter-rouge">$ cd xy</code> - enter the <code class="language-plaintext highlighter-rouge">xy</code> directory.</li>
    <li><code class="language-plaintext highlighter-rouge">$ ls</code> - list directory content.</li>
  </ul>
  <h4 id="responses">Responses</h4>
  <p>Only the <code class="language-plaintext highlighter-rouge">ls</code> command produces any output in this input data:</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">dir abc</code> - there’s a subdirectory with the name of <code class="language-plaintext highlighter-rouge">abc</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">1234 file.txt</code> - there’s a file with the name of <code class="language-plaintext highlighter-rouge">file.txt</code> and the size of <code class="language-plaintext highlighter-rouge">1234</code> bytes. The filename extension is 
      optional.</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>No special rules here. We need to reproduce the file system structure and then calculate different data out of it.</p>
  <h3 id="the-structure">The structure</h3>
  <p>For the first time we need to go into a more advanced mode and create some structure from the input data. Let’s start 
    with this one.</p>
  <p>We read the input data line-by-line and decide what its content is. For both part one and two, we need to deal with 
    directory sizes (that means the sizes all the files and subdirectories of the given directory), we can simplify our 
    structure and collect only the folders and the sizes of their content.</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$currentDirectory</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="nv">$rootDirectory</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ElfDirectory</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">?ElfDirectory</span> <span class="nv">$parent</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="cd">/** @var array&lt;int, ElfDirectory&gt;  */</span>
    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$children</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="cd">/** @var array&lt;int, string&gt; */</span>
    <span class="k">public</span> <span class="kt">array</span> <span class="nv">$files</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="nv">$totalSize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">==</span> <span class="s1">'$ ls'</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">==</span> <span class="s1">'$ cd ..'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$currentDirectory</span> <span class="o">=</span> <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="k">parent</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$line</span> <span class="o">==</span> <span class="s1">'$ cd /'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$newDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ElfDirectory</span><span class="p">();</span>
            <span class="nv">$newDirectory</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s1">'/'</span><span class="p">;</span>
            <span class="nv">$currentDirectory</span> <span class="o">=</span> <span class="nv">$rootDirectory</span> <span class="o">=</span> <span class="nv">$newDirectory</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$matches</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^\$ cd (?P&lt;dirName&gt;[a-z]+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$newDirectory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ElfDirectory</span><span class="p">();</span>
            <span class="nv">$newDirectory</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'dirName'</span><span class="p">];</span>
            <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$newDirectory</span><span class="p">;</span>
            <span class="nv">$newDirectory</span><span class="o">-&gt;</span><span class="k">parent</span> <span class="o">=</span> <span class="nv">$currentDirectory</span><span class="p">;</span>
            <span class="nv">$currentDirectory</span> <span class="o">=</span> <span class="nv">$newDirectory</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$matches</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^(?P&lt;fileSize&gt;\d+)\s(?P&lt;fileName&gt;[a-z\.]+)$/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="n">totalSize</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'fileSize'</span><span class="p">];</span>
            <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="n">files</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'fileName'</span><span class="p">]</span><span class="mf">.</span><span class="s1">' ('</span><span class="mf">.</span><span class="nv">$matches</span><span class="p">[</span><span class="s1">'fileSize'</span><span class="p">]</span><span class="mf">.</span><span class="s1">')'</span><span class="p">;</span>
            <span class="nv">$parent</span> <span class="o">=</span> <span class="nv">$currentDirectory</span><span class="o">-&gt;</span><span class="k">parent</span><span class="p">;</span>

            <span class="k">while</span> <span class="p">(</span><span class="nv">$parent</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$parent</span><span class="o">-&gt;</span><span class="n">totalSize</span> <span class="o">+=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$matches</span><span class="p">[</span><span class="s1">'fileSize'</span><span class="p">];</span>
                <span class="nv">$parent</span> <span class="o">=</span> <span class="nv">$parent</span><span class="o">-&gt;</span><span class="k">parent</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you see we use a nice and simple PHP class for this task. When we go line-by-line through the file, we check with 
  exact comparison and with regular expression the actual line:</p>
<ul>
  <li>When it’s an <code class="language-plaintext highlighter-rouge">ls</code> command, it’s just a placeholder, we can ignore it.</li>
  <li>When it’s a <code class="language-plaintext highlighter-rouge">cd ..</code> command, it means the <code class="language-plaintext highlighter-rouge">$currentDirectory</code> pointer should point to its parent element.</li>
  <li>When it’s a <code class="language-plaintext highlighter-rouge">cd /</code> command, we need to initialize the root level directory. We save it into both the <code class="language-plaintext highlighter-rouge">$currentDirectory</code>
    and the <code class="language-plaintext highlighter-rouge">$rootDirectory</code></li>
  <li>When we enter into a subdirectory, we create a new <code class="language-plaintext highlighter-rouge">ElfDirectory</code> instance, add it to the <code class="language-plaintext highlighter-rouge">$currentDirectory</code>’s children 
    list, and set the <code class="language-plaintext highlighter-rouge">$currentDirectory</code> as the parent of this directory instance. Then we set this new instance as the 
    <code class="language-plaintext highlighter-rouge">$currentDirectory</code>.</li>
  <li>When it’s directory listing row, and it’s a file, we increment the <code class="language-plaintext highlighter-rouge">$currentDirectory</code> size counter with the actual file
    size. To make our future life easier, we also iterate through the parent element(s) and increment their size counters 
    as well.</li>
  <li>When it’s directory listing row, and it’s a directory, we ignore it, the <code class="language-plaintext highlighter-rouge">cd</code> command will do the registration.</li>
</ul>
<p>As you see we also store the file name with the file size in a string within the <code class="language-plaintext highlighter-rouge">ElfDirectory</code>. However, it’s not necessary
  I still added it, because we will have a bonus function in the end, which can visually display the folder structure in the 
  terminal.</p>
<h3 id="part-one">Part one</h3>
<p>In part one, we need to analyze the file system and count all the folder sizes that are below <strong>100000</strong> bytes. As in the
  puzzle description is written, with this method we most likely will have redundant counts:</p>
<ul>
  <li>If folder “B” size within folder “A” is 3000,</li>
  <li>…and folder “A” size is 5000,</li>
  <li>…then both folder “A” and folder “B” is below 100000, so we count 8000, although folder “A”’s size counter already contains
    the size of folder “B”.</li>
</ul>
<p>What can we say? <code class="language-plaintext highlighter-rouge">¯\_(ツ)_/¯</code>.</p>
<p>To find the answer for the question, we need to create a recursive function that can climb the tree and check every element 
  of it:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">const</span> <span class="no">DIRECTORY_CHECK_MAX_SIZE</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>

<span class="k">function</span> <span class="n">calculateTotalSumOf10kFolders</span><span class="p">(</span><span class="kt">ElfDirectory</span> <span class="nv">$directory</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="nv">$sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span>  <span class="o">&lt;=</span> <span class="no">DIRECTORY_CHECK_MAX_SIZE</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$sum</span> <span class="o">+=</span> <span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">children</span> <span class="k">as</span> <span class="nv">$subDirectory</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$sum</span> <span class="o">+=</span> <span class="nf">calculateTotalSumOf10kFolders</span><span class="p">(</span><span class="nv">$subDirectory</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$sum</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nf">calculateTotalSumOf10kFolders</span><span class="p">(</span><span class="nv">$rootDirectory</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<h3 id="part-two">Part two</h3>
<p>Here we need to find the smallest directory that is larger than a specific size. What is this specific size? So we know that
  the total disk space is 70000000 bytes, and the update requires 30000000 bytes of free space. We also know, how much our
  filesystem totally consumes (which is the <code class="language-plaintext highlighter-rouge">totalSize</code> of the root directory). From these, we can calculate how much space
  we need more to fulfill the free space requirement of the update. We need to find one folder that frees up enough space
  upon deletion.</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">const</span> <span class="no">TOTAL_DISK_SPACE</span> <span class="o">=</span> <span class="mi">70000000</span><span class="p">;</span>
<span class="k">const</span> <span class="no">MINIMUM_UPDATE_SPACE_REQUIRED</span> <span class="o">=</span> <span class="mi">30000000</span><span class="p">;</span>

<span class="k">function</span> <span class="n">findSmallestDirectoryFreesUpEnoughSpace</span><span class="p">(</span><span class="kt">ElfDirectory</span> <span class="nv">$directory</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$actualMinimum</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$limit</span><span class="p">):</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span> <span class="o">&gt;</span> <span class="nv">$limit</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$actualMinimum</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$actualMinimum</span><span class="p">,</span> <span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">children</span> <span class="k">as</span> <span class="nv">$subDirectory</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$actualMinimum</span> <span class="o">=</span> <span class="nf">findSmallestDirectoryFreesUpEnoughSpace</span><span class="p">(</span><span class="nv">$subDirectory</span><span class="p">,</span> <span class="nv">$actualMinimum</span><span class="p">,</span> <span class="nv">$limit</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$actualMinimum</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$actualFreeSpace</span> <span class="o">=</span> <span class="no">TOTAL_DISK_SPACE</span> <span class="o">-</span> <span class="nv">$rootDirectory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="p">;</span>
<span class="nv">$spaceNeeded</span> <span class="o">=</span> <span class="no">MINIMUM_UPDATE_SPACE_REQUIRED</span> <span class="o">-</span> <span class="nv">$actualFreeSpace</span><span class="p">;</span>
<span class="k">echo</span> <span class="nf">findSmallestDirectoryFreesUpEnoughSpace</span><span class="p">(</span><span class="nv">$rootDirectory</span><span class="p">,</span> <span class="nv">$rootDirectory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="p">,</span> <span class="nv">$spaceNeeded</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>

</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>Of course, we don’t make extra checks whether there’s enough free space or not.</p>
<h3 id="bonus">Bonus</h3>
<p>I promised a bonus. It’s ugly as hell, and it can be optimized a lot, but for now it’s a good start. So the “not-so-proper”
  <code class="language-plaintext highlighter-rouge">tree</code> command:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="k">function</span> <span class="n">tree</span><span class="p">(</span><span class="kt">ElfDirectory</span> <span class="nv">$directory</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$level</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="k">echo</span> <span class="nb">str_repeat</span><span class="p">(</span><span class="s1">' | '</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$level</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
        <span class="mf">.</span><span class="p">(</span><span class="nv">$level</span> <span class="o">?</span> <span class="s1">' ├'</span> <span class="o">:</span><span class="s1">''</span><span class="p">)</span>
        <span class="mf">.</span><span class="s1">'['</span><span class="mf">.</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">name</span><span class="mf">.</span><span class="s1">'] ('</span><span class="mf">.</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">totalSize</span><span class="mf">.</span><span class="s1">')'</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">children</span> <span class="k">as</span> <span class="nv">$subDir</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">tree</span><span class="p">(</span><span class="nv">$subDir</span><span class="p">,</span> <span class="nv">$level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$directory</span><span class="o">-&gt;</span><span class="n">files</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nb">str_repeat</span><span class="p">(</span><span class="s1">' | '</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$level</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
            <span class="mf">.</span><span class="p">(</span><span class="nv">$level</span> <span class="o">?</span> <span class="s1">' | '</span> <span class="o">:</span><span class="s1">''</span><span class="p">)</span><span class="mf">.</span><span class="s1">' └'</span><span class="mf">.</span><span class="nv">$file</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>It will look something like this:</p>
<figure class="a-illustration">
  <img class="a-illustration__image" src="/assets/img/post-illustration-placeholder.png" data-src="/assets/img/blog/2022/backend/advent-of-code-day-7/visual.png" width="480" />
  <figcaption class="a-illustration__caption">Output sample of the tree function.</figcaption>
</figure>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[Dig deep in a folder structure, to find the one.]]></summary></entry><entry><title type="html">Advent of Code - Day 6</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-6" rel="alternate" type="text/html" title="Advent of Code - Day 6" /><published>2022-12-06T10:15:00+00:00</published><updated>2022-12-06T09:16:00+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-6</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-6"><![CDATA[<p><a href="https://adventofcode.com/2022/day/6" rel="noopener" target="_blank">Today’s puzzle</a> in short: we get a bunch 
    of random characters and need to find the first <code class="language-plaintext highlighter-rouge">n</code> distinct characters.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>Today there’s only one line in the input, but it’s a long one. No special rules for this, just a bunch of characters.</p>
  <p>Our task is to find the position of the first <code class="language-plaintext highlighter-rouge">n</code> distinct characters.</p>
  <h3 id="part-one-and-two">Part one and two</h3>
  <p>The two parts today are almost the same, the only difference is the value of the <code class="language-plaintext highlighter-rouge">n</code>:</p>
  <ul>
    <li>In part one, <code class="language-plaintext highlighter-rouge">n</code> is <em>4</em>.</li>
    <li>In part two, <code class="language-plaintext highlighter-rouge">n</code> is <em>14</em>.</li>
  </ul>
  <p>In the solution today I can simply read the whole input at once, since it contains only one line. Then we split this
    long string into array with the <code class="language-plaintext highlighter-rouge">str_split()</code> function, that I used before. Then just start counting. Make it simple:</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$line</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">);</span>
<span class="nv">$code</span> <span class="o">=</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
<span class="nv">$buffer</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">const</span> <span class="no">MARKER_LENGTH</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$code</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="nv">$buffer</span><span class="p">))</span> <span class="p">{</span>
        <span class="p">[,</span> <span class="nv">$buffer</span><span class="p">]</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="nv">$code</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">''</span><span class="p">,</span><span class="nv">$buffer</span><span class="p">));</span>
        <span class="nv">$buffer</span> <span class="o">=</span> <span class="nb">empty</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">)</span> <span class="o">?</span> <span class="p">[]</span> <span class="o">:</span> <span class="nb">str_split</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$buffer</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$code</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>

    <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$buffer</span><span class="p">)</span> <span class="o">==</span> <span class="no">MARKER_LENGTH</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>The only complexity in this story the buffer handling. I chose a very primitive and low performance, but yet effective 
  way:</p>
<ul>
  <li>check if the next character is in the buffer
    <ul>
      <li>if yes, then convert the buffer to string</li>
      <li>split by the next character and take the second part</li>
      <li>convert this to array again, or initialize an empty array if the second part is empty</li>
    </ul>
  </li>
  <li>add the new character to the buffer</li>
  <li>quit the loop when the buffer reached the <code class="language-plaintext highlighter-rouge">MARKER_LENGTH</code></li>
</ul>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[This time we need to analyze a spooky data stream.]]></summary></entry><entry><title type="html">Advent of Code - Day 5</title><link href="http://0.0.0.0:4000/backend/advent-of-code-day-5" rel="alternate" type="text/html" title="Advent of Code - Day 5" /><published>2022-12-05T16:30:00+00:00</published><updated>2022-12-05T15:26:45+00:00</updated><id>http://0.0.0.0:4000/backend/advent-of-code-day-5</id><content type="html" xml:base="http://0.0.0.0:4000/backend/advent-of-code-day-5"><![CDATA[<p><a href="https://adventofcode.com/2022/day/5" rel="noopener" target="_blank">Today’s puzzle</a> in short: for the first 
    sight I thought it will be a custom sorting algorithm, but in the end it became just a simple item movement between arrays.</p>
  <h3 id="the-input-data">The input data</h3>
  <p>For the first time, the input data contains additional information. We have to extract this information and create initial
    “warehouse” state in the PHP code. The input file must remain pilled with crane-movement orders.</p>
  <ul>
    <li>The first 10 lines must be deleted (can be added to the PHP code as comment)</li>
    <li>Each line has the same form of information: <code class="language-plaintext highlighter-rouge">move # from # to #</code>, where <code class="language-plaintext highlighter-rouge">#</code> is a decimal.*</li>
  </ul>
  <h4 id="game-rules">Game rules</h4>
  <p>The solution for the puzzle is to follow each order and move crates between the columns according to the command, where
    the numbers are defined as follows:</p>
  <ul>
    <li>The first number represents the amount of crates.</li>
    <li>The second number represents the source column.</li>
    <li>The third number represents the target column.</li>
  </ul>
  <p>Our task is to tell which item is on the top of each column.</p>
  <h3 id="part-one">Part one</h3>
  <p>Because of a misreading the elves predicted that the crane is the <code class="language-plaintext highlighter-rouge">CrateMover 9000</code> which can move only one item at a time.</p>
  <p>To solve this puzzle we need to think in arrays again and simple <code class="language-plaintext highlighter-rouge">pop</code> and <code class="language-plaintext highlighter-rouge">push</code> elements.</p>
  <div class="language-php highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre>
    </td>
    <td class="rouge-code">
      <pre><span class="nv">$storage</span> <span class="o">=</span> <span class="p">[</span>
    <span class="kc">null</span><span class="p">,</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'QFMRLWCV'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'DQL'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'PSRGWCNB'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'LCDHBQG'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'VGLFZS'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'DGNP'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'DZPVECW'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'CPDMS'</span><span class="p">),</span>
    <span class="nb">str_split</span><span class="p">(</span><span class="s1">'ZNWTVMPC'</span><span class="p">),</span>
<span class="p">];</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$command</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/move (?P&lt;iteration&gt;\d+) from (?P&lt;from&gt;\d+) to (?P&lt;to&gt;\d+)/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$command</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$command</span><span class="p">[</span><span class="s1">'iteration'</span><span class="p">];</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'to'</span><span class="p">]][]</span> <span class="o">=</span> <span class="nb">array_pop</span><span class="p">(</span><span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'from'</span><span class="p">]]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$storage</span> <span class="k">as</span> <span class="nv">$column</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$column</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nb">end</span><span class="p">(</span><span class="nv">$column</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
    </td>
  </tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>As you can see, first of all, I initialized the warehouse in a more readable way: string which is being split into array 
  of characters. Why should I give up something that works?</p>
<p>Then I used regular expression again to extract the numeric information out from the command. Then just simply do an 
  <code class="language-plaintext highlighter-rouge">array_pop()</code> and an <code class="language-plaintext highlighter-rouge">array_push</code> (with a simpler syntax) within a for loop.</p>
<p>In the end, we go through the final state of the <code class="language-plaintext highlighter-rouge">$storage</code> and print the last element of each item.</p>
<h3 id="part-two">Part two</h3>
<p>Now the elves figured out their mistake, and realized that the crane is actually a <code class="language-plaintext highlighter-rouge">CrateMover 9001</code>, which can move multiple 
  items at a time. This will change the results for sure.</p>
<p>Technically this means, either:</p>
<ul>
  <li>We keep the loop and the <code class="language-plaintext highlighter-rouge">array_pop</code>, but then we need to collect these popped items into a new array, and then reverse
    it before pushing to the target column.</li>
  <li>We find a way to pop as many items at once as we need, and pushing them one-by-one to the target column.</li>
</ul>
<p>The second option sounds better because:</p>
<ul>
  <li>We can eliminate an ugly loop.</li>
  <li>PHP has a built-in function to pop multiple elements</li>
  <li>The <code class="language-plaintext highlighter-rouge">array_push</code> can accept multiple elements</li>
  <li>We have the chance to use the <code class="language-plaintext highlighter-rouge">...</code> spread-operator which is always a nice thing.</li>
</ul>
<p>So the new code will look like this:</p>
<div class="language-php highlighter-rouge">
  <div class="highlight">
    <pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre>
  </td>
  <td class="rouge-code">
    <pre><span class="c1">// ... $storage</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fn</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="k">__DIR__</span><span class="mf">.</span><span class="s1">'/input.txt'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">((</span><span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fn</span><span class="p">,</span> <span class="mi">1024</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$line</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$line</span><span class="p">);</span>
        <span class="nv">$command</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/move (?P&lt;slice&gt;\d+) from (?P&lt;from&gt;\d+) to (?P&lt;to&gt;\d+)/'</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$command</span><span class="p">))</span> <span class="p">{</span>
            <span class="nb">array_push</span><span class="p">(</span><span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'to'</span><span class="p">]],</span> <span class="mf">...</span><span class="nb">array_splice</span><span class="p">(</span><span class="nv">$storage</span><span class="p">[</span><span class="nv">$command</span><span class="p">[</span><span class="s1">'from'</span><span class="p">]],</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="nv">$command</span><span class="p">[</span><span class="s1">'slice'</span><span class="p">]));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fn</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$storage</span> <span class="k">as</span> <span class="nv">$column</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$column</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nb">end</span><span class="p">(</span><span class="nv">$column</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
</pre>
  </td>
</tr>
</tbody>
</table>
</code></pre>
</div>
</div>
<p>We need to be careful with sticky keys on the keyboard, because I had an annoying debug session to figure out why I don’t 
  get the right result. The reason was, I used <code class="language-plaintext highlighter-rouge">array_slice()</code> and not <code class="language-plaintext highlighter-rouge">array_splice()</code>. Even with a typo the code was valid
  but it gave an absolute wrong answer for the task.</p>
]]></content><author><name>Gábor Iván</name></author><category term="backend" /><category term="advent" /><category term="php" /><summary type="html"><![CDATA[Christmas town is a big factory with a big warehouse. And in this warehouse the elves need to organize crates with the world-famous `CrateMover 9001`]]></summary></entry></feed>